<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.搭建本地的 hexo 的博客</title>
    <url>/leader755/687c226.html</url>
    <content><![CDATA[<h2 id="1-gt-官方文档-https-github-com-hexojs-hexo"><a href="#1-gt-官方文档-https-github-com-hexojs-hexo" class="headerlink" title="1&gt;官方文档   https://github.com/hexojs/hexo"></a>1&gt;官方文档   <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></h2><h2 id="2-gt-搭建博客"><a href="#2-gt-搭建博客" class="headerlink" title="2&gt;搭建博客"></a>2&gt;搭建博客</h2><h3 id="1-全局安装-hexo，创建博客"><a href="#1-全局安装-hexo，创建博客" class="headerlink" title="1.全局安装 hexo，创建博客"></a>1.全局安装 hexo，创建博客</h3><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g</code></pre>
<h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><pre class=" language-javascript"><code class="language-javascript">hexo init blog</code></pre>
<h3 id="3-启动本地-hexo-server"><a href="#3-启动本地-hexo-server" class="headerlink" title="3.启动本地 hexo-server"></a>3.启动本地 hexo-server</h3><pre class=" language-javascript"><code class="language-javascript">hexo server</code></pre>
<h2 id="4-新建一个-hexo-博客，富文本-makedown-文档"><a href="#4-新建一个-hexo-博客，富文本-makedown-文档" class="headerlink" title="4.新建一个 hexo 博客，富文本 makedown 文档"></a>4.新建一个 hexo 博客，富文本 makedown 文档</h2><pre class=" language-javascript"><code class="language-javascript">$ hexo <span class="token keyword">new</span> <span class="token string">"Hello Hexo"</span></code></pre>
<h2 id="5-打包发布到-hexo"><a href="#5-打包发布到-hexo" class="headerlink" title="5.打包发布到 hexo"></a>5.打包发布到 hexo</h2><pre><code>//打包发布 hexo
hexo generate


//重启服务(可以看到新增的文档)
hexo server
</code></pre><h2 id="6-packge-json-的命令行（备份文件）"><a href="#6-packge-json-的命令行（备份文件）" class="headerlink" title="6.packge.json 的命令行（备份文件）"></a>6.packge.json 的命令行（备份文件）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>2.一键搭建 github 博客</title>
    <url>/leader755/5c7986bc.html</url>
    <content><![CDATA[<h3 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h3><p>我们托管静态博客，使用的就是 GitHub Pages 的功能，首先我们需要创建一个个人主页，点击右上角的加号，选择 new repositories，进入创建页面。有的是说 username.github.io   但是我用着就是不行，说需要等待 10 分钟，username.github.com 下面的做法，不用等待，而且访问的地址是 username.github.io<br><img src="https://img-blog.csdn.net/20160515225516517?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1230&margin=%5Bobject%20Object%5D&originHeight=1230&originWidth=2546&status=done&style=none&width=2546" alt=""></p>
<p>这样我们以后可以通过 username.github.io 来访问你的主页，点击 Create repository 创建成功，然后点击侧边栏的 setting，进入设置页面：<br><img src="https://img-blog.csdn.net/20160515225531939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1232&margin=%5Bobject%20Object%5D&originHeight=1232&originWidth=2538&status=done&style=none&width=2538" alt=""></p>
<p>点击设置成主页，跳转后无需填写信息直接点击<code>Continue to Layouts</code>为主页选择一个主题：<br><img src="https://img-blog.csdn.net/20160515225550330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1230&margin=%5Bobject%20Object%5D&originHeight=1230&originWidth=2506&status=done&style=none&width=2506" alt=""></p>
<p>点击<code>publish pages</code>就创建个人主页成功了，这也是我们托管自己博客的仓库，你可以通过<code>username.github.io</code>来先浏览刚生成的个人主页。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>3.mac上生成SSH key与GitHub通信</title>
    <url>/leader755/b0c9815c.html</url>
    <content><![CDATA[<h2 id="1-检查-SSH-key-是否存在"><a href="#1-检查-SSH-key-是否存在" class="headerlink" title="1.检查 SSH key 是否存在"></a>1.检查 SSH key 是否存在</h2><p>在终端输入：</p>
<pre class=" language-javascript"><code class="language-javascript">ls <span class="token operator">-</span>al <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh</code></pre>
<p>如果没有，终端显示如下：</p>
<blockquote>
<p>No such file or directory</p>
</blockquote>
<p>如果已经存在，则会显示 id_rsa 和 id_rsa.pub</p>
<h2 id="2-生成新的-SSH-key"><a href="#2-生成新的-SSH-key" class="headerlink" title="2.生成新的 SSH key"></a>2.生成新的 SSH key</h2><h4 id="1-设置-username-和-email（github-每次-commit-都会记录他们）"><a href="#1-设置-username-和-email（github-每次-commit-都会记录他们）" class="headerlink" title="1.设置 username 和 email（github 每次 commit 都会记录他们）"></a>1.设置 username 和 email（github 每次 commit 都会记录他们）</h4><pre class=" language-javascript"><code class="language-javascript">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>
git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span></code></pre>
<h4 id="2-通过终端命令创建-ssh-key"><a href="#2-通过终端命令创建-ssh-key" class="headerlink" title="2.通过终端命令创建 ssh key"></a>2.通过终端命令创建 ssh key</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//其中 your_email@example.com 为你在 GitHub 注册时的邮箱</span>
'ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"1181012791@qq.com"</span></code></pre>
<p><a href="https://www.cnblogs.com/jarod99/p/7251361.html" target="_blank" rel="noopener">Bad escape character ‘ygen’ 错误原因!</a></p>
<blockquote>
<p>ssh-keygen -t rsa -C “邮箱”<br>ssh-keygen 命令中间没有空格，如果在 ssh 后面加上空格，会得到 Bad escape character ‘ygen’.的错误。</p>
</blockquote>
<p>成功后终端显示如下：</p>
<blockquote>
<p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/xxx/.ssh/id_rsa):</p>
</blockquote>
<p>提示你保存 .ssh/id_rsa 的路径，这里直接 enter</p>
<blockquote>
<p>Created directory ‘/Users/xxx/.ssh’.<br>Enter passphrase (empty for no passphrase):</p>
</blockquote>
<p>提示输入 passphrase，每次与 GitHub 通信都会要求输入 passphrase，以避免某些「失误」，建议输入<br><strong>这里有个问题需要注意，那就是当你在这里输入密码，以后在连接 gitHub 去 push 代码的时候都需要输入密码，非常蛋疼，所以在这里最好直接回车过即可，不用输入密码。**</strong>()**</p>
<h4 id="3-即连续-enter-3-次，就会生成-key。"><a href="#3-即连续-enter-3-次，就会生成-key。" class="headerlink" title="3.即连续 enter 3 次，就会生成 key。"></a>3.即连续 enter 3 次，就会生成 key。</h4><p>成功后终端显示：</p>
<blockquote>
<p>Your identification has been saved in /Users/xxx/.ssh/id_rsa.<br>Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 <a href="mailto:your_email@example.com">your_email@example.com</a><br>The key’s randomart image is:（后面图形省略）</p>
</blockquote>
<h2 id="3-添加-key-到-SSH"><a href="#3-添加-key-到-SSH" class="headerlink" title="3.添加 key 到 SSH"></a>3.添加 key 到 SSH</h2><p>输入命令：</p>
<pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa</code></pre>
<p>此时会要求输入 passphrase，输入步骤二中填的 passphrase<br>成功后，终端显示：</p>
<blockquote>
<p>Identity added: /Users/xxx/.ssh/id_rsa (/Users/xxx/.ssh/id_rsa)</p>
</blockquote>
<p>最后，在 /Users/xxx/.ssh/ 生成两个文件，id_rsa 和 id_rsa.pub<br>此时，SSH key 已经生成成功</p>
<h2 id="4-添加-SSH-key-到-GitHub-和-coding"><a href="#4-添加-SSH-key-到-GitHub-和-coding" class="headerlink" title="4.添加 SSH key 到 GitHub 和 coding"></a>4.添加 SSH key 到 GitHub 和 coding</h2><h4 id="1-复制-id-rsa-pub-中的所有内容"><a href="#1-复制-id-rsa-pub-中的所有内容" class="headerlink" title="1.复制 id_rsa.pub 中的所有内容,"></a>1.复制 id_rsa.pub 中的所有内容,</h4><p>打开 id_rsa.pub，终端命令：</p>
<blockquote>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub</code></pre>
<p>手动复制以 ssh-rsa 到以 <a href="mailto:your_email@example.com">your_email@example.com</a> 结尾的所有内容</p>
<p>或者直接输入命令复制 id_rsa.pub 中的所有内容，终端命令：</p>
<pre class=" language-javascript"><code class="language-javascript">pbcopy <span class="token operator">&lt;</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>_adirs<span class="token punctuation">.</span>pub<span class="token punctuation">;</span></code></pre>
<h2 id="5-登录-GitHub-和-coding"><a href="#5-登录-GitHub-和-coding" class="headerlink" title="5.登录 GitHub 和 coding"></a>5.登录 GitHub 和 coding</h2><h4 id="github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key"><a href="#github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key" class="headerlink" title="github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key"></a>github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key</h4><h4 id="coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥"><a href="#coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥" class="headerlink" title="coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥"></a>coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥</h4><p>Title 随便写<br>Key 粘贴之前复制的内容<br>这样 SSH key 就添加的 GitHub 或者 coding.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333300890-a4b759da-4e1d-4837-8cc3-c2c3b1fa1f01.png#align=left&display=inline&height=565&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1130&originWidth=1902&size=254444&status=done&style=none&width=951" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333326072-e78c1bf9-ed79-4811-bbc9-a203e423b57a.png#align=left&display=inline&height=560&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1120&originWidth=1946&size=357795&status=done&style=none&width=973" alt="image.png"></p>
<h2 id="6-检测-SSH-key"><a href="#6-检测-SSH-key" class="headerlink" title="6.检测 SSH key"></a>6.检测 SSH key</h2><p>输入命令：</p>
<pre class=" language-javascript"><code class="language-javascript">ssh git@github<span class="token punctuation">.</span>com</code></pre>
<p>此时会验证 SSH key 是否可以访问 GitHub<br>成功显示如下：</p>
<blockquote>
<p>Hi your_name! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p>
</blockquote>
<blockquote>
<p>以上为提示内容，不过这里还是有一个需要注意的地方，如果没有上面的成功提示输出的话也不要害怕，我们可以先自己在本地建立一个 gitHub 仓库，然后进行 push 操作，如果 push 成功那么设置是成功的，如果 push 不上去的话再去检查。</p>
</blockquote>
<h2 id="7-使用-git-去创建一个-ssh-key-就完成了"><a href="#7-使用-git-去创建一个-ssh-key-就完成了" class="headerlink" title="7.使用 git 去创建一个 ssh key 就完成了"></a>7.使用 git 去创建一个 ssh key 就完成了</h2>]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>4.mac 上使用 vi</title>
    <url>/leader755/896b4ef0.html</url>
    <content><![CDATA[<p>上一篇博客提到 mac 进入 vi 编辑界面，复制 ssh key。这篇就是介绍如何保存退出 vi。</p>
<p>如果是 vi，则：<br><strong>Esc</strong> 退出编辑模式，输入以下命令：<br><strong>:wq</strong> 保存后退出 vi，若为 :wq! 则为强制储存后退出（常用）<br><strong>:w</strong> 保存但不退出（常用）<br><strong>:w!</strong> 若文件属性为『只读』时，强制写入该档案<br><strong>:q</strong> 离开 vi （常用）<br><strong>:q!</strong> 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。<br><strong>:e!</strong> 将档案还原到最原始的状态！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>vi</tag>
      </tags>
  </entry>
  <entry>
    <title>5.hexo文档部署到 Github和 coding</title>
    <url>/leader755/38b922c9.html</url>
    <content><![CDATA[<h2 id="1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："><a href="#1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：" class="headerlink" title="1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："></a>1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313278812-df6c1515-c7b2-4988-ab07-98655129341a.png#align=left&display=inline&height=144&margin=%5Bobject%20Object%5D&name=image.png&originHeight=288&originWidth=1052&size=44477&status=done&style=none&width=526" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333533439-ce902a29-c0fc-49e0-90a7-90e71ce9c3aa.png#align=left&display=inline&height=120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=972&size=33032&status=done&style=none&width=486" alt="image.png"><br>如果不部署到 coding，就只写 github 就行。</p>
<pre class=" language-javascript"><code class="language-javascript">deploy<span class="token punctuation">:</span> type<span class="token punctuation">:</span> git<span class="token punctuation">;</span>
repo<span class="token punctuation">:</span> github<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//github.com/Leader755/leader755.github.io.git</span>
https<span class="token punctuation">:</span> coding<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//e.coding.net/Leader755/leader755.coding.git</span>
https<span class="token punctuation">:</span> branch<span class="token punctuation">:</span> master<span class="token punctuation">;</span></code></pre>
<h2 id="2：要安装一个部署插件-hexo-deployer-git。"><a href="#2：要安装一个部署插件-hexo-deployer-git。" class="headerlink" title="2：要安装一个部署插件 hexo-deployer-git。"></a>2：要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>。</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<h2 id="3：发布到-github"><a href="#3：发布到-github" class="headerlink" title="3：发布到 github"></a>3：发布到 github</h2><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>
<pre class=" language-javascript"><code class="language-javascript">hexo g <span class="token operator">-</span>d</code></pre>
<p>稍等一会，在浏览器访问网址： <a href="https://xn--6qqv7i14ofosyrb.github.io/" target="_blank" rel="noopener">https://你的用户名.github.io</a> 就会看到你的博客啦！！</p>
<h2 id="4-写作并发布"><a href="#4-写作并发布" class="headerlink" title="4.写作并发布"></a>4.写作并发布</h2><h3 id="1-直接写作（情况）"><a href="#1-直接写作（情况）" class="headerlink" title="1.直接写作（情况）"></a>1.直接写作（情况）</h3><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 官网。<br>新建文章，输入以下命令即可</p>
<pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token string">'文章标题'</span></code></pre>
<p>执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。<br>在 Markdown 文章里面输入你的文章内容</p>
<h3 id="2-存查稿-情况"><a href="#2-存查稿-情况" class="headerlink" title="2.存查稿(情况)"></a>2.存查稿(情况)</h3><h4 id="1-首先查看-sources-文件下是否有-drafts-文件夹"><a href="#1-首先查看-sources-文件下是否有-drafts-文件夹" class="headerlink" title="1.首先查看 sources 文件下是否有_drafts 文件夹"></a>1.首先查看 sources 文件下是否有_drafts 文件夹</h4><p>**  _drafts(草稿文章缓存区)，_posts(正式文章缓存区)**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313764893-f9511ad0-1933-4c23-becd-bc162c0e8f3e.png#align=left&display=inline&height=149&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=782&size=24987&status=done&style=none&width=391" alt="image.png"></p>
<p>如果没有该文件夹或者报错，则运行：</p>
<pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token class-name">draft</span> <span class="token string">"My First Blog Post"</span></code></pre>
<h4 id="2-将草稿文章推送到正式区"><a href="#2-将草稿文章推送到正式区" class="headerlink" title="2.将草稿文章推送到正式区"></a>2.将草稿文章推送到正式区</h4><pre class=" language-javascript"><code class="language-javascript">hexo publish <span class="token string">"My First Blog Post"</span></code></pre>
<h3 id="2-打包"><a href="#2-打包" class="headerlink" title="2.打包"></a>2.打包</h3><pre class=" language-javascript"><code class="language-javascript">hexo g</code></pre>
<h3 id="3-运行本地-hexo"><a href="#3-运行本地-hexo" class="headerlink" title="3.运行本地 hexo"></a>3.运行本地 hexo</h3><pre class=" language-javascript"><code class="language-javascript">hexo s</code></pre>
<h3 id="4-部署到-github-和-coding"><a href="#4-部署到-github-和-coding" class="headerlink" title="4.部署到 github 和 coding"></a>4.部署到 github 和 coding</h3><p>因为 github 和 coding 使用了同一个公钥，所以推送时会触发多个仓库。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//部署前先清理一下缓存命令</span>
hexo clean

<span class="token comment" spellcheck="true">//部署</span>
hexo g <span class="token operator">-</span>d</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>6.hexo插件篇（必看）</title>
    <url>/leader755/dfc8c080.html</url>
    <content><![CDATA[<h2 id="1-gt-安装插件说明"><a href="#1-gt-安装插件说明" class="headerlink" title="1&gt;安装插件说明"></a>1&gt;安装插件说明</h2><p>如果应用官网的主题你会发现，有可能出现打不开的情况，这是由于有些主题使用的插件，本地并没有安装导致的报错。所以本篇文章为补充说明篇。（无问题的可以跳过）</p>
<h2 id="2-gt-常用的插件"><a href="#2-gt-常用的插件" class="headerlink" title="2&gt;常用的插件"></a>2&gt;常用的插件</h2><h3 id="代码高亮（建议安装）"><a href="#代码高亮（建议安装）" class="headerlink" title="代码高亮（建议安装）"></a>代码高亮（建议安装）</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">-</span>S hexo<span class="token operator">-</span>prism<span class="token operator">-</span>plugin</code></pre>
<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>
<pre class=" language-javascript"><code class="language-javascript">highlight<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">false</span>
  line_number<span class="token punctuation">:</span> <span class="token boolean">true</span>
  auto_detect<span class="token punctuation">:</span> <span class="token boolean">false</span>
  tab_replace<span class="token punctuation">:</span> <span class="token boolean">false</span>
  wrap<span class="token punctuation">:</span> <span class="token boolean">true</span>
  hljs<span class="token punctuation">:</span> <span class="token boolean">false</span>

prism_plugin<span class="token punctuation">:</span>
  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    # realtime<span class="token operator">/</span>preprocess
  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>
  line_number<span class="token punctuation">:</span> <span class="token boolean">false</span>    # <span class="token keyword">default</span> <span class="token boolean">false</span>
  custom_css<span class="token punctuation">:</span></code></pre>
<h3 id="搜索（建议安装）"><a href="#搜索（建议安装）" class="headerlink" title="搜索（建议安装）"></a>搜索（建议安装）</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
field<span class="token punctuation">:</span> post<span class="token punctuation">;</span></code></pre>
<p>###</p>
<h3 id="文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）"><a href="#文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）" class="headerlink" title="文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）"></a>文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>wordcount</code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：<br>(此处注意源文档的 postInfo 是错的，应该为 post_wordcount)</p>
<pre class=" language-javascript"><code class="language-javascript">post_wordcount<span class="token punctuation">:</span>
  date<span class="token punctuation">:</span> <span class="token boolean">true</span> # 发布日期
  update<span class="token punctuation">:</span> <span class="token boolean">true</span> # 更新日期
  wordCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章字数统计
  totalCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 站点总文章字数
  min2read<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读时长
  readCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读次数</code></pre>
<h3 id="添加代码压缩（建议安装）"><a href="#添加代码压缩（建议安装）" class="headerlink" title="添加代码压缩（建议安装）"></a>添加代码压缩（建议安装）</h3><p><a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a>插件实现压缩代码，底层是通过 gulp 来实现的。但是这个插件是有 Bug 的：</p>
<ul>
<li>压缩 md 文件会使 markdown 语法的代码块消失</li>
<li>会删除全角空格</li>
</ul>
<p>在博客站点根目录执行安装代码：</p>
<pre><code>npm install hexo-neat --save</code></pre><p>紧接着在站点根目录下的配置文件添加如下代码：</p>
<pre><code>neat_enable: true
neat_html:
  enable: true
  exclude:
neat_css:
  enable: true
  exclude:
    - &#39;*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;*.min.js&#39;</code></pre><p>然后直接 hexo cl&amp;&amp;hexo g 就可以了，会自动压缩文件 。<br>补充：为了解决以上 Bug，对于<code>halo</code>主题（其他主题自行解决）需要将以上默认配置修改为：</p>
<pre><code>#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）
neat_enable: true
neat_html:
  enable: true
  exclude:
    - &#39;**/*.md&#39;
neat_css:
  enable: true
  exclude:
    - &#39;**/*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;**/*.min.js&#39;
    - &#39;**/**/instantpage.js&#39;
    - &#39;**/matery.js&#39;</code></pre><p>###</p>
<h3 id="外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）"><a href="#外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）"></a>外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）</h3><blockquote>
<p><a href="https://github.com/hvnobug/hexo-external-link" target="_blank" rel="noopener">hexo-external-link</a>是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置<code>target=’_blank’</code>, <code>rel=’external nofollow noopener noreferrer’</code>告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p>
</blockquote>
<p>安装:</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>external<span class="token operator">-</span>link <span class="token operator">--</span>save</code></pre>
<p>配置插件 在 Hexo 根目录的_config.yml 文件中添加如下配置。</p>
<pre class=" language-javascript"><code class="language-javascript">hexo_external_link<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  enable_base64_encode<span class="token punctuation">:</span> <span class="token boolean">true</span>
  url_param_name<span class="token punctuation">:</span> <span class="token string">'u'</span>
  html_file_name<span class="token punctuation">:</span> <span class="token string">'go.html'</span>
  target_blank<span class="token punctuation">:</span> <span class="token boolean">true</span>
  link_rel<span class="token punctuation">:</span> <span class="token string">'external nofollow noopener noreferrer'</span>
  domain<span class="token punctuation">:</span> <span class="token string">'your_domain'</span> # 如果开启了防盗链
  safety_chain<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<ul>
<li>enable：是否开启 hexo_external_link 插件 - 默认 false</li>
<li>enable_base64_encode：是否对跳转 url 使用 base64 编码 - 默认 fasle</li>
<li>url_param_name：url 参数名,在跳转到外链传递给 html_file_name 的参数名 - 默认 ‘u’</li>
<li>html_file_name：跳转到外链的页面文件路径 - 默认 ‘go.html’</li>
<li>target_blank：是否为外链的 a 标签添加 target=’_blank’ - 默认 true</li>
<li>link_rel：设置外链的 a 标签的 rel 属性 - 默认 ‘external nofollow noopener noreferrer’</li>
<li>domain：如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li>
<li>safety_chain：go.html 为了防止外链盗用 对域名进行的判断 - 默认 false 即关闭防盗链</li>
</ul>
<p>###</p>
<h3 id="添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）"></a>添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>feed <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">feed<span class="token punctuation">:</span> type<span class="token punctuation">:</span> atom<span class="token punctuation">;</span>
path<span class="token punctuation">:</span> atom<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
limit<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
hub<span class="token punctuation">:</span> content<span class="token punctuation">:</span> content_limit<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">;</span>
content_limit_delim<span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
order_by<span class="token punctuation">:</span> <span class="token operator">-</span>date<span class="token punctuation">;</span></code></pre>
<h3 id="添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）"></a>添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 的 Hexo 插件来做 <code>Sitemap</code>，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>sitemap <span class="token operator">--</span>save</code></pre>
<p>访问地址：/sitemap.xml</p>
<h3 id="中文链接转拼音（可选安装）"><a href="#中文链接转拼音（可选安装）" class="headerlink" title="中文链接转拼音（可选安装）"></a>中文链接转拼音（可选安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>这里为可选安装，因为我希望使用<code>urlname</code>进行连接访问，中文链接转拼音由一个缺点就是当文章名字过长会显示十分臃肿。<code>urlname</code>的方式见下文。<br>安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span></code></pre>
<blockquote>
<p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>
</blockquote>
<p>###</p>
<p>###</p>
<h3 id="添加-emoji-表情支持（可选安装）"><a href="#添加-emoji-表情支持（可选安装）" class="headerlink" title="添加 emoji 表情支持（可选安装）"></a>添加 emoji 表情支持（可选安装）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>filter<span class="token operator">-</span>github<span class="token operator">-</span>emojis <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">githubEmojis<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  className<span class="token punctuation">:</span> github<span class="token operator">-</span>emoji
  inject<span class="token punctuation">:</span> <span class="token boolean">true</span>
  styles<span class="token punctuation">:</span>
  customEmojis<span class="token punctuation">:</span></code></pre>
<h3 id="deploy-发布插件（可选安装）（部署到-github-需要安装）"><a href="#deploy-发布插件（可选安装）（部署到-github-需要安装）" class="headerlink" title="deploy 发布插件（可选安装）（部署到 github 需要安装）"></a>deploy 发布插件（可选安装）（部署到 github 需要安装）</h3><p>如果你想通过<code>deploy</code>的方式进行推送<code>public文件夹</code>到托管网站，你需要安装</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<p>当然你也可以选择不装，使用 Github Actions、docker 等方式<br>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>
<h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ej``s</code> 文件中，包括站点、使用的主题、访问量等。</p>
<h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre>
<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>
<ul>
<li>Facebook: <code>fab fa-facebook</code></li>
<li>Twitter: <code>fab fa-twitter</code></li>
<li>Google-plus: <code>fab fa-google-plus</code></li>
<li>Linkedin: <code>fab fa-linkedin</code></li>
<li>Tumblr: <code>fab fa-tumblr</code></li>
<li>Medium: <code>fab fa-medium</code></li>
<li>Slack: <code>fab fa-slack</code></li>
<li>Sina Weibo: <code>fab fa-weibo</code></li>
<li>Wechat: <code>fab fa-weixin</code></li>
<li>QQ: <code>fab fa-qq</code></li>
<li>Zhihu: <code>fab fa-zhihu</code><blockquote>
<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>
</blockquote>
</li>
</ul>
<h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>
<h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。<br>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p>
</blockquote>
<p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p>
<h1 id="是否在首页显示音乐"><a href="#是否在首页显示音乐" class="headerlink" title="是否在首页显示音乐."></a>是否在首页显示音乐.</h1><pre class=" language-javascript"><code class="language-javascript"># 是否在首页显示音乐<span class="token punctuation">.</span>
music<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  showTitle<span class="token punctuation">:</span> <span class="token boolean">false</span>
  title<span class="token punctuation">:</span> 听听音乐
  fixed<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否开启吸底模式
  autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否自动播放
  theme<span class="token punctuation">:</span> <span class="token string">'#42b983'</span>
  loop<span class="token punctuation">:</span> <span class="token string">'all'</span> # 音频循环播放<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'none'</span>
  order<span class="token punctuation">:</span> <span class="token string">'list'</span> # 音频循环顺序<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'random'</span>
  preload<span class="token punctuation">:</span> <span class="token string">'auto'</span> # 预加载，可选值<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span> <span class="token string">'metadata'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span>
  volume<span class="token punctuation">:</span> <span class="token number">0.7</span> # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效
  listFolded<span class="token punctuation">:</span> <span class="token boolean">false</span> # 列表默认折叠
  listMaxHeight<span class="token punctuation">:</span> # 列表最大高度</code></pre>
<h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><ol>
<li><strong>直接将<code>themes/halo/config/scaffolds</code>内所有内容拷贝到**</strong><code>Hexo</code>根目录下*<strong>*的<code>scaffolds</code>文件夹内替换</strong></li>
<li>或者自己重新修改，修改请参考下面</li>
</ol>
<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 、<code>urlname</code> 和 <code>date</code> 的值。</p>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td><code>Markdown</code> 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 <code>_config.yml</code> 中的 <code>author</code></td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td><code>featureImages</code> 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>[http://xxx.com/xxx.jpg](http://xxx.com/xxx.jpg)</code></td>
</tr>
<tr>
<td>top</td>
<td><code>true</code></td>
<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td>cover</td>
<td><code>false</code></td>
<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td>urlname</td>
<td>index</td>
<td>文章访问路径，需要在<code>Hexo</code>根目录下<code>_config.yml</code>文件中使用<code>permalink: :urlname/</code>和<code>permalink_defaults:</code></td>
</tr>
<tr>
<td><code>urlname: index</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>toc</td>
<td><code>true</code></td>
<td>permalink_defaults:是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td><code>false</code></td>
<td>urlname: index 是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td>keywords</td>
<td>文章标题</td>
<td>文章关键字，SEO 时需要</td>
</tr>
<tr>
<td>reprintPolicy</td>
<td>cc_by</td>
<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol>
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li>
<li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>
</ol>
</blockquote>
<p>以下为文章的 <code>Front-matter</code> 示例。</p>
<h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>
<ul>
<li>菜单</li>
<li>我的梦想</li>
<li>首页的音乐播放器和视频播放器配置</li>
<li>是否显示推荐文章名称和按钮配置</li>
<li><code>favicon</code> 和 <code>Logo</code></li>
<li>个人信息</li>
<li>TOC 目录</li>
<li>文章打赏信息</li>
<li>复制文章内容时追加版权信息</li>
<li>MathJax</li>
<li>文章字数统计、阅读时长</li>
<li>点击页面的’爱心’效果</li>
<li>我的项目</li>
<li>我的技能</li>
<li>我的相册</li>
<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>
<li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>
<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>
</ul>
<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>
<h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>
<span class="token punctuation">.</span>bg<span class="token operator">-</span>color <span class="token punctuation">{</span>
    background<span class="token operator">-</span>image<span class="token punctuation">:</span> linear<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">,</span> #0f9d58 <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@<span class="token operator">-</span>webkit<span class="token operator">-</span>keyframes rainbow <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
<span class="token punctuation">}</span>

@keyframes rainbow <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
<span class="token punctuation">}</span></code></pre>
<p>/</p>
<h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>
  <span class="token string">"background-image"</span><span class="token punctuation">,</span>
  <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>
<h3 id="修改文章访问路径-urlname"><a href="#修改文章访问路径-urlname" class="headerlink" title="修改文章访问路径 urlname"></a>修改文章访问路径 urlname</h3><p>在<code>Hexo</code>根目录<code>_config.yaml</code>中添加以下配置</p>
<pre><code># permalink: :year/:month/:day/:title/
permalink: :urlname/
permalink_defaults:
  urlname: index</code></pre><p>##</p>
<h3 id="全站-CDN"><a href="#全站-CDN" class="headerlink" title="全站 CDN"></a>全站 CDN</h3><blockquote>
<p>CDN 的全称是<code>Content Delivery Network</code>，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。——百度百科</p>
</blockquote>
<p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用。</p>
<p>用法：<br><a href="https://cdn.jsdelivr.net/gh/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/</a>你的用户名/你的仓库名@发布的版本号/文件路径</p>
<p>如：<br><a href="http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/" target="_blank" rel="noopener">http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/</a>12.jpg<br>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，如果需要版本，请创建<code>releases</code>然后按照格式添加<br>当然最直接的办法就是使用 <code>username/username.github.io/</code></p>
]]></content>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>7.hexo主题配置</title>
    <url>/leader755/b0c81b21.html</url>
    <content><![CDATA[<h2 id="1-hexo-主题官网"><a href="#1-hexo-主题官网" class="headerlink" title="1.hexo 主题官网"></a>1.hexo 主题官网</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="2-应用以及下载主题"><a href="#2-应用以及下载主题" class="headerlink" title="2.应用以及下载主题"></a>2.应用以及下载主题</h2><p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。（必看）</p>
<h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至<strong>站点目录(**</strong>即根目录下的文件_config.yml 文件*<strong>*)</strong>的  <code>themes</code>  目录下， 然后修改下配置文件即可。next 为主题名</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</span>
$ cd your<span class="token operator">-</span>hexo<span class="token operator">-</span>site
$ git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>iissnan<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>next themes<span class="token operator">/</span>next</code></pre>
<p>###</p>
<h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2.启用主题"></a>2.启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next(主题名)</code>。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588326982972-1828234c-3a21-48e1-ac1e-5b57480ac6f0.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1012&size=24250&status=done&style=none&width=506" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript">theme<span class="token punctuation">:</span> next<span class="token punctuation">;</span></code></pre>
<h4 id="2-1-本文使用的是（hexo-theme-halo）主题"><a href="#2-1-本文使用的是（hexo-theme-halo）主题" class="headerlink" title="2.1 本文使用的是（hexo-theme-halo）主题"></a>2.1 本文使用的是（hexo-theme-halo）主题</h4><p>1&gt;直接下载 git  clone</p>
<pre class=" language-javascript"><code class="language-javascript">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>hongweifuture<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>halo<span class="token punctuation">.</span>git themes<span class="token operator">/</span>halo</code></pre>
<p>2&gt;直接将<code>themes/halo/config/source</code>内所有内容拷贝到<code>Hexo</code>根目录下的<code>source</code>文件夹内替换</p>
<h4 id="2-2-配置切换主题"><a href="#2-2-配置切换主题" class="headerlink" title="2.2 配置切换主题"></a>2.2 配置切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: halo</code><br><code>根目录_config.yml</code> 文件的其它修改建议:</p>
<ul>
<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>[http://xxx.github.io](http://xxx.github.io)</code>）。</li>
<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>
<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>
</ul>
<h3 id="3-验证主题"><a href="#3-验证主题" class="headerlink" title="3.验证主题"></a>3.验证主题</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//最好先清除缓存</span>
hexo clean

<span class="token comment" spellcheck="true">//打包</span>
hexo g

<span class="token comment" spellcheck="true">//启动</span>
hexo s

<span class="token comment" spellcheck="true">//发布到 github</span>
hexo s <span class="token operator">-</span>d</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客提交百度和Google收录</title>
    <url>/leader755/5c84a3bd.html</url>
    <content><![CDATA[<p>一个网站的 SEO 对一个网站非常重要，<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/SEO/102990?fr=aladdin" target="_blank" rel="noopener">SEO</a>指的是搜索引擎优化。通过搜索引擎优化，可以提高网站的网站关键词排名以及博客文章的曝光度。一般来说，我们针对百度和 Google 这两个搜索引擎进行优化，提高对网站资源的索引量，使我们的文章更容易被发现。虽然我的博客的主要读者是我自己，但也不妨碍我做些优化，对吧！接下来向大家展示如何使博客被百度和 Google 收录。</p>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>站点地图即<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin" target="_blank" rel="noopener">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>
<h4 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h4><p>安装百度和 Google 的站点地图生成插件：</p>
<pre><code>npm install hexo-generator-baidu-sitemap --save
npm install hexo-generator-sitemap --save</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>
<pre><code># 自动生成sitemap
sitemap:
  path: sitemap.xml
baidusitemap:
  path: baidusitemap.xml</code></pre><h4 id="生成和部署"><a href="#生成和部署" class="headerlink" title="生成和部署"></a>生成和部署</h4><p>执行生成和部署命令：</p>
<p>此时，进入<code>public</code>目录，你会发现里面有<code>sitemap.xml</code>和<code>baidusitemap.xml</code>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p>
<blockquote>
<ul>
<li>sitemap.xml 用来提交给 Google</li>
<li>baidusitemap.xml 用来提交给百度</li>
</ul>
</blockquote>
<h3 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h3><p>通过百度站长平台进行链接提交，增加网站的索引量。我的这篇文章：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a> 已经提到过 Github 对百度爬虫进行了屏蔽，因此百度爬取不到 Github 上的页面，如果你按照这篇文章同时部署到 Coding 上，那百度就可以抓取到，因为此时百度抓取的是位于 Coding 上的博客网页。</p>
<p>注册并登录百度站长平台：<a href="https://link.jianshu.com/?t=http://zhanzhang.baidu.com/" target="_blank" rel="noopener">百度站长平台</a></p>
<h4 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h4><p>选择添加站点：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-9bca3b38a6c1685d.png#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=982&status=done&style=none&width=982" alt=""></p>
<h4 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h4><p>进行站点验证：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-51233e024040d8d7.png#align=left&display=inline&height=533&margin=%5Bobject%20Object%5D&originHeight=533&originWidth=982&status=done&style=none&width=982" alt=""></p>
<p>这里我们选择<code>文件验证</code>，下载验证文件到本地，放置在<code>themes/next/source</code>目录下。执行生成和部署命令：</p>
<p>点击完成验证即可。</p>
<h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p>
<h5 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h5><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现：</p>
<pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>
<pre><code>baidu_url_submit:
  count: 5 ## 提交最新的五个链接
  host: www.hui-wang.info ## 百度站长平台中注册的域名
  token: your_token ## 准入秘钥
  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其次，记得查看<code>_config.yml</code>文件中 url 的值， 必须包含是百度站长平台注册的域名， 比如:</p>
<pre><code># URL
url: http://fengdi.org
root: /
permalink: :year/:month/:day/:title.xml</code></pre><p>最后，加入新的 deployer:</p>
<pre><code>deploy:
- type: git ## 这是我原来的deployer
  repo:
  branch:
- type: baidu_url_submitter ## 添加这里内容即可</code></pre><p>其主动推送的实现原理如下：</p>
<ul>
<li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li>
<li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li>
</ul>
<h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>安装自动推送 JS 代码的网页，在页面被访问时，页面 URL 将立即被推送给百度。</p>
<p>修改主题目录下的<code>layout/post.swig</code>文件，末尾添加自动推送代码，代码如下：</p>
<pre><code>&lt;script&gt;
(function(){
    var bp = document.createElement(&#39;script&#39;);
    var curProtocol = window.location.protocol.split(&#39;:&#39;)[0];
    if (curProtocol === &#39;https&#39;) {
        bp.src = &#39;https://zz.bdstatic.com/linksubmit/push.js&#39;;
    }
    else {
        bp.src = &#39;http://push.zhanzhang.baidu.com/push.js&#39;;
    }
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(bp, s);
})();
&lt;/script&gt;</code></pre><h5 id="sitemap-提交"><a href="#sitemap-提交" class="headerlink" title="sitemap 提交"></a>sitemap 提交</h5><p>我们之前已经说过如何生成 sitemap 文件，这时就需要我们生成的 sitemap 文件了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-cfb7e4bd12e2deb8.png#align=left&display=inline&height=443&margin=%5Bobject%20Object%5D&originHeight=443&originWidth=981&status=done&style=none&width=981" alt=""></p>
<p>输入以下内容到输入框里：</p>
<pre><code>http://fengdi.org/baidusitemap.xml</code></pre><p>输入验证码后，提交即可。一般情况下，百度会在一个小时内处理该文件，并提取其中的 url。</p>
<h3 id="Google-网站站长"><a href="#Google-网站站长" class="headerlink" title="Google 网站站长"></a>Google 网站站长</h3><p>在提交 Google 之前，要解决一个大家都知道的问题，关于如何登录 Google。这里就不再说了，相信你们有办法。</p>
<h4 id="添加站点-1"><a href="#添加站点-1" class="headerlink" title="添加站点"></a>添加站点</h4><p>登录<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google 网站站长</a>，进入<code>Search Console</code>，点击<code>添加属性</code>进行站点添加：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-9a7ce99e3aaaf1a9.png#align=left&display=inline&height=477&margin=%5Bobject%20Object%5D&originHeight=477&originWidth=1364&status=done&style=none&width=1364" alt=""></p>
<h4 id="验证站点-1"><a href="#验证站点-1" class="headerlink" title="验证站点"></a>验证站点</h4><p>同百度平台一样，下载 Google 验证文件，放到 source 下<code>themes/next/source</code>目录中：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-2a7e8f527d0b1b42.png#align=left&display=inline&height=618&margin=%5Bobject%20Object%5D&originHeight=618&originWidth=1210&status=done&style=none&width=1210" alt=""></p>
<p>重新生成和部署：</p>
<p>部署完成之后，进行验证即可。</p>
<h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><p>在<code>抓取</code>里面，点击<code>站点地图</code>，进行添加：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-7071aa22f10e2c28.png#align=left&display=inline&height=507&margin=%5Bobject%20Object%5D&originHeight=507&originWidth=1353&status=done&style=none&width=1353" alt=""></p>
<p>好了，到这里文章就结束了。如果你之前没有把网站部署到 Coding 上，你的网站百度是爬取不到的，关于如何部署请参阅：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a></p>
<p><a href="https://link.jianshu.com/?t=http://svend.cc/posts/22980/" target="_blank" rel="noopener">Hexo 系列：（四）Hexo 博客提交百度和 Google 收录</a></p>
<p>文文章转载自：<a href="https://www.jianshu.com/p/f8ec422ebd52" target="_blank" rel="noopener">https://www.jianshu.com/p/f8ec422ebd52</a></p>
<p>**</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>百度收录</tag>
        <tag>谷歌收录</tag>
      </tags>
  </entry>
  <entry>
    <title>8.语雀文档同步到 hexo</title>
    <url>/leader755/bad88671.html</url>
    <content><![CDATA[<h2 id="1-去官网注册账号"><a href="#1-去官网注册账号" class="headerlink" title="1.去官网注册账号"></a><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">1</a>.去官网注册账号</h2><p><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">点我去官网</a></p>
<h2 id="2-创建知识库"><a href="#2-创建知识库" class="headerlink" title="2.创建知识库"></a>2.创建知识库</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588478034103-86a7c5cc-71cb-4fd5-ba96-5eee9a2e8a2f.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=726&size=55017&status=done&style=none&width=363" alt="image.png"></p>
<h2 id="3-点击当前知识库的设置"><a href="#3-点击当前知识库的设置" class="headerlink" title="3.点击当前知识库的设置"></a>3.点击当前知识库的设置</h2><p>获取当前知识库的登录名和路径<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588477857012-0a0094c3-e542-429d-bb28-20cd6d29c941.png#align=left&display=inline&height=531&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1062&originWidth=1828&size=124676&status=done&style=none&width=914" alt="image.png"></p>
<h2 id="4-在将语雀文档同步到-hexo"><a href="#4-在将语雀文档同步到-hexo" class="headerlink" title="4.在将语雀文档同步到 hexo"></a>4.在将语雀文档同步到 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先安装 yuque-hexo</span>
npm install yuque<span class="token operator">-</span>hexo <span class="token operator">--</span>save</code></pre>
<h3 id="1-修改-package-json，增加配置"><a href="#1-修改-package-json，增加配置" class="headerlink" title="1) 修改 package.json，增加配置:"></a>1) 修改 package.json，增加配置:</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"yuqueConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"postPath"</span><span class="token punctuation">:</span> <span class="token string">"source/_posts/yuque"</span><span class="token punctuation">,</span>
    <span class="token string">"cachePath"</span><span class="token punctuation">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>
    <span class="token string">"mdNameFormat"</span><span class="token punctuation">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>
    <span class="token string">"adapter"</span><span class="token punctuation">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>
    <span class="token string">"concurrency"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>
    <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"leader755"</span><span class="token punctuation">,</span>
    <span class="token string">"repo"</span><span class="token punctuation">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>
    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"在语雀上申请的 token"</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublished"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublic"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>postPath</td>
<td>文档同步后生成的路径</td>
<td>source/_posts/yuque</td>
</tr>
<tr>
<td>cachePath</td>
<td>文档下载缓存文件</td>
<td>yuque.json</td>
</tr>
<tr>
<td>mdNameFormat</td>
<td>文件名命名方式 (title / slug)</td>
<td>title</td>
</tr>
<tr>
<td>adapter</td>
<td>文档生成格式 (hexo/markdown)</td>
<td>hexo</td>
</tr>
<tr>
<td>concurrency</td>
<td>下载文章并发数</td>
<td>5</td>
</tr>
<tr>
<td>baseUrl</td>
<td>语雀 API 地址</td>
<td>-</td>
</tr>
<tr>
<td>login</td>
<td>语雀 login (group), 也称为个人路径</td>
<td>-</td>
</tr>
<tr>
<td>repo</td>
<td>语雀仓库短名称，也称为语雀知识库路径</td>
<td>-</td>
</tr>
<tr>
<td>onlyPublished</td>
<td>只展示已经发布的文章</td>
<td>false</td>
</tr>
<tr>
<td>onlyPublic</td>
<td>只展示公开文章</td>
<td>false</td>
</tr>
</tbody></table>
<blockquote>
<p>slug 是语雀的永久链接名，一般是几个随机字母。</p>
</blockquote>
<h3 id="2-在-package-json-添加-scripts"><a href="#2-在-package-json-添加-scripts" class="headerlink" title="2)在 package.json 添加 scripts"></a>2)在 package.json 添加 scripts</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//添加以下命令行</span>
<span class="token punctuation">{</span>
  <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>
  <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>
<span class="token punctuation">}</span></code></pre>
<p>目前为止 scripts 命令行为</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>
    <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>
    <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<h3 id="3）关于在语雀上申请-token"><a href="#3）关于在语雀上申请-token" class="headerlink" title="3）关于在语雀上申请 token"></a>3）关于在语雀上申请 token</h3><p>点击账户个人–&gt;设置 –&gt;Token–&gt;新建 token</p>
<h2 id="5-同步语雀文档到本地-hexo"><a href="#5-同步语雀文档到本地-hexo" class="headerlink" title="5.同步语雀文档到本地 hexo"></a>5.同步语雀文档到本地 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步文档</span>
yuque<span class="token operator">-</span>hexo sync

<span class="token comment" spellcheck="true">//清除本地缓存</span>
yuque<span class="token operator">-</span>hexo clean</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>yuque</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+ 又拍云创建个人图床工具</title>
    <url>/leader755/765d527f.html</url>
    <content><![CDATA[<h2 id="1-首先注册又拍云账号"><a href="#1-首先注册又拍云账号" class="headerlink" title="1.首先注册又拍云账号"></a>1.首先注册又拍云账号</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039006495-6efd0c2e-cd03-40da-a7ab-1fd92ba5e92a.png#align=left&display=inline&height=686&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1372&originWidth=2560&size=163057&status=done&style=none&width=1280" alt="image.png"></p>
<h2 id="2-创建服务"><a href="#2-创建服务" class="headerlink" title="2.创建服务"></a>2.创建服务</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039347598-96d59ff1-aa83-45c2-bf56-2165d3dc572a.png#align=left&display=inline&height=689&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1378&originWidth=2560&size=226216&status=done&style=none&width=1280" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039428519-cb3f789e-02c0-43c4-8ff3-30ca00b15b8a.png#align=left&display=inline&height=378&margin=%5Bobject%20Object%5D&name=image.png&originHeight=756&originWidth=2400&size=87492&status=done&style=none&width=1200" alt="image.png"></p>
<h2 id="3-审核完成后（域名需要备案，10-分钟以内审核完毕）"><a href="#3-审核完成后（域名需要备案，10-分钟以内审核完毕）" class="headerlink" title="3.审核完成后（域名需要备案，10 分钟以内审核完毕）"></a>3.审核完成后（域名需要备案，10 分钟以内审核完毕）</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595048966006-4c8f16b1-01ba-40f7-9e08-4fff73dd4a8c.png#align=left&display=inline&height=688&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1376&originWidth=2552&size=156189&status=done&style=none&width=1276" alt="image.png"></p>
<h2 id="4-点击账户管理，添加操作员"><a href="#4-点击账户管理，添加操作员" class="headerlink" title="4.点击账户管理，添加操作员"></a>4.点击账户管理，添加操作员</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595048861058-8644fd49-a611-4466-8248-61fb8a8dc573.png#align=left&display=inline&height=681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1362&originWidth=2558&size=215488&status=done&style=none&width=1279" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595049324214-9ee14c50-a4a5-4594-a587-5c53ec5394c3.png#align=left&display=inline&height=573&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1146&originWidth=1192&size=153530&status=done&style=none&width=596" alt="image.png"></p>
<h2 id="5-PicGo-的设置"><a href="#5-PicGo-的设置" class="headerlink" title="5.PicGo 的设置"></a>5.PicGo 的设置</h2><ul>
<li><strong>存储空间和存储员都是自己配置好的，操作密码也是复制好的。</strong></li>
<li><strong>注意的是加速域名最好加上<code>http/https</code>，不然会无法在 PicGo 预览</strong></li>
<li><strong>指定存储路径可填可不填</strong></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595049428328-c5fc08be-d0ed-4560-9965-2cd128d347e1.png#align=left&display=inline&height=562&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1124&originWidth=1824&size=421187&status=done&style=none&width=912" alt="image.png"></p>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>又拍云</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+GitHub 搭建个人图床工具</title>
    <url>/leader755/21250214.html</url>
    <content><![CDATA[<blockquote>
<p>方便程度：★★★★☆<br>配置难度：★★☆☆☆<br>适用环境：win + mac + linux<br>需要工具：GitHub 账号 + PicGo 客户端<br>稳定性：背靠 GitHub 和微软，比自建服务器都稳<br>隐私性：这算是唯一缺点，你的图片别人可以访问。</p>
</blockquote>
<p>###</p>
<h3 id="1-PicGo-介绍"><a href="#1-PicGo-介绍" class="headerlink" title="1. PicGo 介绍"></a>1. PicGo 介绍</h3><p>这是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub 等图床，未来将支持更多图床。</p>
<p>所以解决问题的思路就是，将本地的文件，或者剪切板上面的截图发送图床，然后生成在线图片的链接</p>
<h3 id="2-下载并安装-PicGo"><a href="#2-下载并安装-PicGo" class="headerlink" title="2.下载并安装 PicGo"></a>2.下载并安装 PicGo</h3><h4 id="1-进入下载页面"><a href="#1-进入下载页面" class="headerlink" title="1.进入下载页面"></a>1.进入下载页面</h4><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p>
<h4 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h4><p>选择最新版本就行了，我下载时最新版是 2.1.2<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528164711.jpg" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528164711.jpg#align=left&display=inline&height=591&margin=%5Bobject%20Object%5D&originHeight=591&originWidth=1066&status=done&style=none&width=1066" alt="">
</a></p>
<h4 id="3-安装-PicGo"><a href="#3-安装-PicGo" class="headerlink" title="3.安装 PicGo"></a>3.安装 PicGo</h4><p>双击下载的安装包，一路默认就行，如果 360 报错，就允许执行，安装完成后，打开软件如下图所示：<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165026.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165026.png#align=left&display=inline&height=412&margin=%5Bobject%20Object%5D&originHeight=412&originWidth=787&status=done&style=none&width=787" alt="">
</a></p>
<h3 id="3-创建-GitHub-图床"><a href="#3-创建-GitHub-图床" class="headerlink" title="3.创建 GitHub 图床"></a>3.创建 GitHub 图床</h3><h4 id="1-需要注册-登陆-GitHub-账号"><a href="#1-需要注册-登陆-GitHub-账号" class="headerlink" title="1.需要注册/登陆 GitHub 账号"></a>1.需要注册/登陆 GitHub 账号</h4><p>这个自行注册，不会的百度谷歌下</p>
<h4 id="2-创建-Repository"><a href="#2-创建-Repository" class="headerlink" title="2.创建 Repository"></a>2.创建 Repository</h4><p>随便命名，我的比较简单，直接是 img</p>
<h4 id="3-创建-token-并复制保存"><a href="#3-创建-token-并复制保存" class="headerlink" title="3.创建 token 并复制保存"></a>3.创建 token 并复制保存</h4><p>生成一个 Token 用于操作 GitHub repository<br><strong>Settings -&gt; Developer settings -&gt; Personal access tokens</strong></p>
<p>1.点击右上角头像，settings，进入设置<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170352.png" target="_blank" rel="noopener">
</a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1577937560770-a488dbd7-809f-4a83-9e61-fa65bc1d4b54.png#align=left&display=inline&height=540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=2184&size=234699&status=done&style=none&width=1092" alt="image.png"></p>
<p>2.在页面最下找到 Developer settings，点击进入<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170636.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170636.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1310&status=done&style=none&width=1310" alt="">
</a></p>
<p>3.点击 Generate new token<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170920.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170920.png#align=left&display=inline&height=668&margin=%5Bobject%20Object%5D&originHeight=668&originWidth=1260&status=done&style=none&width=1260" alt="">
</a></p>
<p>4.Note 随便填，勾选复选框 repo ，接着到页面底部 Generate token 就完成了<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171107.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171107.png#align=left&display=inline&height=783&margin=%5Bobject%20Object%5D&originHeight=783&originWidth=1266&status=done&style=none&width=1266" alt="">
</a></p>
<p>5.然后会生成一串字符 token，这个 token 只出现一次，所以要复制保存一下<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171329.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171329.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=1069&status=done&style=none&width=1069" alt="">
</a></p>
<h3 id="4-配置-PicGo-客户端"><a href="#4-配置-PicGo-客户端" class="headerlink" title="4.配置 PicGo 客户端"></a>4.配置 PicGo 客户端</h3><p>如下图配置：<a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165451.jpg" target="_blank" rel="noopener">
</a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1577937641444-583cf8c1-ddd3-400b-aa6b-addaf3ecb388.png#align=left&display=inline&height=449&margin=%5Bobject%20Object%5D&name=image.png&originHeight=898&originWidth=1606&size=1014465&status=done&style=none&width=803" alt="image.png"></p>
<p>说明：</p>
<ul>
<li>仓库名 即你的仓库名</li>
<li>分支名 默认 master</li>
<li>Token 就是刚刚复制的那一串字符</li>
<li>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 picgo 这个文件夹</li>
<li>域名:<a href="https://raw.githubusercontent.com/Leader755/github_PicGo/master" target="_blank" rel="noopener">https://raw.githubusercontent.com/Leader755/github_PicGo/master</a> 这个要改一下，改成你自己的，格式：<a href="https://raw.githubusercontent.com/[用户名]/[仓库名]/master" target="_blank" rel="noopener">https://raw.githubusercontent.com/[用户名]/[仓库名]/master</a></li>
</ul>
<p>然后点击确定，在点击设为默认图床，就 OK 了。</p>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat下部署vue项目[history模式]</title>
    <url>/leader755/fc9c260f.html</url>
    <content><![CDATA[<h2 id="1-项目发布后通常有两种访问方式，"><a href="#1-项目发布后通常有两种访问方式，" class="headerlink" title="1.项目发布后通常有两种访问方式，"></a>1.项目发布后通常有两种访问方式，</h2><p>第一种： IP+端口直接访问的方式，如 <a href="http://192.168.4.160:6090/" target="_blank" rel="noopener">http://192.168.1.107:8080/</a><br>第二种：IP+端口+项目名，如 <a href="https://links.jianshu.com/go?to=http%3A%2F%2F192.168.4.160%3A6090%2Fhuangshi%2F" target="_blank" rel="noopener">http://192.168.1.107:8080/saas/</a></p>
<h2 id="2-第一种方式：ip-端口（前端后端修改）"><a href="#2-第一种方式：ip-端口（前端后端修改）" class="headerlink" title="2.第一种方式：ip+端口（前端后端修改）"></a>2.第一种方式：ip+端口（前端后端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p>
<p>步骤：</p>
<h3 id="1-修改配置文件-router-js"><a href="#1-修改配置文件-router-js" class="headerlink" title="1.修改配置文件 router.js"></a>1.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将mode值改为history</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
      name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>
      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一"><a href="#2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一" class="headerlink" title="2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)"></a>2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)</h3><p>（此种方式需要删除 ROOT 文件夹下的全部内容，将打包的文件放进去，无需修改配置文件）<br><strong>找到 tomcat 目录，将 tomcat-&gt;ROOT 文件夹中文件全部删除，将打包好的 dist 文件夹中的文件全部放到 ROOT 文件夹中。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579239963286-48f67f71-308e-49dc-9953-8cc2cc1be528.png#align=left&display=inline&height=166&margin=%5Bobject%20Object%5D&name=image.png&originHeight=331&originWidth=1486&size=32467&status=done&style=none&width=743" alt="image.png"></p>
<h3 id="2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一"><a href="#2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一" class="headerlink" title="2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)"></a>2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)</h3><p>(此种方式无需删除 ROOT 文件夹中的内容，只需修改 serve.xml 中的配置)<br><strong>找到 tomcat 目录，修改 tomcat-&gt;conf/server.xml，增加 Context 节点。设置 docBase=”/saas” 。其中的 saas 就是 webapps 目录下的项目名称（文件夹名）</strong><br>**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579153518666-35db848d-44c8-411f-a40d-02dc81ae9ae8.png#align=left&display=inline&height=696&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200116134505.png&originHeight=696&originWidth=1277&size=80321&status=done&style=none&width=1277" alt="微信图片_20200116134505.png"></p>
<h2 id="3-第二种方式：ip-端口-项目名（前端修改）"><a href="#3-第二种方式：ip-端口-项目名（前端修改）" class="headerlink" title="3.第二种方式：ip+端口+项目名（前端修改）"></a>3.第二种方式：ip+端口+项目名（前端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p>
<p>步骤：</p>
<h3 id="1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件："><a href="#1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件：" class="headerlink" title="1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件："></a>1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件：</h3><p>因为是 history 模式, 要防止在路由下刷新变成 404 错误，这需要让 tomcat 都定位到首页，也就是 index.html 页，以往我们使用 Java 写 web 项目部署在 tomcat 时，通常都会有一个 WEB-INF 文件夹，并包含一个 web.xml 文件，而 vue 项目 build 之后只是纯静态资源项目，所以我们需要在 build 之后的 dist 文件夹里新增一个 WEB-INF 文件夹，并新建 web.xml 文件。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579014872343-c8253ec9-d3d5-4b53-bda6-3983472244ae.png#align=left&display=inline&height=421&margin=%5Bobject%20Object%5D&name=image.png&originHeight=842&originWidth=482&size=57023&status=done&style=none&width=241" alt="image.png"></p>
<p><strong>在项目目录下新建**</strong><code>WEB-INF</code>*<strong>*文件夹， 接着在**</strong><code>WEB-INF</code>*<strong>*文件夹下新建 **</strong><code>web.xml</code>*<strong>*文件，内容如下：</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0' encoding='UTF-8'?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scplatform<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2-修改配置文件-router-js"><a href="#2-修改配置文件-router-js" class="headerlink" title="2.修改配置文件 router.js"></a>2.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启history模式需要后端配置404时返回/index.html</span>
  base<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当项目不在根目录时，必须添加子目录路径，否则空白页面</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// '/saas/home'</span>
      name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>
      component<span class="token punctuation">:</span> home<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-修改-config-文件夹下的-index-js-中配置"><a href="#3-修改-config-文件夹下的-index-js-中配置" class="headerlink" title="3.修改 config 文件夹下的 index.js 中配置"></a>3.修改 config 文件夹下的 index.js 中配置</h3><pre class=" language-javascript"><code class="language-javascript">build<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Template for index.html</span>
    index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment" spellcheck="true">// Paths</span>
    assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//构建输出目录,也就是构建后的东西都扔这里</span>
    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//源子目录 除了index.html，其余的js img css都分在这里</span>

    <span class="token comment" spellcheck="true">/**添加开始**/</span>
    <span class="token comment" spellcheck="true">//tomcat webapps/sass/</span>
    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//需要加上这一行项目目录,一个 / 表示根目录</span>
        <span class="token comment" spellcheck="true">/**添加结束**/</span>
  <span class="token punctuation">}</span></code></pre>
<h3 id="4-webpack-设置不打包文件WEB-INF"><a href="#4-webpack-设置不打包文件WEB-INF" class="headerlink" title="4.webpack 设置不打包文件WEB-INF"></a>4.webpack 设置不打包文件<code>WEB-INF</code></h3><p>到此处已经可以成功配置一个 tomcat 服务下的 vue 的 history 模式的项目，但是不能每次打包去手动<strong>添加和更改新建<code>WEB-INF</code>文件夹</strong>吧，遇到过设置不打包文件 WEB-INF 文件时的配置未生效，导致 WEB-INF 下的 web.xml 文件被打包成 js 文件，导致当前路由刷新报 404 错误。<br>(这个错误找了 好久，以为配置好了，就 Ok 了，由于代码同步问题，没注意可能就发生问题，所以上传服务器前一定要记得检查下<strong><code>WEB-INF</code>文件夹是否存在 web.xml 文件</strong>)</p>
<p><strong>修改 webpack.prod.conf.js 配置</strong></p>
<pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token comment" spellcheck="true">// copy custom static assets</span>
  <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      to<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">,</span>
      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/**添加开始**/</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不打包直接输出的文件</span>
      to<span class="token punctuation">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后静态文件放置位置</span>
      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 忽略规则。（这种写法表示将该文件夹下的所有文件都复制）</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/**添加结束**/</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>关于此处的的设置不打包问题可以自行搜索，关键词：<strong>webpack 设置不打包文件</strong><br>**<br>**</p>
<h3 id="5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式"><a href="#5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式" class="headerlink" title="5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式"></a>5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式</h3><p>项目最终目录如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579015282523-603258d7-6c26-49bd-8f0c-cb6453d65a11.png#align=left&display=inline&height=464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=928&originWidth=504&size=64927&status=done&style=none&width=252" alt="image.png"></p>
<h3 id="6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容："><a href="#6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容：" class="headerlink" title="6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容："></a>6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容：</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  publicPath<span class="token punctuation">:</span> <span class="token string">"/saas"</span><span class="token punctuation">,</span>
  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      hints<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2 id="4-结语"><a href="#4-结语" class="headerlink" title="4.结语"></a>4.结语</h2><p>终于完成了，也是踩了不少坑和加上一些搜索，感觉目前给的文档都不太详细，所以自己写了一篇关于 tomcat 下的 vue 的 history 模式，希望能帮到大家，欢迎大家一起交流。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>history</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用的问题指南</title>
    <url>/leader755/db56f43f.html</url>
    <content><![CDATA[<h3 id="1-hexo-g-d-会报错"><a href="#1-hexo-g-d-会报错" class="headerlink" title="1.hexo g -d 会报错"></a>1.hexo g -d 会报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588475689582-0959dce9-cdf9-4e4f-937b-175fcab6f7ce.png#align=left&display=inline&height=127&margin=%5Bobject%20Object%5D&name=image.png&originHeight=254&originWidth=1160&size=179534&status=done&style=none&width=580" alt="image.png"><br>win 本地仓库：将 https 改为 ssh</p>
<pre class=" language-javascript"><code class="language-javascript">deploy：
   type：git
   repo：git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git
   branch：master</code></pre>
<p>mac:</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>问题指南</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的生成永久标题链接</title>
    <url>/leader755/4976fe22.html</url>
    <content><![CDATA[<h2 id="1-hexo-博客默认链接规则："><a href="#1-hexo-博客默认链接规则：" class="headerlink" title="1.hexo 博客默认链接规则："></a>1.hexo 博客默认链接规则：</h2><p><strong>hexo 生成的标题默认规则（年、月、日、标题）：:year/:month/:day/:title。复制后的链接是一长串，非常不利于阅读，也不简洁。</strong></p>
<h2 id="2-解决方案："><a href="#2-解决方案：" class="headerlink" title="2.解决方案："></a>2.解决方案：</h2><h3 id="1-使用hexo-permalink-pinyin"><a href="#1-使用hexo-permalink-pinyin" class="headerlink" title="1.使用hexo-permalink-pinyin"></a>1.使用<a href="">hexo-permalink-pinyin</a></h3><p>将中文转英文，这样方案也存在一定的缺陷，比如修改了文章标题，重新 hexo 三连后，URL 就变了，以前的文章地址变成了 404。而且这样生成的 URL 层级也很深，不利于 SEO。</p>
<h4 id="1-gt-安装-hexo-permalink-pinyin"><a href="#1-gt-安装-hexo-permalink-pinyin" class="headerlink" title="1&gt;安装 hexo-permalink-pinyin"></a>1&gt;安装 hexo-permalink-pinyin</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>
permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>             # Enable <span class="token keyword">this</span> plugin
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span>           # Separator <span class="token keyword">of</span> the slug<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>
  exclude<span class="token punctuation">:</span> <span class="token operator">/</span>ignore_post<span class="token operator">/</span>   # Regex <span class="token keyword">for</span> which post should skip</code></pre>
<p>###</p>
<h3 id="2-使用hexo-abbrlink"><a href="#2-使用hexo-abbrlink" class="headerlink" title="2.使用hexo-abbrlink"></a>2.使用<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></h3><p>生成唯一不变的 URl 链接，链接可以调整自己想要的。弊端</p>
<h4 id="1-gt-安装-hexo-abbrlink"><a href="#1-gt-安装-hexo-abbrlink" class="headerlink" title="1&gt;安装 hexo-abbrlink"></a>1&gt;安装 hexo-abbrlink</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<p>####</p>
<h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink<span class="token punctuation">:</span> post<span class="token operator">/</span><span class="token punctuation">:</span>abbrlink<span class="token punctuation">.</span>html  # 文章的永久链接格式<span class="token punctuation">,</span>post可以自定义
abbrlink<span class="token punctuation">:</span>
  alg<span class="token punctuation">:</span> crc32  # 算法： <span class="token function">crc16</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and crc32
  rep<span class="token punctuation">:</span> hex    # 进制： <span class="token function">dec</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and hex</code></pre>
<p>生成后的博客链接如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588694804547-5dbe637d-46af-4bfc-9b3d-4d5228b573a6.png#align=left&display=inline&height=37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=74&originWidth=908&size=11417&status=done&style=none&width=454" alt="image.png"></p>
<p>如果觉得对你有帮助，点个赞呗。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>永久标签</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的评论功能</title>
    <url>/leader755/c41d01b3.html</url>
    <content><![CDATA[<h2 id="1-这里推荐的评论功能插件为valine"><a href="#1-这里推荐的评论功能插件为valine" class="headerlink" title="1.这里推荐的评论功能插件为valine"></a>1.这里推荐的评论功能插件为<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a></h2><p>官网：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a><br>注册登录网站：<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a><br>      需要实名注册登记，可以使用支付宝来实名认证，很快的，秒过。</p>
<h2 id="2-去leancloud注册"><a href="#2-去leancloud注册" class="headerlink" title="2.去leancloud注册"></a>2.去<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>注册</h2><p>注册完成后去创建应用，选择开发版就可以了。（需要实名登记才能创建应用）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779620815-f8a3fc6e-f667-4959-9cb2-53b5777427c7.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1232&size=83220&status=done&style=none&width=616" alt="image.png"></p>
<h2 id="3-获取-appkey-和-appid"><a href="#3-获取-appkey-和-appid" class="headerlink" title="3.获取 appkey 和 appid"></a>3.获取 appkey 和 appid</h2><p>创建完成应用后，<strong>进入应用-&gt;设置-&gt;应用 key，找到相应的 appkey 和 appid。</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779969891-d05a06f8-bcf5-4b7e-84cb-bcedabc8f762.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=2394&size=185376&status=done&style=none&width=746" alt="image.png"></strong></p>
<h2 id="4-配置主题文件-config-yml"><a href="#4-配置主题文件-config-yml" class="headerlink" title="4.配置主题文件_config.yml"></a>4.配置主题文件_config.yml</h2><p><strong>搜索 valine，一般可看到如下，将 enbled:true, 并填写 appid 和 appkey(从 leancloud 中获取的 appid 和 appkey)。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"># The configuration <span class="token keyword">of</span> the Valine comment module is not activated by <span class="token keyword">default</span><span class="token punctuation">.</span>
# To use it<span class="token punctuation">,</span> activate the configuration item and <span class="token keyword">set</span> appId and appKey<span class="token punctuation">.</span>
# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey<span class="token punctuation">.</span>
valine<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  appId<span class="token punctuation">:</span>
  appKey<span class="token punctuation">:</span>
  notify<span class="token punctuation">:</span> <span class="token boolean">false</span>
  verify<span class="token punctuation">:</span> <span class="token boolean">false</span>
  visitor<span class="token punctuation">:</span> <span class="token boolean">true</span>
  avatar<span class="token punctuation">:</span> <span class="token string">'mp'</span> # Gravatar style <span class="token punctuation">:</span> mp<span class="token operator">/</span>identicon<span class="token operator">/</span>monsterid<span class="token operator">/</span>wavatar<span class="token operator">/</span>retro<span class="token operator">/</span>hide
  pageSize<span class="token punctuation">:</span> <span class="token number">10</span>
  placeholder<span class="token punctuation">:</span> <span class="token string">'just go go'</span> # Comment Box placeholder
  background<span class="token punctuation">:</span> <span class="token operator">/</span>medias<span class="token operator">/</span>comment_bg<span class="token punctuation">.</span>png</code></pre>
<h2 id="5-配置域名"><a href="#5-配置域名" class="headerlink" title="5.配置域名"></a>5.配置域名</h2><p>在 Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去.</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588780306061-73286643-1359-4efe-b2a1-5545f880dd4a.png#align=left&display=inline&height=500&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1804&size=166396&status=done&style=none&width=902" alt="image.png"></p>
<h2 id="6-重启你的博客"><a href="#6-重启你的博客" class="headerlink" title="6.重启你的博客"></a>6.重启你的博客</h2><p>大功告成！！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>valine</tag>
        <tag>leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客站内搜索功能</title>
    <url>/leader755/4e860a66.html</url>
    <content><![CDATA[<h2 id="1-根目录安装插件-hexo-generator-searchdb"><a href="#1-根目录安装插件-hexo-generator-searchdb" class="headerlink" title="1.根目录安装插件 hexo-generator-searchdb"></a>1.根目录安装插件 hexo-generator-searchdb</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>searchdb <span class="token operator">--</span>save</code></pre>
<h2 id="2-配置根目录文件-config-yml"><a href="#2-配置根目录文件-config-yml" class="headerlink" title="2.配置根目录文件_config.yml"></a>2.配置根目录文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
field<span class="token punctuation">:</span> post<span class="token punctuation">;</span>
format<span class="token punctuation">:</span> html<span class="token punctuation">;</span>
limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">;</span></code></pre>
<p>##</p>
<h2 id="3-配置主题文件-config-yml"><a href="#3-配置主题文件-config-yml" class="headerlink" title="3.配置主题文件_config.yml"></a>3.配置主题文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">local_search<span class="token punctuation">:</span> enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre>
<h2 id="4-完成效果图示"><a href="#4-完成效果图示" class="headerlink" title="4.完成效果图示"></a>4.完成效果图示</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588695774509-2476d128-a52b-4d6b-8e64-7269b5c7389b.png#align=left&display=inline&height=568&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1136&originWidth=2180&size=310201&status=done&style=none&width=1090" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 使用 homebrew</title>
    <url>/leader755/c6cbe756.html</url>
    <content><![CDATA[<p>使用 brew update 指令</p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>Error: The following directories are not writable by your user:<br>/usr/local/sbin<br>/usr/local/share/man/man5<br>/usr/local/share/man/man7</p>
<p>解决办法：</p>
<pre class=" language-javascript"><code class="language-javascript">sudo chown <span class="token operator">-</span>R <span class="token function">$</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token operator">*</span></code></pre>
<p>重新调用即可：</p>
<pre><code>brew update</code></pre>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>serverless 和 hexo快速搭建静态博客</title>
    <url>/leader755/e209121b.html</url>
    <content><![CDATA[<p>##</p>
<h2 id="1-首先搭建一个用-hexo-快速搭建一个博客"><a href="#1-首先搭建一个用-hexo-快速搭建一个博客" class="headerlink" title="1.首先搭建一个用 hexo 快速搭建一个博客"></a>1.首先搭建一个用 hexo 快速搭建一个博客</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装脚手架 hexo-cli</span>
npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g

<span class="token comment" spellcheck="true">//初始化一个 blog</span>
hexo init blog

<span class="token comment" spellcheck="true">//访问本地博客(默认地址为：localhost:4000)</span>
cd blog
hexo s</code></pre>
<h2 id="2-serverless-文档（推荐）"><a href="#2-serverless-文档（推荐）" class="headerlink" title="2.serverless 文档（推荐）"></a>2.serverless 文档（推荐）</h2><p>github 官方中文文档：<a href="https://github.com/serverless/serverless/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/serverless/serverless/blob/master/README_CN.md</a><br>serverless 中文博客： <a href="https://serverlesscloud.cn/" target="_blank" rel="noopener">https://serverlesscloud.cn/</a></p>
<h2 id="3-使用-npm-安装"><a href="#3-使用-npm-安装" class="headerlink" title="3.使用 npm 安装"></a>3.使用 npm 安装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装 serverless</span>
npm install <span class="token operator">-</span>g serverless</code></pre>
<h2 id="4-在-blog-的根目录创建一个-serverless-yml-文件"><a href="#4-在-blog-的根目录创建一个-serverless-yml-文件" class="headerlink" title="4.在 blog 的根目录创建一个 serverless.yml 文件"></a>4.在 blog 的根目录创建一个 serverless.yml 文件</h2><p>复制以下文件内容：唯一注意的地方就是 src 的路径：根据实际更改（即为博客的 index.html 网页）</p>
<pre class=" language-javascript"><code class="language-javascript">myWebsite<span class="token punctuation">:</span>
  component<span class="token punctuation">:</span> <span class="token string">'@serverless/tencent-website'</span>
  inputs<span class="token punctuation">:</span>
    code<span class="token punctuation">:</span>
      src<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>
      index<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html
      error<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html
    region<span class="token punctuation">:</span> ap<span class="token operator">-</span>guangzhou
    bucketName<span class="token punctuation">:</span> my<span class="token operator">-</span>bucket</code></pre>
<h2 id="5-将静态博客发布到-tencent-serverless"><a href="#5-将静态博客发布到-tencent-serverless" class="headerlink" title="5.将静态博客发布到 tencent-serverless"></a>5.将静态博客发布到 tencent-serverless</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//首先将 hexo 中博客打包</span>
heox g

<span class="token comment" spellcheck="true">//将本地的博客部署到 serverless</span>
serverless<span class="token operator">/</span>sls <span class="token operator">--</span>debug</code></pre>
<h2 id="6-稍等片刻可以在-命令行工具看到以下"><a href="#6-稍等片刻可以在-命令行工具看到以下" class="headerlink" title="6.稍等片刻可以在 命令行工具看到以下"></a>6.稍等片刻可以在 命令行工具看到以下</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607113775-6a30d4dc-3c70-4506-9f5b-7af5a07b4e05.png#align=left&display=inline&height=567&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1134&originWidth=1298&size=453581&status=done&style=none&width=649" alt="image.png"><br>此时需要的操作就是用手机微信去扫描（此处会检测是否有腾讯云账号，没有会提示注册，有会直接成功）并返回以下内容：此处就是部署成功，并返回地址，可以直接访问。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607252405-a0fad8a2-f2d5-49ef-8101-09a10eec3916.png#align=left&display=inline&height=264&margin=%5Bobject%20Object%5D&name=image.png&originHeight=528&originWidth=1274&size=364624&status=done&style=none&width=637" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>travis-ci + github + hexo 持续集成</title>
    <url>/leader755/57697582.html</url>
    <content><![CDATA[<h2 id="Hexo-博客源代码-GitHub-托管"><a href="#Hexo-博客源代码-GitHub-托管" class="headerlink" title="Hexo 博客源代码 GitHub 托管"></a>Hexo 博客源代码 GitHub 托管</h2><h2 id="1-注册-travis-ci"><a href="#1-注册-travis-ci" class="headerlink" title="1.注册 travis-ci"></a>1.注册 travis-ci</h2><p>Travis CI 的网站有两个，<br><code>travis-ci.org</code>  专门针对开源项目，GitHub 上所有的公开仓库都能够免费使用；<br><code>travis-ci.com</code>  针对私有及商业项目，新用户前 100 次构建是免费的，后面就要收费了。</p>
<h2 id="2-登录-Travis-CI-网站"><a href="#2-登录-Travis-CI-网站" class="headerlink" title="2.登录 Travis CI 网站"></a>2.登录 Travis CI 网站</h2><ol>
<li>前往 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis-ci.com</a> and Sign up with GitHub.</li>
<li>接受授权</li>
<li>选择你想要使用 Travis CI 的仓库 或者 你也可以在 Github-settings-Applications-TravisCI-Configure 中去更新配置；</li>
<li>在你仓库怎增加 <code>.travis.yml</code> 文件，这个文件定义了构建的步骤，例如<a href="https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-installation-phase" target="_blank" rel="noopener">安装依赖</a>等等。</li>
<li>将 <code>.travis.yml</code> 文件推送到你的远端仓库，然后就会触发 Travis CI 构建；</li>
<li>登录 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>然后选择你的仓库查看构建任务的执行详情；</li>
</ol>
<h2 id="3-配置-Travis-CI"><a href="#3-配置-Travis-CI" class="headerlink" title="3.配置 Travis CI"></a>3.配置 Travis CI</h2><h4 id="1-gt-网页端配置"><a href="#1-gt-网页端配置" class="headerlink" title="1&gt;网页端配置"></a>1&gt;网页端配置</h4><p>首先进入 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI 官网</a>，这里我们使用的是免费版的，因为考虑到一般放在 GitHub 上的博客都是公开的，所以不需要付费版本。如果有私有仓库要使用这种方式，可以使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">付费版的 Travis CI</a>。然后直接通过 GitHub 账户登陆即可，登陆后可以看到我们的共有仓库，找到博客的仓库，我这里是选择 blog-master 源码仓库（博客仓库：leader755.github.io），把旁边的勾勾上，然后点击旁边的 <code>Settings</code> 进入设置页面。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728277292-624821ea-7b95-4db8-89fe-22ece79e75db.png#align=left&display=inline&height=457&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1686&size=85154&status=done&style=none&width=843" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728301454-068409c1-f596-4e35-aa3a-d9d2d3c5b39c.png#align=left&display=inline&height=527&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1054&originWidth=1752&size=108378&status=done&style=none&width=876" alt="image.png"></p>
<p>在设置页面中，General 中只勾选 <code>Build pushed branches</code>，表示当有新的代码 push 到 GitHub 仓库时，自动执行构建任务。其他设置保持默认即可。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728534111-16bc9014-0036-44ef-8036-8117eb15dffd.png#align=left&display=inline&height=532&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1064&originWidth=1910&size=135305&status=done&style=none&width=955" alt="image.png"></p>
<p>接下来为 Travis 添加对 GitHub 仓库的读写权限。进入 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a> 页面，点击 <code>Generate new token</code>，选择 token 权限(这里直选 repo 即可)，设置别名并生成。然后将生成的 token 值复制。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728617792-342093c6-0176-4ece-90e0-f1395c93d7cf.png#align=left&display=inline&height=645&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1290&originWidth=2304&size=230289&status=done&style=none&width=1152" alt="image.png"><br>接着在原来 Travis 的设置界面添加 token。如图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728826735-1b3d72da-2248-4837-9c46-4b6ce410bfdf.png#align=left&display=inline&height=324&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=2006&size=113373&status=done&style=none&width=1003" alt="image.png"><br>在 Name 中填入 token 的别名，Value 中填入刚刚得到的 token，然后点击 Add 进行添加即可。注意 token 一旦生成，只能在生成时得到其值，后面无法查看。所以如果还有需要，可以记下来或者重新生成新的 token。</p>
<h4 id="2-gt-Travis-配置文件"><a href="#2-gt-Travis-配置文件" class="headerlink" title="2&gt;Travis 配置文件"></a>2&gt;Travis 配置文件</h4><p>接下来还需要编写 Travis 的配置文件，用于指定构建时使用哪些命令。配置文件名为 <code>.travis.yml</code>，是自动化构建的配置文件。文件内容示例如下：</p>
<pre class=" language-javascript"><code class="language-javascript"># 指定构建环境是Node<span class="token punctuation">.</span>js，当前版本是稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span><span class="token punctuation">,</span>版本这里我们选择最新的长期支持版本（ LTS） 应该就够用了
anguage<span class="token punctuation">:</span> node_js
node_js<span class="token punctuation">:</span>
  <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span>  # 稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span> <span class="token punctuation">,</span>最新长期支持版（ <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span> ）

# 指定缓存模块，可加快编译速度
cache<span class="token punctuation">:</span>
  directories<span class="token punctuation">:</span>
    <span class="token operator">-</span> node_modules

# 在构建之前
before_install<span class="token punctuation">:</span>
  <span class="token operator">-</span> <span class="token keyword">export</span> TZ<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> # 更改时区
  <span class="token operator">-</span> npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli # 安装hexo环境

#<span class="token function">部署环境的安装</span><span class="token punctuation">(</span>安装一个部署插件<span class="token punctuation">)</span>
install<span class="token punctuation">:</span>
  <span class="token operator">-</span> npm install
  <span class="token operator">-</span> npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save

before_script<span class="token punctuation">:</span>
 #

# 执行清缓存，生成网页操作
script<span class="token punctuation">:</span>
  <span class="token operator">-</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo g

after_script<span class="token punctuation">:</span>  # 未能成功
  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>
  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span>
   # 替换同目录下的_config<span class="token punctuation">.</span>yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！
  <span class="token operator">-</span> sed <span class="token operator">-</span>i <span class="token string">"s/gh_token/${GH_TOKEN}/g"</span> <span class="token punctuation">.</span><span class="token operator">/</span>_config<span class="token punctuation">.</span>yml
  <span class="token operator">-</span> hexo deploy

    # 版本 二（未能成功）
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span>deploy_git
  # <span class="token operator">-</span> git checkout master
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>
  # <span class="token operator">-</span> sed <span class="token operator">-</span>i<span class="token string">''</span> <span class="token string">"s~${GH_REF}~${GH_TOKEN}:x-oauth-basic@${GH_REF}~"</span> _config<span class="token punctuation">.</span>yml
  # <span class="token operator">-</span> hexo d <span class="token operator">></span> log<span class="token punctuation">.</span>txt <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span>
  # <span class="token operator">-</span> cat log<span class="token punctuation">.</span>txt <span class="token operator">|</span> sed <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>
  # <span class="token operator">-</span> echo <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span> # 构建后输出时间标识

    # 版本三（能正常构建提交到博客 leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">,</span>但是并不是使用 hexo d  命令触发的）
    # after_script<span class="token punctuation">:</span>
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>
  # <span class="token operator">-</span> git init
  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"your-git-name"</span>
  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"your-email-address"</span>
  # <span class="token operator">-</span> git add <span class="token punctuation">.</span>
  # <span class="token operator">-</span> git commit <span class="token operator">-</span>m <span class="token string">"Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>
  # <span class="token operator">-</span> git push <span class="token operator">--</span>force <span class="token operator">--</span>quiet <span class="token string">"https://${GH_TOKEN}@${GH_REF}"</span> master<span class="token punctuation">:</span>master


# 指定博客源码分支，Travis CI 监控哪一个分支的变动，这里是 master 分支（若博客备份文件和 GitHub Pages 共用一个仓库的话需设置为博客备份文件所在分支）。
branches<span class="token punctuation">:</span>
  only<span class="token punctuation">:</span>
    <span class="token operator">-</span> master

# End<span class="token punctuation">:</span> Build LifeCycle

# configure notifications <span class="token punctuation">(</span>email<span class="token punctuation">,</span> IRC<span class="token punctuation">,</span> campfire etc<span class="token punctuation">)</span>
# please update <span class="token keyword">this</span> section to your needs<span class="token operator">!</span>
# https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>travis<span class="token operator">-</span>ci<span class="token punctuation">.</span>com<span class="token operator">/</span>user<span class="token regex">/notifications/</span>
notifications<span class="token punctuation">:</span>
  email<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token number">1181012791</span>@qq<span class="token punctuation">.</span>com
  on_success<span class="token punctuation">:</span> change
  on_failure<span class="token punctuation">:</span> always

</code></pre>
<p>到这里我就出问题了，虽然能成功触发构建，但是并不能使用 hexo d 发布到 leader755.github.io 这个博客仓库。目前还没找出问题在哪里，出现问题地方应该在生命周期 after_script: ,如果有知道还请留言回复，感激不尽。虽然没有成功使用吧。但是也算对 travis-ci 有初步的认识吧。继续折腾吧。</p>
<h2 id="4-认识-Job-Lifecycle–Job-的生命周期"><a href="#4-认识-Job-Lifecycle–Job-的生命周期" class="headerlink" title="4.认识 Job Lifecycle–Job 的生命周期"></a>4.认识 Job Lifecycle–Job 的生命周期</h2><p>Travis CI 为每种编程语言提供默认构建环境和默认的阶段集。 创建虚拟机为你的 Job 提供构建环境，将存储库克隆到其中，安装可选的插件，然后运行构建阶段。<br>job 的声明周期，主要包含两大部分：<br>install：安装依赖，官网有专门讲解的 <a href="https://docs.travis-ci.com/user/installing-dependencies/" target="_blank" rel="noopener">Installing Dependencies</a><br>script：运行构建脚本；<br>在 installation 阶段之前（beofore_install）、在 script phase 之前（before_script）或之后（after_script），你可以运行自定义命令；<br>当构建成功或失败置换后，可以使用 after_success（例如构建文档）或 after_failure（例如上载日志文件）阶段执行其他操作（actions）。 在 after_failure 和 after_success 中，您可以使用$TRAVIS_TEST_RESULT 环境变量获取构建结果。</p>
<p>完整的 job 生命周期(包括三个可选的部署阶段，以及在检出 git 存储库 和更改到存储库目录) 如下：</p>
<ul>
<li><a href="https://docs.travis-ci.com/user/installing-dependencies/#installing-packages-with-the-apt-addon" target="_blank" rel="noopener"><strong>apt addons</strong></a>** 可选安装**</li>
<li><a href="https://docs.travis-ci.com/user/caching" target="_blank" rel="noopener"><strong>cache components</strong></a>** 可选安装**</li>
<li><strong>before_install</strong></li>
<li><strong>install</strong></li>
<li><strong>before_script</strong></li>
<li><strong>script</strong></li>
<li><strong>before_cache (for cleaning up cache) 可选</strong></li>
<li><strong>after_success or after_failure</strong></li>
<li><strong>before_deploy 可选</strong></li>
<li><strong>deploy 可选</strong></li>
<li><strong>after_deploy 可选</strong></li>
<li><strong>after_script</strong></li>
</ul>
<p>一次构建任务可有许多 job 组成。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>travis-ci</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绕开referrer防盗链</title>
    <url>/leader755/32ce62eb.html</url>
    <content><![CDATA[<h2 id="什么是-referrer"><a href="#什么是-referrer" class="headerlink" title="什么是 referrer"></a>什么是 referrer</h2><p>当一用户点击当前页面中的一个链接，然后跳转到目标页面时，目标页面会收到一个信息，即用户是从哪个源链接跳转过来的。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595703140078-870fec1d-0742-4dea-828a-1f32819af187.png#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1086&originWidth=1184&size=153142&status=done&style=none&width=592" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1595702418075-1743cd6e-ed7c-4b5b-9f96-7f89fff17373.webp#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&originHeight=543&originWidth=896&size=0&status=done&style=none&width=896" alt=""><br>也就是说，当你发起一个 http 请求，请求头中的<code>referrer</code>字段就说明了你是从哪个页面发起该请求的。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有时候我们需要控制这个<code>referrer</code>字段的值，即是否让其显示在请求头中，或者是否显示完整路径等。尤其是在以下两个使用场景：</p>
<h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><p>在社交网站的个人中心页面，也许会存在一些外链，这时候社交网站肯定不希望用户在点击这些链接跳转到其他第三方网站时会将自己个人中心的 URL 信息显示在<code>referrer</code>字段中传过去，尤其是个人中心页面的 URL 往往会带着用户数据和一些敏感信息。这时候可以选择不显示来源页面 URL 信息或者只显示一个网站根地址 hostname。</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>有些使用了 https 的网站，可能在 URL 中使用一个参数（sid）来作为用户身份凭证，而又需要引入其他 https 网站的资源，这种情况，网站肯定不希望泄露用户的身份凭证信息。当 https 网站需要引入不安全的 http 网站的资源或者有链接要跳转到 http 网站时，这时候将 https 源网站的 URL 信息传过去也是不太安全的。<br>当然还有其他情况下需要<code>referrer</code>的值，比如最近公司所做的项目中，有一个请求由于请求头过大导致响应是 400，我们的<code>Referrer Policy</code>是默认的情况，显示的<code>referrer</code>是完整的 URL 信息，该 URL 带了很多敏感数据比如加密后的 token，sessionID 等，长度特别长，请求头中的 cookie 和请求的 URL 也带着很大块的信息，最终我们决定让<code>referrer</code>只携带网站根地址的信息而不是其完整路径，由此减小了 header 的大小。</p>
<h2 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h2><p><code>Referrer-Policy</code>的作用就是为了控制请求头中<code>referrer</code>的内容，目前<code>Referrer-Policy</code>只包含以下几种值：</p>
<table>
<thead>
<tr>
<th align="left">策略名称</th>
<th align="left">属性值（新）</th>
<th align="left">属性值（旧）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No Referrer</td>
<td align="left">no-referrer</td>
<td align="left">never</td>
</tr>
<tr>
<td align="left">No Referrer When Downgrade</td>
<td align="left">no-referrer-when-downgrade</td>
<td align="left">default</td>
</tr>
<tr>
<td align="left">Origin Only</td>
<td align="left">origin</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Origin When Cross-origin</td>
<td align="left">origin-when-crossorigin</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Unsafe URL</td>
<td align="left">unsafe-url</td>
<td align="left">always</td>
</tr>
</tbody></table>
<p>简单介绍下这五种类型的具体含义：</p>
<ul>
<li><strong>No Referrer</strong>：任何情况下都不发送 Referrer 信息；</li>
<li><strong>No Referrer When Downgrade</strong>：仅当发生协议降级（如 HTTPS 页面引入 HTTP 资源，从 HTTPS 页面跳到 HTTP 等）时不发送 Referrer 信息。这个规则是现在大部分浏览器默认所采用的；</li>
<li><strong>Origin Only</strong>：发送只包含 host 部分的 Referrer。启用这个规则，无论是否发生协议降级，无论是本站链接还是站外链接，都会发送 Referrer 信息，但是只包含协议 + host 部分（不包含具体的路径及参数等信息）；</li>
<li><strong>Origin When Cross-origin</strong>：仅在发生跨域访问时发送只包含 host 的 Referrer，同域下还是完整的。它与 <code>Origin Only</code> 的区别是多判断了是否 <code>Cross-origin</code>。需要注意的是协议、域名和端口都一致，才会被浏览器认为是同域；</li>
<li><strong>Unsafe URL</strong>：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息。正如其名，这是最宽松而最不安全的策略；</li>
</ul>
<h2 id="Referrer-Policy-更改方法"><a href="#Referrer-Policy-更改方法" class="headerlink" title="Referrer-Policy 更改方法"></a>Referrer-Policy 更改方法</h2><p>可以有以下 4 种方法：</p>
<p><strong>1.</strong> <code>Referrer-Policy</code> HTTP <code>header</code>设置：</p>
<pre class=" language-javascript"><code class="language-javascript">Referrer<span class="token operator">-</span>Policy<span class="token punctuation">:</span> origin</code></pre>
<p><strong>2.</strong> 通过<code>&lt;meta&gt;</code>元素改变<code>Referrer Policy</code>，直接修改名为<code>referrer</code>的内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre>
<p><strong>3.</strong> 给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener"><code>&lt;img&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"><code>&lt;iframe&gt;</code></a>, 或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>referrerpolicy</code>属性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre>
<p><strong>4.</strong> 如需设置不显示<code>referrer</code>信息时，也可以给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>rel</code>的链接关系。</p>
<pre><code>&lt;a href=&quot;http://example.com&quot; rel=&quot;noreferrer&quot;&gt;复制代码</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用何种<code>Referrer Policy</code>取决于网站的需求，但是一般来说，<code>unsafe-url</code>是不太建议用的，同样，如果是只想显示网站的根地址，那么建议用<code>strict-origin</code>和 s<code>trict-origin-when-cross-origin</code>。如果 URL 中没有什么敏感信息，那就默认使用<code>no-referrer-when-downgrade</code>。</p>
<p>特别声明，文章转载自：<a href="https://juejin.im/post/5cd81b59518825686a06fd05" target="_blank" rel="noopener">https://juejin.im/post/5cd81b59518825686a06fd05</a> 。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>referrer</tag>
        <tag>防盗链</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中setData修改属性值</title>
    <url>/leader755/611009a3.html</url>
    <content><![CDATA[<h2 id="1-修改对象属性"><a href="#1-修改对象属性" class="headerlink" title="1.修改对象属性"></a>1.修改对象属性</h2><p>##</p>
<h3 id="1-gt-第一种"><a href="#1-gt-第一种" class="headerlink" title="1&gt;第一种"></a>1&gt;第一种</h3><pre class=" language-javascript"><code class="language-javascript"> changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'person.name'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>###</p>
<h3 id="2-gt-第二种"><a href="#2-gt-第二种" class="headerlink" title="2&gt;第二种"></a>2&gt;第二种</h3><pre class=" language-javascript"><code class="language-javascript">changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">'person.name'</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>#</p>
<h2 id="2-修改数组属性"><a href="#2-修改数组属性" class="headerlink" title="2.修改数组属性"></a>2.修改数组属性</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token string">"array["</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"].amount"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> amount<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>setData</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎使用 MWeb</title>
    <url>/leader755/766a05db.html</url>
    <content><![CDATA[<p>MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件，目前已支持 Mac，iPad 和 iPhone。MWeb 有以下特色：</p>
<h2 id="软件本身："><a href="#软件本身：" class="headerlink" title="软件本身："></a>软件本身：</h2><ul>
<li>使用原生的 macOS 技术打造，追求与系统的完美结合。</li>
<li>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</li>
</ul>
<h2 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h2><ul>
<li>使用 GitHub Flavored Markdown 语法，简称 GFM 语法。</li>
<li>支持表格、TOC、LaTeX、代码块、任务列表、脚注等。</li>
<li>画图库支持 mermaid, viz, ECharts, PlantUML, Sequence, Flow。</li>
</ul>
<h2 id="Markdown-辅助："><a href="#Markdown-辅助：" class="headerlink" title="Markdown 辅助："></a>Markdown 辅助：</h2><ul>
<li>支持截图并粘贴、复制并粘贴、拖拽等方式插入图片并直接显示在编辑器内。</li>
<li>在兼容 Markdown 语法的情况下支持设置图片宽度。</li>
<li>好用的表格插入和 LaTeX 书写辅助。</li>
</ul>
<h2 id="Markdown-输出："><a href="#Markdown-输出：" class="headerlink" title="Markdown 输出："></a>Markdown 输出：</h2><ul>
<li>支持导出为图片、HTML、Epub、PDF、RTF、Docx。</li>
<li>支持发布到 WordPress、支持 Metaweblog API 协议的服务、Wordpress.com、印象笔记（Evernote）、Blogger、Medium、Tumblr、语雀、Ghost、少数派 Matrix。</li>
<li>图片上传服务（图床）支持 Imgur、七牛云、又拍云、腾讯云 COS、阿里云 OSS、SM.MS 和自定义的图床服务。</li>
</ul>
<h2 id="Markdown-笔记："><a href="#Markdown-笔记：" class="headerlink" title="Markdown 笔记："></a>Markdown 笔记：</h2><ul>
<li>强大的文档库支持分类树和标签管理文档，文档可归类于多个分类，可以把分类整个导出为 Epub、PDF 和生成静态网站。非常合适用于笔记、个人知识收集、管理和输出。</li>
<li>快速笔记：随意增加笔记及图片等素材，支持以天为单位把增加的素材组合在一个文档内，方便整理及记录历史收集情况。</li>
<li>快速搜索：目前已支持全局快捷键调出搜索。</li>
</ul>
<h2 id="外部-Markdown-文档："><a href="#外部-Markdown-文档：" class="headerlink" title="外部 Markdown 文档："></a>外部 Markdown 文档：</h2><ul>
<li>外部 Markdown 文档使用外部模式管理。外部模式使用目录树的方式编辑和管理你的 Markdown 文档，还能很好的支持 GitBook、Jekyll、Hexo 等等编辑和图片插入。</li>
</ul>
<h2 id="MWeb-文档："><a href="#MWeb-文档：" class="headerlink" title="MWeb 文档："></a>MWeb 文档：</h2><p>如果要更详细了解 MWeb，建议你一定要去看一下官网的帮助文档，网址为：<a href="https://zh.mweb.im/help.html" target="_blank" rel="noopener">https://zh.mweb.im/help.html</a>。我们建议在使用文档库之前，一定要阅读一下 <a href="https://zh.mweb.im/mweb-library.html" target="_blank" rel="noopener">MWeb 文档库详细介绍</a> 这篇文章，以便更好的使用文档库。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>MWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>给文件添加一个.gitignore</title>
    <url>/leader755/6f1cbacf.html</url>
    <content><![CDATA[<h2 id="1-WHY"><a href="#1-WHY" class="headerlink" title="1.WHY?"></a>1.WHY?</h2><p>.gitignore 文件只要在这个文件中申明那些文件你不希望添加到 git 中去，这样当你使用<code>git add .</code>这些文件就会被自动忽略掉</p>
<h2 id="2-忽略文件的原则"><a href="#2-忽略文件的原则" class="headerlink" title="2.忽略文件的原则"></a>2.忽略文件的原则</h2><ul>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的.class 文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ul>
<h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><p>首先，在你的工作区新建一个名称为<code>.gitignore</code>的文件。<br>然后，把要忽略的文件名填进去，Git 就会自动忽略这些文件。<br>不需要从头写.gitignore 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://link.jianshu.com?t=https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
<h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><p>比如你的项目是 java 项目，<code>.java</code>文件编译后会生成<code>.class</code>文件，这些文件多数情况下是不想被传到仓库中的文件。这时候你可以直接适用 github 的.gitignore 文件模板。<a href="https://link.jianshu.com?t=https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore/blob/master/Java.gitignore</a> 将这些忽略文件信息复制到你的.gitignore 文件中去：</p>
<pre><code>*.class
# Mobile Tools for Java (J2ME)
.mtj.tmp/
# Package Files #
*.jar
*.war
*.ear
# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*</code></pre><p>可以看到 github 为我们提供了最流行的.gitignore 文件配置。<br>保存.ignore 文件后我们查看下 git status，检查下是否还有我们不需要的文件会被添加到 git 中去：</p>
<pre><code>$ git status
On branch master
Initial commit
Changes to be committed:
  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)
        new file:   .gitignore
        new file:   HelloWorld.java
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        Config.ini</code></pre><p>比如我的项目目录下有一个 Config.ini 文件，这个是个本地配置文件我不希望上传到 git 中去，我们可以在 gitignore 文件中添加这样的配置：</p>
<pre class=" language-javascript"><code class="language-javascript">Config<span class="token punctuation">.</span>ini<span class="token punctuation">;</span></code></pre>
<p>或者你想忽略所有的.ini 文件你可以这样写：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span>ini</code></pre>
<p>如果有些文件已经被你忽略了，当你使用<code>git add</code>时是无法添加的，比如我忽略了<code>*.class</code>，现在我想把<code>HelloWorld.class</code>添加到 git 中去：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git add HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">The</span> following paths are ignored by one <span class="token keyword">of</span> your <span class="token punctuation">.</span>gitignore files<span class="token punctuation">:</span>
HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">Use</span> <span class="token operator">-</span>f <span class="token keyword">if</span> you really want to add them<span class="token punctuation">.</span></code></pre>
<p>git 会提示我们这个文件已经被我们忽略了，需要加上<code>-f</code>参数才能强制添加到 git 中去：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git status
On branch master
Initial commit
Changes to be committed<span class="token punctuation">:</span>
  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span>gitignore
        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
        <span class="token class-name">new</span> file<span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span>java</code></pre>
<p>这样就能强制添加到缓存中去了。<br>如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用<code>rm</code>命令将其从中移除：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git rm HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">--</span>cached
rm <span class="token string">'HelloWorld.class'</span></code></pre>
<p>如果你已经把不想上传的文件上传到了 git 仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后 pull 代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore 文件中添加这些你想忽略的文件，然后再 push 到远程仓库。</p>
<h2 id="5-查看-gitignore-规则"><a href="#5-查看-gitignore-规则" class="headerlink" title="5.查看 gitignore 规则"></a>5.查看 gitignore 规则</h2><p>如果你发下<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name"><span class="token punctuation">.</span>gitignore</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token class-name">HelloWorld<span class="token punctuation">.</span>class</span></code></pre>
<p>可以看到<code>HelloWorld.class</code>匹配到了我们的第一条<code>*.class</code>的忽略规则所以文件被忽略了。</p>
<h2 id="6-忽略规则文件语法"><a href="#6-忽略规则文件语法" class="headerlink" title="6.忽略规则文件语法"></a>6.忽略规则文件语法</h2><h3 id="a-忽略指定文件-目录"><a href="#a-忽略指定文件-目录" class="headerlink" title="a.忽略指定文件/目录"></a>a.忽略指定文件/目录</h3><pre class=" language-javascript"><code class="language-javascript"># 忽略指定文件
HelloWrold<span class="token punctuation">.</span><span class="token keyword">class</span>
# 忽略指定文件夹
bin<span class="token operator">/</span>
bin<span class="token regex">/gen/</span></code></pre>
<h3 id="b-通配符忽略规则"><a href="#b-通配符忽略规则" class="headerlink" title="b.通配符忽略规则"></a>b.通配符忽略规则</h3><p>通配符规则如下：</p>
<pre class=" language-javascript"><code class="language-javascript"># 忽略<span class="token punctuation">.</span><span class="token keyword">class</span>的所有文件
<span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>
# 忽略名称中末尾为ignore的文件夹
<span class="token operator">*</span>ignore<span class="token operator">/</span>
# 忽略名称中间包含ignore的文件夹
<span class="token operator">*</span>ignore<span class="token operator">*</span><span class="token operator">/</span></code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 hexo 博客的图片链接失效问题</title>
    <url>/leader755/8ca51668.html</url>
    <content><![CDATA[<h2 id="1-首先找到-hexo-博客的主题文件夹目录"><a href="#1-首先找到-hexo-博客的主题文件夹目录" class="headerlink" title="1.首先找到 hexo 博客的主题文件夹目录"></a>1.首先找到 hexo 博客的主题文件夹目录</h2><pre class=" language-javascript"><code class="language-javascript">D<span class="token punctuation">:</span> \Blog_leader755\Blog_leader755\themes\Blog_leader755\themes\halo\Blog_leader755\themes\halo\layout\Blog_leader755\themes\halo\layout\_partial\Blog_leader755\themes\halo\layout\_partial\head<span class="token punctuation">.</span>ejs<span class="token punctuation">;</span></code></pre>
<p>修改上述路径的文件 head.ejs ，因为每个页面都会包含 head 这个文件，在里面加上一行代码就能解决。</p>
<h2 id="2-加入此行代码到页面"><a href="#2-加入此行代码到页面" class="headerlink" title="2.加入此行代码到页面"></a>2.加入此行代码到页面<head><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head></h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"no-referrer"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>
<h2 id="3-暂时解决载了外链限制的问题"><a href="#3-暂时解决载了外链限制的问题" class="headerlink" title="3.暂时解决载了外链限制的问题"></a>3.暂时解决载了外链限制的问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595671131433-aced588a-b41e-406a-acf6-6133df722701.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1288&size=105257&status=done&style=none&width=644" alt="image.png"></p>
<h2 id="4-随之而来的问题出现了"><a href="#4-随之而来的问题出现了" class="headerlink" title="4.随之而来的问题出现了"></a>4.随之而来的问题出现了</h2><p>如果你同时使用了<a href="https://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>(<a href="https://busuanzi.ibruce.info/)统计，你会发现问题，查看控制台会出现不蒜子出现跨域的请求。这是为什么呢。由于使用了" target="_blank" rel="noopener">https://busuanzi.ibruce.info/)统计，你会发现问题，查看控制台会出现不蒜子出现跨域的请求。这是为什么呢。由于使用了</a> no-referrer。</p>
<p>关于 no-refferrer 的相关问题可以查看此篇文章，在这里就不一一解释，直接给出解决方案。</p>
<h2 id="5-目前的解决方案"><a href="#5-目前的解决方案" class="headerlink" title="5.目前的解决方案"></a>5.目前的解决方案</h2><h3 id="1-gt-方案-："><a href="#1-gt-方案-：" class="headerlink" title="1&gt;方案-："></a>1&gt;方案-：</h3><p>按照网友的说法是，meta 是可以放在 <code>&lt;body&gt;</code> 里的吧。<br>所以把 <code>&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</code> 放到 <strong>archive-book.ejs</strong> 的最前面。<br>然后在网页结构里就会是这个样子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span>
<span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main-center no-sidebar okayNav-loaded"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>aside <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidebar"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span> role<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"never"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>article <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article article-links article-type-list"</span> <span class="token operator">...</span><span class="token operator">></span>
<span class="token operator">...</span><span class="token operator">...</span></code></pre>
<p>在它之上的所有链接都会带来源信息，之后的就是 no-referrer 了。所以理论上也就规避了图片的防盗链了。<br>划重点，但是并没有如愿解决不蒜子的跨域问题。</p>
<h3 id="2-gt-方案二：终极解决方案"><a href="#2-gt-方案二：终极解决方案" class="headerlink" title="2&gt;方案二：终极解决方案"></a>2&gt;方案二：终极解决方案</h3><p>由于可以给  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener"><code>&lt;img&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"><code>&lt;iframe&gt;</code></a>, 或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>referrerpolicy</code>属性。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"no-referrer"</span><span class="token operator">></span></code></pre>
<p>所以，可以为所有文章内的图片动态添加 referrerpolicy 属性，通过查看控制台找到图片 img 的类名<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702030353-1e6505c0-c918-4e4a-864b-12077c39bc66.png#align=left&display=inline&height=275&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=2056&size=252165&status=done&style=none&width=1028" alt="image.png"></p>
<p>在文件夹中全局搜索类名，找到如下代码：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702163492-a013ed03-25f0-4474-a3d1-39aa2753081c.png#align=left&display=inline&height=387&margin=%5Bobject%20Object%5D&name=image.png&originHeight=774&originWidth=1204&size=160420&status=done&style=none&width=602" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//为文章内的图片添加no-referrer来隐藏referer（解决第三方图片外链不显示问题）</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"referrerPolicy"</span><span class="token punctuation">,</span> <span class="token string">"no-referrer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>注意每个主题中的文章下的图片类名应该都不一致，所以类名需要根据实际情况，在控制台中查找文章中的图片类名，再去找相应的代码，为其动态添加 referrerPolicy 属性。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>图片链接失效</tag>
        <tag>第三方链接</tag>
      </tags>
  </entry>
</search>
