<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1.搭建本地的 hexo 的博客</title>
    <url>/leader755/7894.html</url>
    <content><![CDATA[<h2 id="1-gt-官方文档-https-github-com-hexojs-hexo"><a href="#1-gt-官方文档-https-github-com-hexojs-hexo" class="headerlink" title="1&gt;官方文档   https://github.com/hexojs/hexo"></a>1&gt;官方文档   <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></h2><h2 id="2-gt-搭建博客"><a href="#2-gt-搭建博客" class="headerlink" title="2&gt;搭建博客"></a>2&gt;搭建博客</h2><h3 id="1-全局安装-hexo，创建博客"><a href="#1-全局安装-hexo，创建博客" class="headerlink" title="1.全局安装 hexo，创建博客"></a>1.全局安装 hexo，创建博客</h3><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g</code></pre>
<h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><pre class=" language-javascript"><code class="language-javascript">hexo init blog</code></pre>
<h3 id="3-启动本地-hexo-server"><a href="#3-启动本地-hexo-server" class="headerlink" title="3.启动本地 hexo-server"></a>3.启动本地 hexo-server</h3><pre class=" language-javascript"><code class="language-javascript">hexo server</code></pre>
<h2 id="4-新建一个-hexo-博客，富文本-makedown-文档"><a href="#4-新建一个-hexo-博客，富文本-makedown-文档" class="headerlink" title="4.新建一个 hexo 博客，富文本 makedown 文档"></a>4.新建一个 hexo 博客，富文本 makedown 文档</h2><pre class=" language-javascript"><code class="language-javascript">$ hexo <span class="token keyword">new</span> <span class="token string">"Hello Hexo"</span></code></pre>
<h2 id="5-打包发布到-hexo"><a href="#5-打包发布到-hexo" class="headerlink" title="5.打包发布到 hexo"></a>5.打包发布到 hexo</h2><pre><code>//打包发布 hexo
hexo generate


//重启服务(可以看到新增的文档)
hexo server
</code></pre><h2 id="6-packge-json-的命令行（备份文件）"><a href="#6-packge-json-的命令行（备份文件）" class="headerlink" title="6.packge.json 的命令行（备份文件）"></a>6.packge.json 的命令行（备份文件）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>3.mac上生成SSH key与GitHub通信</title>
    <url>/leader755/10760.html</url>
    <content><![CDATA[<h2 id="1-检查-SSH-key-是否存在"><a href="#1-检查-SSH-key-是否存在" class="headerlink" title="1.检查 SSH key 是否存在"></a>1.检查 SSH key 是否存在</h2><p>在终端输入：</p>
<pre class=" language-javascript"><code class="language-javascript">ls <span class="token operator">-</span>a <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh</code></pre>
<p>如果没有，终端显示如下：</p>
<blockquote>
<p>No such file or directory</p>
</blockquote>
<p>如果已经存在，则会显示 id_rsa 和 id_rsa.pub</p>
<ul>
<li>查看 .ssh</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">ls <span class="token operator">-</span>a <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh

cd <span class="token punctuation">.</span>ssh
cat id_rsa<span class="token punctuation">.</span>pub <span class="token comment" spellcheck="true">//查看公钥</span>
cat id_rsa     <span class="token comment" spellcheck="true">//查看私钥</span></code></pre>
<h2 id="2-生成新的-SSH-key"><a href="#2-生成新的-SSH-key" class="headerlink" title="2.生成新的 SSH key"></a>2.生成新的 SSH key</h2><h4 id="1-设置-username-和-email（github-每次-commit-都会记录他们）"><a href="#1-设置-username-和-email（github-每次-commit-都会记录他们）" class="headerlink" title="1.设置 username 和 email（github 每次 commit 都会记录他们）"></a>1.设置 username 和 email（github 每次 commit 都会记录他们）</h4><pre class=" language-javascript"><code class="language-javascript">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>
git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span></code></pre>
<h4 id="2-通过终端命令创建-ssh-key"><a href="#2-通过终端命令创建-ssh-key" class="headerlink" title="2.通过终端命令创建 ssh key"></a>2.通过终端命令创建 ssh key</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//其中 your_email@example.com 为你在 GitHub 注册时的邮箱</span>
'ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"1181012791@qq.com"</span></code></pre>
<p><a href="https://www.cnblogs.com/jarod99/p/7251361.html" target="_blank" rel="noopener">Bad escape character ‘ygen’ 错误原因!</a></p>
<blockquote>
<p>ssh-keygen -t rsa -C “邮箱”<br>ssh-keygen 命令中间没有空格，如果在 ssh 后面加上空格，会得到 Bad escape character ‘ygen’.的错误。</p>
</blockquote>
<p>成功后终端显示如下：</p>
<blockquote>
<p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/xxx/.ssh/id_rsa):</p>
</blockquote>
<p>提示你保存 .ssh/id_rsa 的路径，这里直接 enter</p>
<blockquote>
<p>Created directory ‘/Users/xxx/.ssh’.<br>Enter passphrase (empty for no passphrase):</p>
</blockquote>
<p>提示输入 passphrase，每次与 GitHub 通信都会要求输入 passphrase，以避免某些「失误」，建议输入<br><strong>这里有个问题需要注意，那就是当你在这里输入密码，以后在连接 gitHub 去 push 代码的时候都需要输入密码，非常蛋疼，所以在这里最好直接回车过即可，不用输入密码。**</strong>()**</p>
<h4 id="3-即连续-enter-3-次，就会生成-key。"><a href="#3-即连续-enter-3-次，就会生成-key。" class="headerlink" title="3.即连续 enter 3 次，就会生成 key。"></a>3.即连续 enter 3 次，就会生成 key。</h4><p>成功后终端显示：</p>
<blockquote>
<p>Your identification has been saved in /Users/xxx/.ssh/id_rsa.<br>Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 <a href="mailto:your_email@example.com">your_email@example.com</a><br>The key’s randomart image is:（后面图形省略）</p>
</blockquote>
<h2 id="3-添加-key-到-SSH"><a href="#3-添加-key-到-SSH" class="headerlink" title="3.添加 key 到 SSH"></a>3.添加 key 到 SSH</h2><p>输入命令：</p>
<pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa</code></pre>
<p>此时会要求输入 passphrase，输入步骤二中填的 passphrase<br>成功后，终端显示：</p>
<blockquote>
<p>Identity added: /Users/xxx/.ssh/id_rsa (/Users/xxx/.ssh/id_rsa)</p>
</blockquote>
<p>最后，在 /Users/xxx/.ssh/ 生成两个文件，id_rsa 和 id_rsa.pub<br>此时，SSH key 已经生成成功</p>
<h2 id="4-添加-SSH-key-到-GitHub-和-coding"><a href="#4-添加-SSH-key-到-GitHub-和-coding" class="headerlink" title="4.添加 SSH key 到 GitHub 和 coding"></a>4.添加 SSH key 到 GitHub 和 coding</h2><h4 id="1-复制-id-rsa-pub-中的所有内容"><a href="#1-复制-id-rsa-pub-中的所有内容" class="headerlink" title="1.复制 id_rsa.pub 中的所有内容,"></a>1.复制 id_rsa.pub 中的所有内容,</h4><p>打开 id_rsa.pub，终端命令：</p>
<pre class=" language-javascript"><code class="language-javascript">vim<span class="token regex">/cat   ~/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub</code></pre>
<p>手动复制以 ssh-rsa 到以 <a href="mailto:your_email@example.com">your_email@example.com</a> 结尾的所有内容</p>
<p>或者直接输入命令复制 id_rsa.pub 中的所有内容，终端命令：</p>
<pre class=" language-javascript"><code class="language-javascript">pbcopy <span class="token operator">&lt;</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub</code></pre>
<h2 id="5-登录-GitHub-和-coding"><a href="#5-登录-GitHub-和-coding" class="headerlink" title="5.登录 GitHub 和 coding"></a>5.登录 GitHub 和 coding</h2><h4 id="github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key"><a href="#github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key" class="headerlink" title="github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key"></a>github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key</h4><h4 id="coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥"><a href="#coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥" class="headerlink" title="coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥"></a>coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥</h4><p>Title 随便写<br>Key 粘贴之前复制的内容<br>这样 SSH key 就添加的 GitHub 或者 coding.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333300890-a4b759da-4e1d-4837-8cc3-c2c3b1fa1f01.png#align=left&display=inline&height=565&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1130&originWidth=1902&size=254444&status=done&style=none&width=951" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333326072-e78c1bf9-ed79-4811-bbc9-a203e423b57a.png#align=left&display=inline&height=560&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1120&originWidth=1946&size=357795&status=done&style=none&width=973" alt="image.png"></p>
<h2 id="6-检测-SSH-key"><a href="#6-检测-SSH-key" class="headerlink" title="6.检测 SSH key"></a>6.检测 SSH key</h2><p>输入命令：</p>
<pre class=" language-javascript"><code class="language-javascript">ssh git@github<span class="token punctuation">.</span>com</code></pre>
<p>此时会验证 SSH key 是否可以访问 GitHub<br>成功显示如下：</p>
<blockquote>
<p>Hi your_name! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p>
</blockquote>
<blockquote>
<p>以上为提示内容，不过这里还是有一个需要注意的地方，如果没有上面的成功提示输出的话也不要害怕，我们可以先自己在本地建立一个 gitHub 仓库，然后进行 push 操作，如果 push 成功那么设置是成功的，如果 push 不上去的话再去检查。</p>
</blockquote>
<h2 id="7-使用-git-去创建一个-ssh-key-就完成了"><a href="#7-使用-git-去创建一个-ssh-key-就完成了" class="headerlink" title="7.使用 git 去创建一个 ssh key 就完成了"></a>7.使用 git 去创建一个 ssh key 就完成了</h2><h2 id="8-已经存在-ssh，创建新密钥"><a href="#8-已经存在-ssh，创建新密钥" class="headerlink" title="8.已经存在 ssh，创建新密钥"></a>8.已经存在 ssh，创建新密钥</h2><h3 id="1-gt-进入-ssh-目录"><a href="#1-gt-进入-ssh-目录" class="headerlink" title="1&gt;进入 ssh 目录"></a>1&gt;进入 ssh 目录</h3><pre class=" language-javascript"><code class="language-javascript">cd <span class="token operator">~</span><span class="token regex">/.ssh/</span></code></pre>
<h3 id="2-gt-用-ssh-keygen-命令生成一组新的-id-rsa-new-和-id-rsa-new-pub"><a href="#2-gt-用-ssh-keygen-命令生成一组新的-id-rsa-new-和-id-rsa-new-pub" class="headerlink" title="2&gt;用 ssh-keygen 命令生成一组新的 id_rsa_new 和 id_rsa_new.pub"></a>2&gt;用 ssh-keygen 命令生成一组新的 id_rsa_new 和 id_rsa_new.pub</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"new email"</span></code></pre>
<blockquote>
<p>需要注意，出现提示输入文件名的时候要输入与默认配置不一样的文件名，比如： id_rsa_new</p>
</blockquote>
<h3 id="3-gt-执行-ssh-agent-让-ssh-识别新的私钥"><a href="#3-gt-执行-ssh-agent-让-ssh-识别新的私钥" class="headerlink" title="3&gt;执行 ssh-agent 让 ssh 识别新的私钥"></a>3&gt;执行 ssh-agent 让 ssh 识别新的私钥</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_new</code></pre>
<h3 id="4-gt-添加-SSH-到钥匙串"><a href="#4-gt-添加-SSH-到钥匙串" class="headerlink" title="4&gt;添加 SSH 到钥匙串"></a>4&gt;添加 SSH 到钥匙串</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">-</span>K KeyPathOrKeyName</code></pre>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>4.mac 上使用 vi</title>
    <url>/leader755/38612.html</url>
    <content><![CDATA[<p>上一篇博客提到 mac 进入 vi 编辑界面，复制 ssh key。这篇就是介绍如何保存退出 vi。</p>
<p>如果是 vi，则：<br><strong>Esc</strong> 退出编辑模式，输入以下命令：<br><strong>:wq</strong> 保存后退出 vi，若为 :wq! 则为强制储存后退出（常用）<br><strong>:w</strong> 保存但不退出（常用）<br><strong>:w!</strong> 若文件属性为『只读』时，强制写入该档案<br><strong>:q</strong> 离开 vi （常用）<br><strong>:q!</strong> 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。<br><strong>:e!</strong> 将档案还原到最原始的状态！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>vi</tag>
      </tags>
  </entry>
  <entry>
    <title>5.hexo博客部署到 Github和 coding</title>
    <url>/leader755/36193.html</url>
    <content><![CDATA[<h2 id="1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："><a href="#1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：" class="headerlink" title="1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："></a>1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313278812-df6c1515-c7b2-4988-ab07-98655129341a.png#crop=0&crop=0&crop=1&crop=1&height=144&id=XKQUU&margin=%5Bobject%20Object%5D&name=image.png&originHeight=288&originWidth=1052&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44477&status=done&style=none&title=&width=526" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333533439-ce902a29-c0fc-49e0-90a7-90e71ce9c3aa.png#crop=0&crop=0&crop=1&crop=1&height=120&id=Y8B8Y&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=972&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33032&status=done&style=none&title=&width=486" alt="image.png"><br>如果不部署到 coding，就只写 github 就行。</p>
<pre class=" language-javascript"><code class="language-javascript">deploy<span class="token punctuation">:</span>
  type<span class="token punctuation">:</span> git
  repo<span class="token punctuation">:</span>
       github<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git
    coding<span class="token punctuation">:</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>e<span class="token punctuation">.</span>coding<span class="token punctuation">.</span>net<span class="token operator">/</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>coding<span class="token punctuation">.</span>git
    branch<span class="token punctuation">:</span> master</code></pre>
<h2 id="2：要安装一个部署插件-hexo-deployer-git。"><a href="#2：要安装一个部署插件-hexo-deployer-git。" class="headerlink" title="2：要安装一个部署插件 hexo-deployer-git。"></a>2：要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>。</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<h2 id="3：发布到-github"><a href="#3：发布到-github" class="headerlink" title="3：发布到 github"></a>3：发布到 github</h2><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>
<pre class=" language-javascript"><code class="language-javascript">hexo g <span class="token operator">-</span>d</code></pre>
<p>稍等一会，在浏览器访问网址： <a href="https://xn--6qqv7i14ofosyrb.github.io/" target="_blank" rel="noopener">https://你的用户名.github.io</a> 就会看到你的博客啦！！</p>
<h2 id="4-写作并发布"><a href="#4-写作并发布" class="headerlink" title="4.写作并发布"></a>4.写作并发布</h2><h3 id="1-直接写作（情况）"><a href="#1-直接写作（情况）" class="headerlink" title="1.直接写作（情况）"></a>1.直接写作（情况）</h3><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 官网。<br>新建文章，输入以下命令即可</p>
<pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token string">'文章标题'</span></code></pre>
<p>执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。<br>在 Markdown 文章里面输入你的文章内容</p>
<h3 id="2-存查稿-情况"><a href="#2-存查稿-情况" class="headerlink" title="2.存查稿(情况)"></a>2.存查稿(情况)</h3><h4 id="1-首先查看-sources-文件下是否有-drafts-文件夹"><a href="#1-首先查看-sources-文件下是否有-drafts-文件夹" class="headerlink" title="1.首先查看 sources 文件下是否有_drafts 文件夹"></a>1.首先查看 sources 文件下是否有_drafts 文件夹</h4><p>**  _drafts(草稿文章缓存区)，_posts(正式文章缓存区)**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313764893-f9511ad0-1933-4c23-becd-bc162c0e8f3e.png#crop=0&crop=0&crop=1&crop=1&height=149&id=jTsJP&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=782&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24987&status=done&style=none&title=&width=391" alt="image.png"></p>
<p>如果没有该文件夹或者报错，则运行：</p>
<pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token class-name">draft</span> <span class="token string">"My First Blog Post"</span></code></pre>
<h4 id="2-将草稿文章推送到正式区"><a href="#2-将草稿文章推送到正式区" class="headerlink" title="2.将草稿文章推送到正式区"></a>2.将草稿文章推送到正式区</h4><pre class=" language-javascript"><code class="language-javascript">hexo publish <span class="token string">"My First Blog Post"</span></code></pre>
<h3 id="2-打包"><a href="#2-打包" class="headerlink" title="2.打包"></a>2.打包</h3><pre class=" language-javascript"><code class="language-javascript">hexo g</code></pre>
<h3 id="3-运行本地-hexo"><a href="#3-运行本地-hexo" class="headerlink" title="3.运行本地 hexo"></a>3.运行本地 hexo</h3><pre class=" language-javascript"><code class="language-javascript">hexo s</code></pre>
<h3 id="4-部署到-github-和-coding"><a href="#4-部署到-github-和-coding" class="headerlink" title="4.部署到 github 和 coding"></a>4.部署到 github 和 coding</h3><p>因为 github 和 coding 使用了同一个公钥，所以推送时会触发多个仓库。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//部署前先清理一下缓存命令</span>
hexo clean

<span class="token comment" spellcheck="true">//部署</span>
hexo g <span class="token operator">-</span>d</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>7.hexo主题配置</title>
    <url>/leader755/52316.html</url>
    <content><![CDATA[<h2 id="1-hexo-主题官网"><a href="#1-hexo-主题官网" class="headerlink" title="1.hexo 主题官网"></a>1.hexo 主题官网</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>
<h2 id="2-应用以及下载主题"><a href="#2-应用以及下载主题" class="headerlink" title="2.应用以及下载主题"></a>2.应用以及下载主题</h2><p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。（必看）</p>
<h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至<strong>站点目录(**</strong>即根目录下的文件_config.yml 文件*<strong>*)</strong>的  <code>themes</code>  目录下， 然后修改下配置文件即可。next 为主题名</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</span>
$ cd your<span class="token operator">-</span>hexo<span class="token operator">-</span>site
$ git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>iissnan<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>next themes<span class="token operator">/</span>next</code></pre>
<p>###</p>
<h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2.启用主题"></a>2.启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next(主题名)</code>。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588326982972-1828234c-3a21-48e1-ac1e-5b57480ac6f0.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1012&size=24250&status=done&style=none&width=506" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript">theme<span class="token punctuation">:</span> next<span class="token punctuation">;</span></code></pre>
<h4 id="2-1-本文使用的是（hexo-theme-halo）主题"><a href="#2-1-本文使用的是（hexo-theme-halo）主题" class="headerlink" title="2.1 本文使用的是（hexo-theme-halo）主题"></a>2.1 本文使用的是（hexo-theme-halo）主题</h4><p>1&gt;直接下载 git  clone</p>
<pre class=" language-javascript"><code class="language-javascript">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>hongweifuture<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>halo<span class="token punctuation">.</span>git themes<span class="token operator">/</span>halo</code></pre>
<p>2&gt;直接将<code>themes/halo/config/source</code>内所有内容拷贝到<code>Hexo</code>根目录下的<code>source</code>文件夹内替换</p>
<h4 id="2-2-配置切换主题"><a href="#2-2-配置切换主题" class="headerlink" title="2.2 配置切换主题"></a>2.2 配置切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: halo</code><br><code>根目录_config.yml</code> 文件的其它修改建议:</p>
<ul>
<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>[http://xxx.github.io](http://xxx.github.io)</code>）。</li>
<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>
<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>
</ul>
<h3 id="3-验证主题"><a href="#3-验证主题" class="headerlink" title="3.验证主题"></a>3.验证主题</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//最好先清除缓存</span>
hexo clean

<span class="token comment" spellcheck="true">//打包</span>
hexo g

<span class="token comment" spellcheck="true">//启动</span>
hexo s

<span class="token comment" spellcheck="true">//发布到 github</span>
hexo s <span class="token operator">-</span>d</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>主题</tag>
      </tags>
  </entry>
  <entry>
    <title>8.语雀文档同步到 hexo</title>
    <url>/leader755/7381.html</url>
    <content><![CDATA[<h2 id="1-去官网注册账号"><a href="#1-去官网注册账号" class="headerlink" title="1.去官网注册账号"></a><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">1</a>.去官网注册账号</h2><p><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">点我去官网</a></p>
<h2 id="2-创建知识库"><a href="#2-创建知识库" class="headerlink" title="2.创建知识库"></a>2.创建知识库</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588478034103-86a7c5cc-71cb-4fd5-ba96-5eee9a2e8a2f.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=726&size=55017&status=done&style=none&width=363" alt="image.png"></p>
<h2 id="3-点击当前知识库的设置"><a href="#3-点击当前知识库的设置" class="headerlink" title="3.点击当前知识库的设置"></a>3.点击当前知识库的设置</h2><p>获取当前知识库的登录名和路径<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588477857012-0a0094c3-e542-429d-bb28-20cd6d29c941.png#align=left&display=inline&height=531&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1062&originWidth=1828&size=124676&status=done&style=none&width=914" alt="image.png"></p>
<h2 id="4-在将语雀文档同步到-hexo"><a href="#4-在将语雀文档同步到-hexo" class="headerlink" title="4.在将语雀文档同步到 hexo"></a>4.在将语雀文档同步到 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先安装 yuque-hexo</span>
npm i <span class="token operator">-</span>g yuque<span class="token operator">-</span>hexo</code></pre>
<h3 id="1-修改-package-json，增加配置"><a href="#1-修改-package-json，增加配置" class="headerlink" title="1) 修改 package.json，增加配置:"></a>1) 修改 package.json，增加配置:</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"yuqueConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"postPath"</span><span class="token punctuation">:</span> <span class="token string">"source/_posts/yuque"</span><span class="token punctuation">,</span>
    <span class="token string">"cachePath"</span><span class="token punctuation">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>
    <span class="token string">"mdNameFormat"</span><span class="token punctuation">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>
    <span class="token string">"adapter"</span><span class="token punctuation">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>
    <span class="token string">"concurrency"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>
    <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"leader755"</span><span class="token punctuation">,</span>
    <span class="token string">"repo"</span><span class="token punctuation">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>
    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"在语雀上申请的 token"</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublished"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublic"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>postPath</td>
<td>文档同步后生成的路径</td>
<td>source/_posts/yuque</td>
</tr>
<tr>
<td>cachePath</td>
<td>文档下载缓存文件</td>
<td>yuque.json</td>
</tr>
<tr>
<td>mdNameFormat</td>
<td>文件名命名方式 (title / slug)</td>
<td>title</td>
</tr>
<tr>
<td>adapter</td>
<td>文档生成格式 (hexo/markdown)</td>
<td>hexo</td>
</tr>
<tr>
<td>concurrency</td>
<td>下载文章并发数</td>
<td>5</td>
</tr>
<tr>
<td>baseUrl</td>
<td>语雀 API 地址</td>
<td>-</td>
</tr>
<tr>
<td>login</td>
<td>语雀 login (group), 也称为个人路径</td>
<td>-</td>
</tr>
<tr>
<td>repo</td>
<td>语雀仓库短名称，也称为语雀知识库路径</td>
<td>-</td>
</tr>
<tr>
<td>onlyPublished</td>
<td>只展示已经发布的文章</td>
<td>false</td>
</tr>
<tr>
<td>onlyPublic</td>
<td>只展示公开文章</td>
<td>false</td>
</tr>
</tbody></table>
<blockquote>
<p>slug 是语雀的永久链接名，一般是几个随机字母。</p>
</blockquote>
<h3 id="2-在-package-json-添加-scripts"><a href="#2-在-package-json-添加-scripts" class="headerlink" title="2)在 package.json 添加 scripts"></a>2)在 package.json 添加 scripts</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//添加以下命令行</span>
<span class="token punctuation">{</span>
  <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>
  <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>
<span class="token punctuation">}</span></code></pre>
<p>目前为止 scripts 命令行为</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>
    <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>
    <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<h3 id="3）关于在语雀上申请-token"><a href="#3）关于在语雀上申请-token" class="headerlink" title="3）关于在语雀上申请 token"></a>3）关于在语雀上申请 token</h3><p>点击账户个人–&gt;设置 –&gt;Token–&gt;新建 token</p>
<h2 id="5-同步语雀文档到本地-hexo"><a href="#5-同步语雀文档到本地-hexo" class="headerlink" title="5.同步语雀文档到本地 hexo"></a>5.同步语雀文档到本地 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步文档</span>
yuque<span class="token operator">-</span>hexo sync

<span class="token comment" spellcheck="true">//清除本地缓存</span>
yuque<span class="token operator">-</span>hexo clean</code></pre>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>yuque</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Actions自动化部署 hexo博客</title>
    <url>/leader755/60370.html</url>
    <content><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>利用 GitHub Actions 实现博客自动发布，将静态博客页面部署到多个服务器上，比如 GitHub Pages、Gitee pages 、云服务器上。本文介绍使用 GitHub Actions 实现将 Hexo 博客自动编译并发布到 GitHub Pages 上。</p>
<h2 id="2-生成-SSH-秘钥"><a href="#2-生成-SSH-秘钥" class="headerlink" title="2.生成 SSH 秘钥"></a>2.<a href="https://www.yuque.com/leader755/blog/vrcytd" target="_blank" rel="noopener">生成 SSH 秘钥</a></h2><p>生成秘钥用于仓库间的推送：</p>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -f hexo-deploy-key -t rsa -C <span class="token string">"1181012791@qq.com"</span></code></pre>
<blockquote>
<p>一直回车，以上命令会在当前路径下生成公钥和私钥并且命名为 hexo-deploy-key：秘钥 <code>hexo-deploy-key</code> 和公钥 <code>hexo-deploy-key.pub</code>。</p>
</blockquote>
<h2 id="3-准备-2-个-github-仓库"><a href="#3-准备-2-个-github-仓库" class="headerlink" title="3.准备 2 个 github 仓库"></a>3.准备 2 个 github 仓库</h2><p>博客源文件库：<a href="https://github.com/Leader755/blog-master.git" target="_blank" rel="noopener">https://github.com/Leader755/blog-master.git</a><br>页面文件仓库：<a href="https://github.com/Leader755/leader755.github.io.git" target="_blank" rel="noopener">https://github.com/Leader755/leader755.github.io.git</a></p>
<h2 id="4-为-github-仓库配置秘钥"><a href="#4-为-github-仓库配置秘钥" class="headerlink" title="4.为 github 仓库配置秘钥"></a>4.为 github 仓库配置秘钥</h2><blockquote>
<p><strong>目的：源码仓库代码推送到 githubPage 仓库</strong></p>
</blockquote>
<ul>
<li>页面文件仓库（即 <a href="https://leader755.github.io/" target="_blank" rel="noopener">leader755.github.io</a>）:<ul>
<li>在 <code>**Settings &gt; Deploy keys**</code> 中添加 Deploy key，内容为 <code>**hexo-deploy-key.pub**</code> 文件内容，同时勾选 <code>**Allow write access**</code> 选项。</li>
</ul>
</li>
<li>博客源文件库：<ul>
<li>在 <code>**Settings &gt; Secrets**</code> 中添加一个 Secret，名称为 <code>**DEPLOY_KEY**</code>，内容为 <code>**hexo-deploy-key**</code> 文件内容。后续在 Workflow 中通过名称 <strong>DEPLOY_KEY</strong> 使用这个密钥。</li>
</ul>
</li>
</ul>
<h2 id="5-Workflow-配置"><a href="#5-Workflow-配置" class="headerlink" title="5.Workflow 配置"></a>5.Workflow 配置</h2><p>在博客源文件库中新建文件 <code>.github/workflows/deploy.yml</code>，配置内容如下：</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># workflow name</span>
<span class="token key atrule">name</span><span class="token punctuation">:</span> actions single

<span class="token comment" spellcheck="true"># 当有 push 到仓库和外部触发的时候就运行</span>
<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> repository_dispatch<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># YQ_TOKEN</span>
<span class="token comment" spellcheck="true"># YUQUE_GIT_HEXO</span>
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy Hexo Public To Pages
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">env</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai

    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>
      <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout Repository master branch
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@master

      <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Setup Node.js 10.x
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@master
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"10.x"</span>

      <span class="token comment" spellcheck="true">#安装依赖(包含yuque-hexo，此处无需安装) from https://github.com/x-cold/yuque-hexo</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install dependencies
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          npm install hexo-cli -g
          npm install yuque-hexo -g
          npm install</span>

      <span class="token comment" spellcheck="true"># 此处请勿使用hexo clean&amp;&amp;yuque-hexo（重新构建时无需此命令行）同步语雀文章</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> yuque<span class="token punctuation">-</span>hexo sync
        <span class="token key atrule">env</span><span class="token punctuation">:</span>
          <span class="token key atrule">YUQUE_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.YUQUE_TOKEN_HEXO_SYNC_GITHUB_ONLINE<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># from: 这里是YUQUE_TOKEN: $不能随意改</span>
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          hexo clean
          yuque-hexo sync || yuque-hexo sync || yuque-hexo sync  # 用 || 来重试的次数</span>

      <span class="token comment" spellcheck="true"># 生成可访问的文档</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hexo generate
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          hexo g</span>

      <span class="token comment" spellcheck="true"># 生成pages且推送到文件仓库 from https://github.com/peaceiris/actions-gh-pages</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy hexo to Github pages
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.YUQUE_GIT_HEXO <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 此处为 hexo-deploy-key</span>
          <span class="token key atrule">external_repository</span><span class="token punctuation">:</span> Leader755/leader755.github.io
          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> master
          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public
          <span class="token key atrule">commit_message</span><span class="token punctuation">:</span> deploy githubPage
          <span class="token comment" spellcheck="true"># commit_message: ${{ github.event.head_commit.message }}</span></code></pre>
<h2 id="6-效果"><a href="#6-效果" class="headerlink" title="6.效果"></a>6.效果</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646353381466-86a6e57f-599e-4f9a-a69b-65e318cddfd9.png#clientId=uf6df5dba-c62d-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=706&id=ufb52c53d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1412&originWidth=2864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=287456&status=done&style=none&taskId=ua3419686-4e1a-4a88-af1f-4cca4cc049a&title=&width=1432" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 的actions重试</title>
    <url>/leader755/31085.html</url>
    <content><![CDATA[<blockquote>
<p>github 的 actions 中运行失败，重试步骤（或整个作业）</p>
</blockquote>
<h2 id="1-Github-actions-解决办法"><a href="#1-Github-actions-解决办法" class="headerlink" title="1.Github actions 解决办法"></a>1.Github actions 解决办法</h2><p>.github / workflows / test.yml</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> test

<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">]</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">test</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest

    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v1
      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token number">12</span>
      <span class="token punctuation">-</span> <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test
        <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
          npm run lint
          npm test || npm test || npm test</span></code></pre>
<h2 id="2-Github-travis-解决办法"><a href="#2-Github-travis-解决办法" class="headerlink" title="2.Github travis 解决办法"></a>2.Github travis 解决办法</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">script</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> npm run lint
  <span class="token punctuation">-</span> travis_retry npm test</code></pre>
<h2 id="3-Gitlab-CI-解决办法"><a href="#3-Gitlab-CI-解决办法" class="headerlink" title="3.Gitlab CI 解决办法"></a>3.Gitlab CI 解决办法</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">test</span><span class="token punctuation">:</span>
  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test
  <span class="token key atrule">retry</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">script</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> npm run lint
    <span class="token punctuation">-</span> npm test</code></pre>
]]></content>
      <categories>
        <category>前端工程化</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>actions</tag>
      </tags>
  </entry>
  <entry>
    <title>Github域名加上1s，在线VS Code阅读源码神器诞生</title>
    <url>/leader755/18017.html</url>
    <content><![CDATA[<h2 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h2><blockquote>
<ul>
<li>阅读原文请移步：<a href="https://mp.weixin.qq.com/s/ZAkdo3xqcL2IHJhUanqebQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ZAkdo3xqcL2IHJhUanqebQ</a></li>
<li>以下内容为内容简介，详情请查看<a href="https://mp.weixin.qq.com/s/ZAkdo3xqcL2IHJhUanqebQ" target="_blank" rel="noopener">原文链接</a>。</li>
</ul>
</blockquote>
<h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><ul>
<li>以 react 为例子：</li>
<li>原网址： <a href="http://github.com/facebook/react" target="_blank" rel="noopener">http://github.com/facebook/react</a></li>
<li>使用在线 vscode 打开网址：<a href="https://github1s.com/facebook/react" target="_blank" rel="noopener">https://github1s.com/facebook/react</a></li>
<li>是的，你没看错，只需要在原网址 github 后加上 1s 就能实现。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>github 阅读</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客提交百度和Google收录</title>
    <url>/leader755/13299.html</url>
    <content><![CDATA[<p>一个网站的 SEO 对一个网站非常重要，<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/SEO/102990?fr=aladdin" target="_blank" rel="noopener">SEO</a>指的是搜索引擎优化。通过搜索引擎优化，可以提高网站的网站关键词排名以及博客文章的曝光度。一般来说，我们针对百度和 Google 这两个搜索引擎进行优化，提高对网站资源的索引量，使我们的文章更容易被发现。虽然我的博客的主要读者是我自己，但也不妨碍我做些优化，对吧！接下来向大家展示如何使博客被百度和 Google 收录。</p>
<h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>站点地图即<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin" target="_blank" rel="noopener">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p>
<h4 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h4><p>安装百度和 Google 的站点地图生成插件：</p>
<pre><code>npm install hexo-generator-baidu-sitemap --save
npm install hexo-generator-sitemap --save</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>
<pre><code># 自动生成sitemap
sitemap:
  path: sitemap.xml
baidusitemap:
  path: baidusitemap.xml</code></pre><h4 id="生成和部署"><a href="#生成和部署" class="headerlink" title="生成和部署"></a>生成和部署</h4><p>执行生成和部署命令：</p>
<p>此时，进入<code>public</code>目录，你会发现里面有<code>sitemap.xml</code>和<code>baidusitemap.xml</code>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p>
<blockquote>
<ul>
<li>sitemap.xml 用来提交给 Google</li>
<li>baidusitemap.xml 用来提交给百度</li>
</ul>
</blockquote>
<h3 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h3><p>通过百度站长平台进行链接提交，增加网站的索引量。我的这篇文章：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a> 已经提到过 Github 对百度爬虫进行了屏蔽，因此百度爬取不到 Github 上的页面，如果你按照这篇文章同时部署到 Coding 上，那百度就可以抓取到，因为此时百度抓取的是位于 Coding 上的博客网页。</p>
<p>注册并登录百度站长平台：<a href="https://link.jianshu.com/?t=http://zhanzhang.baidu.com/" target="_blank" rel="noopener">百度站长平台</a></p>
<h4 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h4><p>选择添加站点：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-9bca3b38a6c1685d.png#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=982&status=done&style=none&width=982" alt=""></p>
<h4 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h4><p>进行站点验证：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-51233e024040d8d7.png#align=left&display=inline&height=533&margin=%5Bobject%20Object%5D&originHeight=533&originWidth=982&status=done&style=none&width=982" alt=""></p>
<p>这里我们选择<code>文件验证</code>，下载验证文件到本地，放置在<code>themes/next/source</code>目录下。执行生成和部署命令：</p>
<p>点击完成验证即可。</p>
<h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p>
<h5 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h5><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现：</p>
<pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p>
<pre><code>baidu_url_submit:
  count: 5 ## 提交最新的五个链接
  host: www.hui-wang.info ## 百度站长平台中注册的域名
  token: your_token ## 准入秘钥
  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其次，记得查看<code>_config.yml</code>文件中 url 的值， 必须包含是百度站长平台注册的域名， 比如:</p>
<pre><code># URL
url: http://fengdi.org
root: /
permalink: :year/:month/:day/:title.xml</code></pre><p>最后，加入新的 deployer:</p>
<pre><code>deploy:
- type: git ## 这是我原来的deployer
  repo:
  branch:
- type: baidu_url_submitter ## 添加这里内容即可</code></pre><p>其主动推送的实现原理如下：</p>
<ul>
<li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li>
<li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li>
</ul>
<h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>安装自动推送 JS 代码的网页，在页面被访问时，页面 URL 将立即被推送给百度。</p>
<p>修改主题目录下的<code>layout/post.swig</code>文件，末尾添加自动推送代码，代码如下：</p>
<pre><code>&lt;script&gt;
(function(){
    var bp = document.createElement(&#39;script&#39;);
    var curProtocol = window.location.protocol.split(&#39;:&#39;)[0];
    if (curProtocol === &#39;https&#39;) {
        bp.src = &#39;https://zz.bdstatic.com/linksubmit/push.js&#39;;
    }
    else {
        bp.src = &#39;http://push.zhanzhang.baidu.com/push.js&#39;;
    }
    var s = document.getElementsByTagName(&quot;script&quot;)[0];
    s.parentNode.insertBefore(bp, s);
})();
&lt;/script&gt;</code></pre><h5 id="sitemap-提交"><a href="#sitemap-提交" class="headerlink" title="sitemap 提交"></a>sitemap 提交</h5><p>我们之前已经说过如何生成 sitemap 文件，这时就需要我们生成的 sitemap 文件了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-cfb7e4bd12e2deb8.png#align=left&display=inline&height=443&margin=%5Bobject%20Object%5D&originHeight=443&originWidth=981&status=done&style=none&width=981" alt=""></p>
<p>输入以下内容到输入框里：</p>
<pre><code>http://fengdi.org/baidusitemap.xml</code></pre><p>输入验证码后，提交即可。一般情况下，百度会在一个小时内处理该文件，并提取其中的 url。</p>
<h3 id="Google-网站站长"><a href="#Google-网站站长" class="headerlink" title="Google 网站站长"></a>Google 网站站长</h3><p>在提交 Google 之前，要解决一个大家都知道的问题，关于如何登录 Google。这里就不再说了，相信你们有办法。</p>
<h4 id="添加站点-1"><a href="#添加站点-1" class="headerlink" title="添加站点"></a>添加站点</h4><p>登录<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google 网站站长</a>，进入<code>Search Console</code>，点击<code>添加属性</code>进行站点添加：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-9a7ce99e3aaaf1a9.png#align=left&display=inline&height=477&margin=%5Bobject%20Object%5D&originHeight=477&originWidth=1364&status=done&style=none&width=1364" alt=""></p>
<h4 id="验证站点-1"><a href="#验证站点-1" class="headerlink" title="验证站点"></a>验证站点</h4><p>同百度平台一样，下载 Google 验证文件，放到 source 下<code>themes/next/source</code>目录中：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-2a7e8f527d0b1b42.png#align=left&display=inline&height=618&margin=%5Bobject%20Object%5D&originHeight=618&originWidth=1210&status=done&style=none&width=1210" alt=""></p>
<p>重新生成和部署：</p>
<p>部署完成之后，进行验证即可。</p>
<h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><p>在<code>抓取</code>里面，点击<code>站点地图</code>，进行添加：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/5635196-7071aa22f10e2c28.png#align=left&display=inline&height=507&margin=%5Bobject%20Object%5D&originHeight=507&originWidth=1353&status=done&style=none&width=1353" alt=""></p>
<p>好了，到这里文章就结束了。如果你之前没有把网站部署到 Coding 上，你的网站百度是爬取不到的，关于如何部署请参阅：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a></p>
<p><a href="https://link.jianshu.com/?t=http://svend.cc/posts/22980/" target="_blank" rel="noopener">Hexo 系列：（四）Hexo 博客提交百度和 Google 收录</a></p>
<p>文文章转载自：<a href="https://www.jianshu.com/p/f8ec422ebd52" target="_blank" rel="noopener">https://www.jianshu.com/p/f8ec422ebd52</a></p>
<p>**</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>百度收录</tag>
        <tag>谷歌收录</tag>
      </tags>
  </entry>
  <entry>
    <title>Github的jenkins的自动化部署</title>
    <url>/leader755/59468.html</url>
    <content><![CDATA[<h2 id="1-gt-创建项目"><a href="#1-gt-创建项目" class="headerlink" title="1&gt;创建项目"></a>1&gt;创建项目</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606051065895-ad1cd5cf-d131-4c52-9a8a-59df1bdc1eb5.png#crop=0&crop=0&crop=1&crop=1&height=688&id=CYfiK&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1376&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=343612&status=done&style=none&title=&width=1278" alt="image.png"></p>
<h2 id="2-gt-General-设置"><a href="#2-gt-General-设置" class="headerlink" title="2&gt;General 设置"></a>2&gt;General 设置</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606051576608-6cc8989d-1206-4cf1-8535-01f5e183db41.png#crop=0&crop=0&crop=1&crop=1&height=690&id=gbgYZ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1380&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=209155&status=done&style=none&title=&width=1278" alt="image.png"></p>
<h2 id="3-gt-配置源码管理"><a href="#3-gt-配置源码管理" class="headerlink" title="3&gt;配置源码管理"></a>3&gt;配置源码管理</h2><p>1&gt;勾选<code>Git</code>选项之后，就会出现相关的填写项，根据下图的指引来填写就行了</p>
<blockquote>
<ul>
<li>填写项目的 git 地址, eg： <a href="https://github.com/Leader755/leader755.github.io.git" target="_blank" rel="noopener">https://github.com/Leader755/leader755.github.io.git</a></li>
<li>添加 github 用户和密码（要是一个有写权限的 github 账号，此步骤见下图）</li>
<li>选择 githubweb 源码库浏览器，并填上你的项目 URL，这样每次构建都会生成对应的 changes，可直接链到 github 上看变更详情</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606052091783-c4a7fff0-5bdd-49ae-be72-ac8c7a24e6b1.png#crop=0&crop=0&crop=1&crop=1&height=764&id=le67F&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1528&originWidth=1944&originalType=binary&ratio=1&rotation=0&showTitle=false&size=811061&status=done&style=none&title=&width=972" alt="image.png"></p>
<p>2&gt;点击添加增加 Credentials：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606051810554-cbed33af-7f39-416a-bbf8-05f3dff8cedd.png#crop=0&crop=0&crop=1&crop=1&height=513&id=VSzqR&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1026&originWidth=1930&originalType=binary&ratio=1&rotation=0&showTitle=false&size=148714&status=done&style=none&title=&width=965" alt="image.png"></p>
<h2 id="4-gt-构建触发器"><a href="#4-gt-构建触发器" class="headerlink" title="4&gt;构建触发器"></a>4&gt;构建触发器</h2><p>勾选 GitHub hook trigger for GITScm polling 即可<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606052327987-e91ac2b0-a7da-49c6-bb08-1c12b4068c59.png#crop=0&crop=0&crop=1&crop=1&height=263&id=bGMqz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=526&originWidth=2178&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71026&status=done&style=none&title=&width=1089" alt="image.png"></p>
<h2 id="5-gt-github-设置代码变动自动触发构建"><a href="#5-gt-github-设置代码变动自动触发构建" class="headerlink" title="5&gt;github 设置代码变动自动触发构建"></a>5&gt;github 设置代码变动自动触发构建</h2><ul>
<li><strong>github 设置 GitHub webhooks（具体需要持续集成的项目），新建或者设置现有项目的 webhooks 选项，url：部署的服务器的 IP + 端口 + github-webhook</strong></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646407550026-c37091d2-aaf9-445d-bd33-b4edc21c805c.png#clientId=u283f59f9-e4c8-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=787&id=ua95552e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1574&originWidth=2252&originalType=binary&ratio=1&rotation=0&showTitle=false&size=389221&status=done&style=none&taskId=u008884d5-27c4-4d18-9b13-cfe3b42d4ec&title=&width=1126" alt="image.png"></p>
<p>##</p>
<h2 id="5-gt-构建环境配置"><a href="#5-gt-构建环境配置" class="headerlink" title="5&gt;构建环境配置"></a>5&gt;构建环境配置</h2><blockquote>
<p>勾选 Use secret test(s) or file(s),<br>选择绑定 –&gt; 点击新增按钮 –&gt; 选择 Secret text –&gt; 下拉选择，添加 secret token –&gt; 之后应用</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606052439111-0a1b3ab6-6744-4998-91db-ba3b524c4703.png#crop=0&crop=0&crop=1&crop=1&height=488&id=zluVd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=976&originWidth=2006&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153545&status=done&style=none&title=&width=1003" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606052676607-93f4082f-ceab-43ba-969a-e7e8c45661b6.png#crop=0&crop=0&crop=1&crop=1&height=514&id=L0Itc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1028&originWidth=1922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=130883&status=done&style=none&title=&width=961" alt="image.png"></p>
<p>去 github 创建 access token ，将其值填入 secret 中。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620199674550-1a2b7237-d2c4-45c9-9a51-29a073625301.png#clientId=uade9a517-7185-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=777&id=u8ec7a9b0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1554&originWidth=2866&originalType=binary&ratio=1&rotation=0&showTitle=false&size=336738&status=done&style=none&taskId=ub56a21c5-05d7-4c98-8e64-9e52d1cefb0&title=&width=1433" alt="image.png"></p>
<h2 id="5-gt-设置构建"><a href="#5-gt-设置构建" class="headerlink" title="5&gt;设置构建"></a>5&gt;设置构建</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606053494011-dd24f3ea-656b-426c-9e87-1fd8e5f94226.png#crop=0&crop=0&crop=1&crop=1&height=700&id=vg30d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1400&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195440&status=done&style=none&title=&width=1280" alt="image.png"></p>
<p>##</p>
<h2 id="6-gt-设置构建后的操作"><a href="#6-gt-设置构建后的操作" class="headerlink" title="6&gt;设置构建后的操作"></a>6&gt;设置构建后的操作</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606053904769-011124e1-0095-4df8-85cc-3abcbd31dc5a.png#crop=0&crop=0&crop=1&crop=1&height=1097&id=PaE4P&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2194&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=310466&status=done&style=none&title=&width=1280" alt="image.png"></p>
<h2 id="7-gt-设置超时的处理"><a href="#7-gt-设置超时的处理" class="headerlink" title="7&gt;设置超时的处理"></a>7&gt;设置超时的处理</h2><p>解决 jenkins git timeout，设置时间为 60 分钟。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606054780964-8808d4cd-cfa7-41e2-bf69-eab4f3bfa862.png#crop=0&crop=0&crop=1&crop=1&height=445&id=VJGND&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=182896&status=done&style=none&title=&width=1278" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606054616609-57c9bbb6-7697-4271-a12d-88901d115e03.png#crop=0&crop=0&crop=1&crop=1&height=598&id=YmelV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1196&originWidth=2272&originalType=binary&ratio=1&rotation=0&showTitle=false&size=196033&status=done&style=none&title=&width=1136" alt="image.png"></p>
<h2 id="8-gt-其他的构建方式"><a href="#8-gt-其他的构建方式" class="headerlink" title="8&gt;其他的构建方式"></a>8&gt;其他的构建方式</h2><p>gitee 的利用 jenkins 构建，详细请查看[<strong>《gitee 的 jenkin 的自动化部署》</strong>](<a href="https://www.yuque.com/docs/share/0b157b88-5724-4608-a727-2be4f5fe5fd5?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/0b157b88-5724-4608-a727-2be4f5fe5fd5?#</a> 《gitee 的 jenkin 的自动化部署》)</p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 解决GitHub速度慢问题</title>
    <url>/leader755/30871.html</url>
    <content><![CDATA[<h2 id="解决方案是修改-hosts，按照以下三步来操作"><a href="#解决方案是修改-hosts，按照以下三步来操作" class="headerlink" title="解决方案是修改 hosts，按照以下三步来操作"></a>解决方案是修改 hosts，按照以下三步来操作</h2><h3 id="1-打开-hosts-文件："><a href="#1-打开-hosts-文件：" class="headerlink" title="1.打开 hosts 文件："></a>1.打开 hosts 文件：</h3><p>终端执行, MacOS 的登录用户不是 root，没有最高权限。修改一些系统保护的资源时，需要临时切换到 root 用户。root 具有最高权限，可以做任何事情。此时需要使用 sudo 命令。</p>
<pre class=" language-javascript"><code class="language-javascript">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596597386450-28553ab4-298d-455b-bbc7-c1f86aa7a0b8.png#height=362&id=hyEyI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=724&originWidth=1120&originalType=binary&size=236848&status=done&style=none&width=560" alt="image.png"></p>
<h3 id="2-获取-github-的-ip"><a href="#2-获取-github-的-ip" class="headerlink" title="2.获取 github 的 ip"></a>2.获取 github 的 ip</h3><pre><code> 浏览器访问[https://www.ipaddress.com/](https://www.ipaddress.com/),分别输入以下 ip:(ip 以自己查到为准)</code></pre><blockquote>
<p>github.com<br>github.global.ssl.fastly.net<br>codeload.github.com</p>
</blockquote>
<p>获取到的对应的 ip，将以下追加到 host 文件后面。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">140.82</span><span class="token punctuation">.</span><span class="token number">113.4</span>    github<span class="token punctuation">.</span>com
<span class="token number">199.232</span><span class="token punctuation">.</span><span class="token number">69.194</span>  github<span class="token punctuation">.</span>global<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>net
<span class="token number">140.82</span><span class="token punctuation">.</span><span class="token number">114.9</span>    codeload<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com</code></pre>
<blockquote>
<p>mac 上使用 vim 命令进行修改保存：<br>在输入 sudo vim /etc/hosts，进入页面后，按 o 建，进行输入，修改完成后按 ESC 建，:wq 保存退出。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596598235246-bf1c3ead-123e-4339-8f4e-7e6bec14c5d7.png#height=360&id=yMmpw&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=1200&originalType=binary&size=246307&status=done&style=none&width=600" alt="image.png"></p>
<h3 id="3-Mac-系统刷新-DNS-缓存，Windows-系统命令自行查找"><a href="#3-Mac-系统刷新-DNS-缓存，Windows-系统命令自行查找" class="headerlink" title="3.Mac 系统刷新 DNS 缓存，Windows 系统命令自行查找."></a>3.Mac 系统刷新 DNS 缓存，Windows 系统命令自行查找.</h3><pre class=" language-javascript"><code class="language-javascript">sudo killall <span class="token operator">-</span>HUP mDNSResponder</code></pre>
<h3 id="4-可以试试-github-的访问速度了"><a href="#4-可以试试-github-的访问速度了" class="headerlink" title="4.可以试试 github 的访问速度了"></a>4.可以试试 github 的访问速度了</h3>]]></content>
      <categories>
        <category>访问速度</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+ 又拍云创建个人图床工具</title>
    <url>/leader755/50207.html</url>
    <content><![CDATA[<h2 id="1-首先注册又拍云账号"><a href="#1-首先注册又拍云账号" class="headerlink" title="1.首先注册又拍云账号"></a>1.首先注册又拍云账号</h2><p>点击云存储，创建新的云存储服务<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599998647052-f7345059-98b6-42c3-9301-7d90e86b1d70.png#height=498&id=LNt6X&margin=%5Bobject%20Object%5D&name=image.png&originHeight=996&originWidth=2544&originalType=binary&size=148631&status=done&style=none&width=1272" alt="image.png"></p>
<h2 id="2-创建服务"><a href="#2-创建服务" class="headerlink" title="2.创建服务"></a>2.创建服务</h2><p>设置服务名称（唯一的性），加速区域 看自己需求决定。选择暂不授权。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599998887443-d2990b95-c77b-4547-8ac7-e214f4dc4023.png#height=942&id=LNNYx&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1884&originWidth=2472&originalType=binary&size=266401&status=done&style=none&width=1236" alt="image.png"><br>点击创建，创建成功过后会弹出成功框。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599998936673-060b3409-6d08-4985-8174-a9d9b9213291.png#height=661&id=DY09C&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1322&originWidth=2232&originalType=binary&size=229931&status=done&style=none&width=1116" alt="image.png"></p>
<h2 id="3-进入配置，点击进行绑定自己的域名"><a href="#3-进入配置，点击进行绑定自己的域名" class="headerlink" title="3.进入配置，点击进行绑定自己的域名"></a>3.进入配置，点击进行绑定自己的域名</h2><blockquote>
<p>划重点，敲黑板（估计很多同学会搞不清楚，测试域名，博客域名，博客图片域名，有什么关系）<br>这里详细介绍下 ：<br>又拍云测试域名（leader755-upyun.b0.aicdn.com,博客域名(leader755.com),图片的域名（img.leader755.com）<br>说到这里，可能有同学要问，为什么要搞出一个图片域名，直接用博客域名不就行了。博客域名肯定需要作为 A 级域名进行解析，绑定到 ip。所以使用了 图片域名进行解析。</p>
</blockquote>
<h3 id="1-gt-绑定域名（域名需要备案，10-分钟以内审核完毕）"><a href="#1-gt-绑定域名（域名需要备案，10-分钟以内审核完毕）" class="headerlink" title="1&gt;绑定域名（域名需要备案，10 分钟以内审核完毕）"></a>1&gt;绑定域名（域名需要备案，10 分钟以内审核完毕）</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599999259811-6205b1a2-f624-40e6-bd65-9dad75eeb9b6.png#height=666&id=OMZ0C&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1332&originWidth=2298&originalType=binary&size=201493&status=done&style=none&width=1149" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600002000265-b2543dc8-3d7a-41ce-aaf3-717a9fadafe8.png#height=690&id=QbQXz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1380&originWidth=2552&originalType=binary&size=236696&status=done&style=none&width=1276" alt="image.png"></p>
<h3 id="2-gt-去阿里云的域名中解析域名"><a href="#2-gt-去阿里云的域名中解析域名" class="headerlink" title="2&gt;去阿里云的域名中解析域名"></a>2&gt;去阿里云的域名中解析域名</h3><blockquote>
<p><strong>记住必须选择 CNAME，这就是为啥不用直接用博客的域名绑定而用图片域名，博客的域名一般为 A 。</strong> &gt; <strong>到这一步，又拍云的域名绑定子自定义域名，自定义域名解析到又拍云测试域名上。已经完成了域名的绑定了。</strong></p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600002447390-09cd0067-3fc8-4d68-8903-d7d42641359b.png#height=620&id=m00ql&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1240&originWidth=1554&originalType=binary&size=111447&status=done&style=none&width=777" alt="image.png"></p>
<h2 id="4-点击账户管理，添加操作员"><a href="#4-点击账户管理，添加操作员" class="headerlink" title="4.点击账户管理，添加操作员"></a>4.点击账户管理，添加操作员</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595048861058-8644fd49-a611-4466-8248-61fb8a8dc573.png#height=681&id=ykMm9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1362&originWidth=2558&originalType=binary&size=215488&status=done&style=none&width=1279" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600003497722-aac2e4da-1222-4682-84f4-17b12bcf15b0.png#height=559&id=DjoeZ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1118&originWidth=1182&originalType=binary&size=125643&status=done&style=none&width=591" alt="image.png"></p>
<h2 id="5-PicGo-的设置"><a href="#5-PicGo-的设置" class="headerlink" title="5.PicGo 的设置"></a>5.PicGo 的设置</h2><ul>
<li><strong>存储空间和存储员都是自己配置好的，操作密码也是复制好的。</strong></li>
<li><strong>注意的是加速域名最好加上</strong><code>**http/https**</code><strong>，不然会无法在 PicGo 预览</strong></li>
<li><strong>指定存储路径可填可不填</strong></li>
<li><strong>设置网址后缀 可不填（可用来加密）</strong><blockquote>
<p><strong>这里说下我自己的对图片的后缀处理：</strong> &gt; <strong>“?(此处必须使用问好，不然识别有问题)”+”@”+”自定义字母”+”@”+ “文件秘钥” *<em>=》 *</em>?@自定义字母@文件秘钥</strong></p>
</blockquote>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600003658469-54190b09-bd3a-4fee-97c1-6611535cb1bd.png#height=446&id=jVAX2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=892&originWidth=1584&originalType=binary&size=931034&status=done&style=none&width=792" alt="image.png"></p>
<h2 id="6-又拍云的图片加密防盗"><a href="#6-又拍云的图片加密防盗" class="headerlink" title="6.又拍云的图片加密防盗"></a>6.又拍云的图片加密防盗</h2><h3 id="1-gt-开启文件加密"><a href="#1-gt-开启文件加密" class="headerlink" title="1&gt;开启文件加密"></a>1&gt;开启文件加密</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600003879520-54ecd63a-ad4d-4f11-96fb-306875cf7e18.png#height=648&id=p0S2m&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1296&originWidth=2430&originalType=binary&size=255465&status=done&style=none&width=1215" alt="image.png"></p>
<h3 id="2-gt-Referer-防盗链"><a href="#2-gt-Referer-防盗链" class="headerlink" title="2&gt;Referer 防盗链"></a>2&gt;Referer 防盗链</h3><p>访问控制–&gt; Referer 防盗链<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600004636572-e809f82e-050d-4eda-a793-b9887d929924.png#height=249&id=WyNaO&margin=%5Bobject%20Object%5D&name=image.png&originHeight=498&originWidth=2222&originalType=binary&size=65656&status=done&style=none&width=1111" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1600004658635-2217485e-64da-4e93-a0b7-f1aff36ee852.png#height=504&id=H8Vwy&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1008&originWidth=2558&originalType=binary&size=130351&status=done&style=none&width=1279" alt="image.png"></p>
<h3 id="3-gt-其他处理看个人需求"><a href="#3-gt-其他处理看个人需求" class="headerlink" title="3&gt;其他处理看个人需求"></a>3&gt;其他处理看个人需求</h3>]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>又拍云</tag>
      </tags>
  </entry>
  <entry>
    <title>Serverless云函数自动化</title>
    <url>/leader755/33649.html</url>
    <content><![CDATA[<h2 id="1-流程："><a href="#1-流程：" class="headerlink" title="1.流程："></a>1.流程：</h2><p>语雀 webhook→Serverless→github api</p>
<h2 id="2-Serverless-配置"><a href="#2-Serverless-配置" class="headerlink" title="2.Serverless 配置"></a>2.Serverless 配置</h2><blockquote>
<ol>
<li>你得先有腾讯云或者阿里云账户，没有注册的话，这些注册需要验证手机，甚至实名认证。这里以腾讯云为例，在<a href="https://curl.qcloud.com/DgJ9bO9s" target="_blank" rel="noopener">腾讯云</a>中开通 Serverless（无服务架构），有叫函数计算，有叫云函数。</li>
<li>新建云函数，函数名称自己随意，运行环境 Python2.7 创建方式 空白函数 ，点击高级设置，启用 运行角色 为 SCF_QcsRole。</li>
<li>点击完成后，在 函数代码 → 函数管理 复制如下代码做相应修改。</li>
</ol>
</blockquote>
<p>新建 index.py 文件</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf8 -*-</span>
<span class="token keyword">import</span> requests

<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://api.github.com/repos/Leader755/blog-master/dispatches"</span><span class="token punctuation">,</span>
                      json <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"event_type"</span><span class="token punctuation">:</span> <span class="token string">"run-it"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
                      headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">'curl/7.52.1'</span><span class="token punctuation">,</span>
                                 <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json'</span><span class="token punctuation">,</span>
                                 <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/vnd.github.everest-preview+json'</span><span class="token punctuation">,</span>
                                 <span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'token 自己的token'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"This's OK!"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>status_code</code></pre>
<blockquote>
<p>描述：<br>特别注意的是 ‘Authorization’: ‘token bc9aa5a5dfa324545007eab6c1865d’ 这样形式存在的。<br>触发方式如下，没有可以在触发管理中新建触发管理。</p>
<ul>
<li>触发方式：API 网关触发器</li>
<li>API 服务类型：新建 API 服务</li>
<li>API 服务：SCF_API_SERVICE</li>
<li>请求方法：ANY</li>
<li>发布环境：发布</li>
<li>鉴权方法：免鉴权</li>
<li>启动集成响应：未启用</li>
<li>在 触发管理 中能看到访问路径，记下这个访问路径，我们要写入语雀中去</li>
</ul>
</blockquote>
<h2 id="3-在-github-申请-token"><a href="#3-在-github-申请-token" class="headerlink" title="3.在 github 申请 token"></a>3.在 github 申请 token</h2><p>先去登录 GitHub，定位到如此网址 <a href="https://github.com/settings/profile" target="_blank" rel="noopener">https://github.com/settings/profile</a> ，点击 Developer settings，新建一个 token，然后勾选 repo 后确定申请。或点击查看《Github 申请 token》，然后填写好。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646355775441-aa348ea1-e121-4ab6-b231-e1cb0d5ca623.png#clientId=ude0b8dbc-e0fa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=733&id=uc189193b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1466&originWidth=2458&originalType=binary&ratio=1&rotation=0&showTitle=false&size=402845&status=done&style=none&taskId=u9a7fc622-8c01-4769-aee3-a29814a0935&title=&width=1229" alt="image.png"></p>
<h2 id="4-在-gitee-申请-token-扩展"><a href="#4-在-gitee-申请-token-扩展" class="headerlink" title="4.在 gitee 申请 token(扩展)"></a>4.在 gitee 申请 token(扩展)</h2><p>在 gitee 申请 token<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646356085217-4b27e338-a8e2-47f0-9cda-8c333a9550a1.png#clientId=ude0b8dbc-e0fa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=715&id=u1c4eefc4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1430&originWidth=2442&originalType=binary&ratio=1&rotation=0&showTitle=false&size=411653&status=done&style=none&taskId=u505beec1-0e75-4fbe-bfbb-3a8b0255b1c&title=&width=1221" alt="image.png"></p>
]]></content>
      <categories>
        <category>serverless</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat下部署vue项目[history模式]</title>
    <url>/leader755/14064.html</url>
    <content><![CDATA[<h2 id="1-项目发布后通常有两种访问方式，"><a href="#1-项目发布后通常有两种访问方式，" class="headerlink" title="1.项目发布后通常有两种访问方式，"></a>1.项目发布后通常有两种访问方式，</h2><p>第一种： IP+端口直接访问的方式，如 <a href="http://192.168.4.160:6090/" target="_blank" rel="noopener">http://192.168.1.107:8080/</a><br>第二种：IP+端口+项目名，如 <a href="https://links.jianshu.com/go?to=http%3A%2F%2F192.168.4.160%3A6090%2Fhuangshi%2F" target="_blank" rel="noopener">http://192.168.1.107:8080/saas/</a></p>
<h2 id="2-第一种方式：ip-端口（前端后端修改）"><a href="#2-第一种方式：ip-端口（前端后端修改）" class="headerlink" title="2.第一种方式：ip+端口（前端后端修改）"></a>2.第一种方式：ip+端口（前端后端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p>
<p>步骤：</p>
<h3 id="1-修改配置文件-router-js"><a href="#1-修改配置文件-router-js" class="headerlink" title="1.修改配置文件 router.js"></a>1.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将mode值改为history</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
      name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>
      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一"><a href="#2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一" class="headerlink" title="2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)"></a>2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)</h3><p>（此种方式需要删除 ROOT 文件夹下的全部内容，将打包的文件放进去，无需修改配置文件）<br><strong>找到 tomcat 目录，将 tomcat-&gt;ROOT 文件夹中文件全部删除，将打包好的 dist 文件夹中的文件全部放到 ROOT 文件夹中。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579239963286-48f67f71-308e-49dc-9953-8cc2cc1be528.png#align=left&display=inline&height=166&margin=%5Bobject%20Object%5D&name=image.png&originHeight=331&originWidth=1486&size=32467&status=done&style=none&width=743" alt="image.png"></p>
<h3 id="2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一"><a href="#2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一" class="headerlink" title="2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)"></a>2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)</h3><p>(此种方式无需删除 ROOT 文件夹中的内容，只需修改 serve.xml 中的配置)<br><strong>找到 tomcat 目录，修改 tomcat-&gt;conf/server.xml，增加 Context 节点。设置 docBase=”/saas” 。其中的 saas 就是 webapps 目录下的项目名称（文件夹名）</strong><br>**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579153518666-35db848d-44c8-411f-a40d-02dc81ae9ae8.png#align=left&display=inline&height=696&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200116134505.png&originHeight=696&originWidth=1277&size=80321&status=done&style=none&width=1277" alt="微信图片_20200116134505.png"></p>
<h2 id="3-第二种方式：ip-端口-项目名（前端修改）"><a href="#3-第二种方式：ip-端口-项目名（前端修改）" class="headerlink" title="3.第二种方式：ip+端口+项目名（前端修改）"></a>3.第二种方式：ip+端口+项目名（前端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p>
<p>步骤：</p>
<h3 id="1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件："><a href="#1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件：" class="headerlink" title="1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件："></a>1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件：</h3><p>因为是 history 模式, 要防止在路由下刷新变成 404 错误，这需要让 tomcat 都定位到首页，也就是 index.html 页，以往我们使用 Java 写 web 项目部署在 tomcat 时，通常都会有一个 WEB-INF 文件夹，并包含一个 web.xml 文件，而 vue 项目 build 之后只是纯静态资源项目，所以我们需要在 build 之后的 dist 文件夹里新增一个 WEB-INF 文件夹，并新建 web.xml 文件。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579014872343-c8253ec9-d3d5-4b53-bda6-3983472244ae.png#align=left&display=inline&height=421&margin=%5Bobject%20Object%5D&name=image.png&originHeight=842&originWidth=482&size=57023&status=done&style=none&width=241" alt="image.png"></p>
<p><strong>在项目目录下新建**</strong><code>WEB-INF</code>*<strong>*文件夹， 接着在**</strong><code>WEB-INF</code>*<strong>*文件夹下新建 **</strong><code>web.xml</code>*<strong>*文件，内容如下：</strong></p>
<pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0' encoding='UTF-8'?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>
         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scplatform<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2-修改配置文件-router-js"><a href="#2-修改配置文件-router-js" class="headerlink" title="2.修改配置文件 router.js"></a>2.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启history模式需要后端配置404时返回/index.html</span>
  base<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当项目不在根目录时，必须添加子目录路径，否则空白页面</span>
  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// '/saas/home'</span>
      name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>
      component<span class="token punctuation">:</span> home<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-修改-config-文件夹下的-index-js-中配置"><a href="#3-修改-config-文件夹下的-index-js-中配置" class="headerlink" title="3.修改 config 文件夹下的 index.js 中配置"></a>3.修改 config 文件夹下的 index.js 中配置</h3><pre class=" language-javascript"><code class="language-javascript">build<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// Template for index.html</span>
    index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token comment" spellcheck="true">// Paths</span>
    assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//构建输出目录,也就是构建后的东西都扔这里</span>
    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//源子目录 除了index.html，其余的js img css都分在这里</span>

    <span class="token comment" spellcheck="true">/**添加开始**/</span>
    <span class="token comment" spellcheck="true">//tomcat webapps/sass/</span>
    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//需要加上这一行项目目录,一个 / 表示根目录</span>
        <span class="token comment" spellcheck="true">/**添加结束**/</span>
  <span class="token punctuation">}</span></code></pre>
<h3 id="4-webpack-设置不打包文件WEB-INF"><a href="#4-webpack-设置不打包文件WEB-INF" class="headerlink" title="4.webpack 设置不打包文件WEB-INF"></a>4.webpack 设置不打包文件<code>WEB-INF</code></h3><p>到此处已经可以成功配置一个 tomcat 服务下的 vue 的 history 模式的项目，但是不能每次打包去手动<strong>添加和更改新建<code>WEB-INF</code>文件夹</strong>吧，遇到过设置不打包文件 WEB-INF 文件时的配置未生效，导致 WEB-INF 下的 web.xml 文件被打包成 js 文件，导致当前路由刷新报 404 错误。<br>(这个错误找了 好久，以为配置好了，就 Ok 了，由于代码同步问题，没注意可能就发生问题，所以上传服务器前一定要记得检查下<strong><code>WEB-INF</code>文件夹是否存在 web.xml 文件</strong>)</p>
<p><strong>修改 webpack.prod.conf.js 配置</strong></p>
<pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token comment" spellcheck="true">// copy custom static assets</span>
  <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      to<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">,</span>
      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/**添加开始**/</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不打包直接输出的文件</span>
      to<span class="token punctuation">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后静态文件放置位置</span>
      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 忽略规则。（这种写法表示将该文件夹下的所有文件都复制）</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/**添加结束**/</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>关于此处的的设置不打包问题可以自行搜索，关键词：<strong>webpack 设置不打包文件</strong><br>**<br>**</p>
<h3 id="5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式"><a href="#5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式" class="headerlink" title="5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式"></a>5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式</h3><p>项目最终目录如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579015282523-603258d7-6c26-49bd-8f0c-cb6453d65a11.png#align=left&display=inline&height=464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=928&originWidth=504&size=64927&status=done&style=none&width=252" alt="image.png"></p>
<h3 id="6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容："><a href="#6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容：" class="headerlink" title="6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容："></a>6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容：</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  publicPath<span class="token punctuation">:</span> <span class="token string">"/saas"</span><span class="token punctuation">,</span>
  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      hints<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2 id="4-结语"><a href="#4-结语" class="headerlink" title="4.结语"></a>4.结语</h2><p>终于完成了，也是踩了不少坑和加上一些搜索，感觉目前给的文档都不太详细，所以自己写了一篇关于 tomcat 下的 vue 的 history 模式，希望能帮到大家，欢迎大家一起交流。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>history</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>github的 actions 执行定时任务</title>
    <url>/leader755/17809.html</url>
    <content><![CDATA[<h2 id="怎么用-GitHub-action"><a href="#怎么用-GitHub-action" class="headerlink" title="怎么用 GitHub action"></a>怎么用 GitHub action</h2><p>想要使用 GitHub action 的功能，首先需要在 GitHub 上创建一个公开仓库，GitHub action 对公开仓库是不收费的。</p>
<h2 id="创建-hello-GitHub-aciton-工作流"><a href="#创建-hello-GitHub-aciton-工作流" class="headerlink" title="创建 hello GitHub aciton 工作流"></a>创建 hello GitHub aciton 工作流</h2><p>首先，先写一个最简单的 GitHub action 的工作流来直观的看看其需要什么要素，其实很大部分的内容在 GitHub action 的官方文档里将的很清楚了,<a href="https://docs.github.com/en/free-pro-team@latest/actions" target="_blank" rel="noopener">GITHUB ACTION 官方文档</a>。</p>
<p><a href="https://blog.csdn.net/qq_40748336/article/details/110749375" target="_blank" rel="noopener">
</a></p>
<p>1.先创建一个公开的仓库<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1647224225875-63823aa5-8e11-4776-96e4-4054d19cf589.png#clientId=u5bddb04e-ffe9-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=718&id=u2b74f4f0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1436&originWidth=2862&originalType=binary&ratio=1&rotation=0&showTitle=false&size=264638&status=done&style=none&taskId=u3389a2cc-a4d4-493b-8f63-86046b94a2f&title=&width=1431" alt="image.png"></p>
<p>2.进入自己的 GitHub 公开仓库，点击 ACTION 按钮</p>
]]></content>
  </entry>
  <entry>
    <title>halo博客配置oss 云存储</title>
    <url>/leader755/36047.html</url>
    <content><![CDATA[<p>##</p>
<blockquote>
</blockquote>
<h3 id="背景介绍："><a href="#背景介绍：" class="headerlink" title="背景介绍："></a>背景介绍：</h3><blockquote>
<p>Halo 后台上传附件默认是上传到本地服务器，由于放到自己的服务器会影响访问速度，所以就想到使用第三方云存储来存储图片。查看了一下 halo 支持本地服务器、七牛云、又拍云、阿里云、腾讯云、百度云、华为云等主流云存储，这点还是非常的 nice。由于自己一直在使用又拍云，所以本文就介绍如何为 halo 配置又拍云，其他的云存储配置都是大同小异。<br>为什么选择又拍云，原因很简单，因为它免费。【又拍云联盟】是本次的重点，如果你通过我的链接注册又拍云后，如果在使用过程中遇到问题，无偿指导解决问题。欢迎大家一起交流。<br>我的注册链接：<a href="https://console.upyun.com/register/?invite=H1fVoSoVD" target="_blank" rel="noopener">https://console.upyun.com/register/?invite=H1fVoSoVD</a></p>
</blockquote>
<h2 id="1-又拍云配置云存储"><a href="#1-又拍云配置云存储" class="headerlink" title="1.又拍云配置云存储"></a>1.又拍云配置云存储</h2><p>1.登陆到<a href="https://console.upyun.com/register/?invite=H1fVoSoVD" target="_blank" rel="noopener">又拍云控制台</a>，找到云存储，点击【创建服务】，如下图：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619788567612-34dcf344-f316-4301-82c8-b00cfd88f36a.png#clientId=u1dea1de5-a570-4&from=paste&height=637&id=uf5458f7e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1274&originWidth=2576&originalType=binary&size=268191&status=done&style=none&taskId=uf795e13f-2d91-4001-96ac-ff55409a29c&width=1288" alt="image.png"></p>
<p>2.填写相关的配置，按照下图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619788835051-ec2e3a93-e871-4d57-bc8a-1bab4b18636a.png#clientId=u1dea1de5-a570-4&from=paste&height=767&id=u8a8c26d1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1534&originWidth=3238&originalType=binary&size=285487&status=done&style=none&taskId=u1198b4ce-d8af-480a-82d3-c3b8cbf565c&width=1619" alt="image.png"></p>
<p>3.创建操作员，注意权限一定要选【可读写】，然后点击【创建】如下图：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619788930959-0d2fa16e-dd82-4ef1-8e72-489c309fdddd.png#clientId=u1dea1de5-a570-4&from=paste&height=698&id=u98eef71b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1396&originWidth=2948&originalType=binary&size=254619&status=done&style=none&taskId=u53aa7df6-8b7b-42e3-842e-60a5ee15662&width=1474" alt="image.png"> 4.服务创建成功后，进入到下图的页面后，点击【域名绑定】，输入要绑定的域名，后续按照提示操作即可。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619789190176-6799916f-02c3-43c2-8dfa-2f66a4af6358.png#clientId=u1dea1de5-a570-4&from=paste&height=699&id=udffba1fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1398&originWidth=2226&originalType=binary&size=201285&status=done&style=none&taskId=uab459c47-76cd-400e-8b7c-622708f351d&width=1113" alt="image.png"></p>
<hr>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619789455797-84c20f76-3ed7-4fbe-bae7-d8638a048fee.png#clientId=u1dea1de5-a570-4&from=paste&height=336&id=u1ab0a005&margin=%5Bobject%20Object%5D&name=image.png&originHeight=672&originWidth=1452&originalType=binary&size=78889&status=done&style=none&taskId=u8cc9fbc4-e035-471c-a240-f13cdc3b7aa&width=726" alt="image.png"></p>
<p>5.去阿里云解析域名（本人用的是阿里云的）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619789721543-06ecb67f-6322-42f9-ace7-dd33b5e1e040.png#clientId=u1dea1de5-a570-4&from=paste&height=778&id=ua05ace59&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1556&originWidth=2912&originalType=binary&size=282143&status=done&style=none&taskId=u2be92767-d1a8-44b6-8517-29cfe2cc12c&width=1456" alt="image.png"> 5.如果还有疑问也可以查看<a href="https://www.leader755.com/leader755/50207.html">这篇文章</a></p>
<h2 id="2-Halo-后台配置"><a href="#2-Halo-后台配置" class="headerlink" title="2.Halo 后台配置"></a>2.Halo 后台配置</h2><p>登陆 Halo 博客后台，在下图的页面中，输入上一步填写的域名、空间名等信息，然后点击保存即可。然后，从【附件】上传的，在又拍云也可以查看到了。<img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1619790349114-8a59d87c-68f2-48f8-91a2-1391e96f590b.png#clientId=u1dea1de5-a570-4&from=paste&height=775&id=u70ec44ab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1550&originWidth=2438&originalType=binary&size=292900&status=done&style=none&taskId=uc05a7610-7f4b-4b92-872e-eaf888811be&width=1219" alt="image.png"></p>
<h2 id="3-相互学习多多交流"><a href="#3-相互学习多多交流" class="headerlink" title="3.相互学习多多交流"></a>3.相互学习多多交流</h2><p>欢迎访问我的个人博客：<a href="https://www.leader755.com">https://www.leader755.com</a><br>如果觉得本篇文章帮助到了你，点个赞，留个言呗。</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
        <tag>halo 配置云存储</tag>
      </tags>
  </entry>
  <entry>
    <title>halo搭建</title>
    <url>/leader755/48810.html</url>
    <content><![CDATA[<blockquote>
</blockquote>
<h2 id="官方文档：https-docs-halo-run-install-docker"><a href="#官方文档：https-docs-halo-run-install-docker" class="headerlink" title="官方文档：https://docs.halo.run/install/docker"></a>官方文档：<a href="https://docs.halo.run/install/docker" target="_blank" rel="noopener">https://docs.halo.run/install/docker</a></h2><h2 id="1-写在前面"><a href="#1-写在前面" class="headerlink" title="1.写在前面"></a>1.写在前面</h2><ol>
<li>具备一定的 Linux 基础。</li>
<li>具备一定的 Docker 使用基础。</li>
<li>如需域名绑定，请先保证已经正确解析 IP，以及确认服务器是否需要备案。</li>
<li>如需使用 IP 访问，请先确保 Halo 的运行端口已经打开，除非你使用 80 端口运行 Halo。</li>
<li>如 4 所述，如果你使用了类似宝塔面板之类的 Linux 管理面板，可能还需要在面板里设置端口。</li>
<li>不要想当然，请严格按照文档的流程操作。</li>
</ol>
<h2 id="2-环境要求"><a href="#2-环境要求" class="headerlink" title="2.环境要求"></a>2.环境要求</h2><p>为了在使用过程中不出现意外的事故，给出下列推荐的配置</p>
<ul>
<li>CentOS 7.x</li>
<li>1G 以上内存</li>
</ul>
<h2 id="3-更新软件包，安装-docker"><a href="#3-更新软件包，安装-docker" class="headerlink" title="3.更新软件包，安装 docker"></a>3.更新软件包，安装 docker</h2><p>请确保服务器的软件包已经是最新的</p>
<pre class=" language-javascript"><code class="language-javascript">sudo yum update <span class="token operator">-</span>y</code></pre>
<h3 id="1-配置-Docker-运行环境"><a href="#1-配置-Docker-运行环境" class="headerlink" title="1.配置 Docker 运行环境"></a>1.配置 Docker 运行环境</h3><p>如果你已经安装过<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker</a>，请略过此步骤。<br>这里推荐使用官方文档进行安装<a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker</a>。<br><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">https://docs.docker.com/install/linux/docker-ce/centos/</a><br>同时我们也提供一个本土化的安装方法。<br>这里只做演示，个别系统的安装方式可能会不一样，仅供参考。</p>
<h4 id="1-gt-安装必要依赖"><a href="#1-gt-安装必要依赖" class="headerlink" title="1&gt;安装必要依赖"></a>1&gt;安装必要依赖</h4><pre class=" language-javascript"><code class="language-javascript">sudo yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span>data lvm2</code></pre>
<h4 id="2-gt-添加软件源信息"><a href="#2-gt-添加软件源信息" class="headerlink" title="2&gt;添加软件源信息"></a>2&gt;添加软件源信息</h4><pre class=" language-javascript"><code class="language-javascript">sudo yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">--</span>add<span class="token operator">-</span>repo http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo</code></pre>
<h4 id="3-gt-更新-yum-缓存"><a href="#3-gt-更新-yum-缓存" class="headerlink" title="3&gt;更新 yum 缓存"></a>3&gt;更新 yum 缓存</h4><pre class=" language-javascript"><code class="language-javascript">sudo yum makecache fast</code></pre>
<h3 id="2-安装-Docker"><a href="#2-安装-Docker" class="headerlink" title="2.安装 Docker"></a>2.安装 Docker</h3><pre class=" language-javascript"><code class="language-javascript">sudo yum install docker<span class="token operator">-</span>ce docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli containerd<span class="token punctuation">.</span>io</code></pre>
<h3 id="3-启动-Docker-后台服务"><a href="#3-启动-Docker-后台服务" class="headerlink" title="3.启动 Docker 后台服务"></a>3.启动 Docker 后台服务</h3><pre class=" language-javascript"><code class="language-javascript">sudo systemctl start docker</code></pre>
<h3 id="4-配置镜像加速"><a href="#4-配置镜像加速" class="headerlink" title="4.配置镜像加速"></a>4.配置镜像加速</h3><h1 id="新建-daemon-json-文件"><a href="#新建-daemon-json-文件" class="headerlink" title="新建 daemon.json 文件"></a>新建 daemon.json 文件</h1><pre class=" language-javascript"><code class="language-javascript">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>docker<span class="token operator">/</span>daemon<span class="token punctuation">.</span>json</code></pre>
<p>将下面的配置复制进去即可：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"registry-mirrors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://hub-mirror.c.163.com"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre>
<p>注意：修改完配置文件之后需要执行 service docker restart 才可生效。</p>
<h3 id="5-其他方式安装-docker"><a href="#5-其他方式安装-docker" class="headerlink" title="5.其他方式安装 docker"></a>5.其他方式安装 docker</h3><p>请跳转到此篇文章查看详细内容，[<strong>《linux 安装 docker》</strong>](<a href="https://www.yuque.com/docs/share/13e5e304-b57b-41f1-9d79-4698c4933d22?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/13e5e304-b57b-41f1-9d79-4698c4933d22?#</a> 《linux 安装 docker》)</p>
<h2 id="4-安装-Halo"><a href="#4-安装-Halo" class="headerlink" title="4.安装 Halo"></a>4.安装 Halo</h2><h3 id="1-gt-自定义配置文件"><a href="#1-gt-自定义配置文件" class="headerlink" title="1&gt;自定义配置文件"></a>1&gt;自定义配置文件</h3><p>考虑到部分用户的需要，可能需要自定义比如端口等设置项，我们提供了公共的配置文件，并且该配置文件是完全独立于安装包的。当然，你也可以使用安装包内的默认配置文件，但是安装包内的配置文件是不可修改的。请注意：配置文件的路径为~/.halo/application.yaml。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建工作目录</span>
mkdir <span class="token operator">~</span><span class="token regex">/.halo &amp;&amp; cd ~/</span><span class="token punctuation">.</span>halo

# 下载配置文件到 <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo 目录
curl <span class="token operator">-</span>o <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo<span class="token operator">/</span>application<span class="token punctuation">.</span>yaml <span class="token operator">--</span>create<span class="token operator">-</span>dirs https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>run<span class="token operator">/</span>config<span class="token operator">/</span>application<span class="token operator">-</span>template<span class="token punctuation">.</span>yaml</code></pre>
<p>###</p>
<h3 id="2-gt-修改配置文件"><a href="#2-gt-修改配置文件" class="headerlink" title="2&gt;修改配置文件"></a>2&gt;修改配置文件</h3><p>完成上一步操作，我们就可以自己配置 Halo 的运行端口，以及数据库相关的配置了。</p>
<h1 id="使用-Vim-工具修改配置文件"><a href="#使用-Vim-工具修改配置文件" class="headerlink" title="使用 Vim 工具修改配置文件"></a>使用 Vim 工具修改配置文件</h1><pre class=" language-javascript"><code class="language-javascript">vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo<span class="token operator">/</span>application<span class="token punctuation">.</span>yaml</code></pre>
<p>打开之后我们可以看到：</p>
<pre class=" language-javascript"><code class="language-javascript">server<span class="token punctuation">:</span>
  port<span class="token punctuation">:</span> <span class="token number">8090</span>

  # Response data gzip<span class="token punctuation">.</span>
  compression<span class="token punctuation">:</span>
    enabled<span class="token punctuation">:</span> <span class="token boolean">false</span>
spring<span class="token punctuation">:</span>
  datasource<span class="token punctuation">:</span>

    # H2 database configuration<span class="token punctuation">.</span>
    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token punctuation">:</span> org<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>Driver
    url<span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>file<span class="token punctuation">:</span><span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo<span class="token operator">/</span>db<span class="token operator">/</span>halo
    username<span class="token punctuation">:</span> admin
    password<span class="token punctuation">:</span> <span class="token number">123456</span>

    # MySQL database configuration<span class="token punctuation">.</span>
#    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token punctuation">:</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver
#    url<span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">3306</span><span class="token operator">/</span>halodb<span class="token operator">?</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">&amp;</span>serverTimezone<span class="token operator">=</span>Asia<span class="token operator">/</span>Shanghai<span class="token operator">&amp;</span>allowPublicKeyRetrieval<span class="token operator">=</span><span class="token boolean">true</span>
#    username<span class="token punctuation">:</span> root
#    password<span class="token punctuation">:</span> <span class="token number">123456</span>

  # H2 database console configuration<span class="token punctuation">.</span>
  h2<span class="token punctuation">:</span>
    console<span class="token punctuation">:</span>
      settings<span class="token punctuation">:</span>
        web<span class="token operator">-</span>allow<span class="token operator">-</span>others<span class="token punctuation">:</span> <span class="token boolean">false</span>
      path<span class="token punctuation">:</span> <span class="token operator">/</span>h2<span class="token operator">-</span>console
      enabled<span class="token punctuation">:</span> <span class="token boolean">false</span>

halo<span class="token punctuation">:</span>

  # Your admin client path is https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>your<span class="token operator">-</span>domain<span class="token operator">/</span><span class="token punctuation">{</span>admin<span class="token operator">-</span>path<span class="token punctuation">}</span>
  admin<span class="token operator">-</span>path<span class="token punctuation">:</span> admin

  # memory or level （#建议使用level，将数据缓存到磁盘，重启不会清空缓存）
  cache<span class="token punctuation">:</span> memory</code></pre>
<blockquote>
<ol>
<li>如果需要自定义端口，修改 server 节点下的 port 即可。</li>
<li>默认使用的是 H2 Database 数据库，这是一种嵌入式的数据库，使用起来非常方便。需要注意的是，默认的用户名和密码为 admin 和 123456，这个是自定义的，最好将其修改，并妥善保存。</li>
<li>如果需要使用 MySQL 数据库，需要将 H2 Database 的所有相关配置都注释掉，并取消 MySQL 的相关配置。另外，MySQL 的默认数据库名为 halodb，请自行配置 MySQL 并创建数据库，以及修改配置文件中的用户名和密码。</li>
<li>h2 节点为 H2 Database 的控制台配置，默认是关闭的，如需使用请将 h2.console.settings.web-allow-others 和 h2.console.enabled 设置为 true。控制台地址即为域名/h2-console。注意：非紧急情况，不建议开启该配置。</li>
<li>server.compression.enabled 为 Gzip 功能配置，如有需要请设置为 true，需要注意的是，如果你使用 Nginx 或者 Caddy 进行反向代理的话，默认是有开启 Gzip 的，所以这里可以保持默认。</li>
<li>halo.admin-path 为后台管理的根路径，默认为 admin，如果你害怕别人猜出来默认的 admin（就算猜出来，对方什么都做不了），请自行设置。仅支持一级，且前后不带/。</li>
<li>halo.cache 为系统缓存形式的配置，可选 memory 和 level，默认为 memory，将数据缓存到内存，使用该方式的话，重启应用会导致缓存清空。如果选择 level，则会将数据缓存到磁盘，重启不会清空缓存。如不知道如何选择，建议默认。</li>
</ol>
</blockquote>
<h3 id="3-gt-拉取最新-Halo-镜像"><a href="#3-gt-拉取最新-Halo-镜像" class="headerlink" title="3&gt;拉取最新 Halo 镜像"></a>3&gt;拉取最新 Halo 镜像</h3><pre class=" language-javascript"><code class="language-javascript">sudo docker pull halohub<span class="token operator">/</span>halo</code></pre>
<p>###</p>
<h3 id="4-gt-创建容器并运行"><a href="#4-gt-创建容器并运行" class="headerlink" title="4&gt;创建容器并运行"></a>4&gt;创建容器并运行</h3><pre class=" language-javascript"><code class="language-javascript">docker run <span class="token operator">-</span>it <span class="token operator">-</span>d <span class="token operator">--</span>name halo <span class="token operator">-</span>p <span class="token number">8090</span><span class="token punctuation">:</span><span class="token number">8090</span> <span class="token operator">-</span>v <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo<span class="token punctuation">:</span><span class="token regex">/root/</span><span class="token punctuation">.</span>halo <span class="token operator">--</span>restart<span class="token operator">=</span>always halohub<span class="token operator">/</span>halo</code></pre>
<blockquote>
<ol>
<li><strong>-it：</strong>开启输入功能并连接伪终端</li>
<li><strong>-d：</strong>后台运行容器</li>
<li><strong>–name：</strong>为容器指定一个名称</li>
<li><strong>-p：</strong>端口映射，格式为主机(宿主)端口:容器端口，可在 application.yaml 配置。</li>
<li><strong>-v：</strong>工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改。</li>
<li><strong>–restart：</strong>建议设置为 always，在 Docker 启动的时候自动启动 Halo 容器。</li>
</ol>
</blockquote>
<h3 id="5-gt-效果"><a href="#5-gt-效果" class="headerlink" title="5&gt;效果"></a>5&gt;效果</h3><blockquote>
<p>完成以上操作即可通过 ip:端口访问了。不过在此之前，最好先完成后续操作，我们还需要让域名也可以访问到 Halo，请继续看 [《配置域名访问》](<a href="https://www.yuque.com/docs/share/90f6f43b-8035-4a07-860d-2d6a65039e38?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/90f6f43b-8035-4a07-860d-2d6a65039e38?#</a> 《halo 配置 域名和 ssl》)。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620214418523-9d19d9ce-b27c-4102-801d-191695cf52f7.png#height=776&id=udc058c12&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1552&originWidth=2114&originalType=binary&size=158663&status=done&style=none&width=1057" alt="image.png"></p>
<p>###</p>
<h3 id="5-更新-Halo-版本"><a href="#5-更新-Halo-版本" class="headerlink" title="5.更新 Halo 版本"></a>5.更新 Halo 版本</h3><h4 id="1-gt-停止-halo-容器"><a href="#1-gt-停止-halo-容器" class="headerlink" title="1&gt;停止 halo 容器"></a>1&gt;停止 halo 容器</h4><pre class=" language-javascript"><code class="language-javascript">sudo docker stop halo</code></pre>
<h4 id="2-gt-拉取最新的-Halo-镜像"><a href="#2-gt-拉取最新的-Halo-镜像" class="headerlink" title="2&gt;拉取最新的 Halo 镜像"></a>2&gt;拉取最新的 Halo 镜像</h4><pre class=" language-javascript"><code class="language-javascript">sudo docker pull halohub<span class="token operator">/</span>halo</code></pre>
<h4 id="3-gt-更新完毕重启容器"><a href="#3-gt-更新完毕重启容器" class="headerlink" title="3&gt;更新完毕重启容器"></a>3&gt;更新完毕重启容器</h4><pre class=" language-javascript"><code class="language-javascript">docker run <span class="token operator">-</span>it <span class="token operator">-</span>d <span class="token operator">--</span>name halo <span class="token operator">-</span>p <span class="token number">8090</span><span class="token punctuation">:</span><span class="token number">8090</span> <span class="token operator">-</span>v <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>halo<span class="token punctuation">:</span><span class="token regex">/root/</span><span class="token punctuation">.</span>halo <span class="token operator">--</span>restart<span class="token operator">=</span>always halohub<span class="token operator">/</span>halo</code></pre>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
        <tag>halo 主题</tag>
      </tags>
  </entry>
  <entry>
    <title>halo配置 域名和 ssl</title>
    <url>/leader755/63549.html</url>
    <content><![CDATA[<h2 id="1-docker-环境"><a href="#1-docker-环境" class="headerlink" title="1 .docker 环境"></a>1 .docker 环境</h2><blockquote>
<p><strong>假设 docker 的环境已经安装好了。没有安装好的，参考</strong>[<strong>《linux 安装 docker》</strong>](<a href="https://www.yuque.com/docs/share/13e5e304-b57b-41f1-9d79-4698c4933d22?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/13e5e304-b57b-41f1-9d79-4698c4933d22?#</a> 《linux 安装 docker》)<strong>。</strong></p>
</blockquote>
<h2 id="2-已申请好域名"><a href="#2-已申请好域名" class="headerlink" title="2.已申请好域名"></a>2.已申请好域名</h2><h2 id="3-申请-SSL-证书"><a href="#3-申请-SSL-证书" class="headerlink" title="3.申请 SSL 证书"></a>3.申请 SSL 证书</h2><p>我使用的是腾讯云，申请免费的 TrustAsia 的 SSL 证书，阿里云等或者其他平台一般都会提供 TrustAsia 的 SSL 证书的，填好域名等相关信息，一般 10 分钟内就可以下载证书了。</p>
<h2 id="4-配置-Nginx"><a href="#4-配置-Nginx" class="headerlink" title="4.配置 Nginx"></a>4.配置 Nginx</h2><h3 id="1-gt-下载-Halo-官方的-Nginx-配置模板"><a href="#1-gt-下载-Halo-官方的-Nginx-配置模板" class="headerlink" title="1&gt;下载 Halo 官方的 Nginx 配置模板"></a>1&gt;下载 Halo 官方的 Nginx 配置模板</h3><pre class=" language-javascript"><code class="language-javascript">
curl <span class="token operator">-</span>o <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span>halo<span class="token punctuation">.</span>conf <span class="token operator">--</span>create<span class="token operator">-</span>dirs https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>dl<span class="token punctuation">.</span>halo<span class="token punctuation">.</span>run<span class="token operator">/</span>config<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf</code></pre>
<h3 id="2-gt-下载完成之后，使用-vim-编辑-halo-conf"><a href="#2-gt-下载完成之后，使用-vim-编辑-halo-conf" class="headerlink" title="2&gt;下载完成之后，使用 vim 编辑 halo.conf"></a>2&gt;下载完成之后，使用 vim 编辑 halo.conf</h3><pre class=" language-javascript"><code class="language-javascript">vim <span class="token operator">/</span> etc <span class="token operator">/</span> nginx <span class="token operator">/</span> conf<span class="token punctuation">.</span>d <span class="token operator">/</span> halo<span class="token punctuation">.</span>conf<span class="token punctuation">;</span></code></pre>
<p>打开之后我们可以看到</p>
<p>####</p>
<h3 id="3-gt-配置域名"><a href="#3-gt-配置域名" class="headerlink" title="3&gt;配置域名"></a>3&gt;配置域名</h3><h4 id="3-1-gt-不需要-SSL-的情况："><a href="#3-1-gt-不需要-SSL-的情况：" class="headerlink" title="3.1&gt;不需要 SSL 的情况："></a>3.1&gt;不需要 SSL 的情况：</h4><p>编辑内容如下</p>
<pre class=" language-javascript"><code class="language-javascript">server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name example<span class="token punctuation">.</span>com www<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span> #此处可以改为自己的域名

    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_set_header HOST $host<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto $scheme<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Real<span class="token operator">-</span>IP $remote_addr<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>

        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>配置完后，访问 example.com ww. example.com 的请求会被转发到服务器的 8090 端口自己的博客上</p>
<h4 id="3-2-gt-需要-SSL-的情况"><a href="#3-2-gt-需要-SSL-的情况" class="headerlink" title="3.2&gt; 需要 SSL 的情况"></a>3.2&gt; 需要 SSL 的情况</h4><ul>
<li>步骤一：建个目录存放证书文件（不配置 SSL 可忽略），然后把下载的证书放到/data/nginx/conf.d/cert 中</li>
<li>步骤二<ul>
<li><ol>
<li>如果<strong>不需要</strong>访问 http 的时候强制重定向为 https，可以用下面的配置</li>
</ol>
</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"># 非强制重定向https
server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span> #侦听<span class="token number">80</span>端口，如果强制所有的访问都必须是HTTPs的，这行需要注销掉
    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span> #侦听<span class="token number">443</span>端口，用于SSL
    server_name halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  # 自己的域名

    #配置 ssl
       ssl_certificate     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>  # pem文件的路径
    ssl_certificate_key  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span> # key文件的路径

    ssl_session_timeout 5m<span class="token punctuation">;</span>
    ssl_protocols TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>
    ssl_ciphers ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">!</span>DHE<span class="token punctuation">;</span>
    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>

    client_max_body_size 1024m<span class="token punctuation">;</span>

    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_set_header HOST $host<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto $scheme<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Real<span class="token operator">-</span>IP $remote_addr<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">115.159</span><span class="token punctuation">.</span><span class="token number">155.102</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token punctuation">;</span>  # 这里改为自己服务器ip
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<ul>
<li>2.如果<strong>需要</strong>访问 http 的时候强制重定向为 https，可以用下面的配置</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"># 强制重定向
server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span> # 监听<span class="token number">80</span>端口
    server_name halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  # 自己的域名
    #把http的域名请求转成https
    <span class="token keyword">return</span> <span class="token number">301</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>$host$request_uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
server <span class="token punctuation">{</span>
    listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>
    server_name halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  # 自己的域名

    # 配置 ssl
      ssl_certificate     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>  # pem文件的路径
    ssl_certificate_key  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>halo<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span> # key文件的路径

    ssl_session_timeout 5m<span class="token punctuation">;</span>
    ssl_protocols TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>
    ssl_ciphers ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">!</span>DHE<span class="token punctuation">;</span>
    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
    client_max_body_size 1024m<span class="token punctuation">;</span>

    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_set_header HOST $host<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto $scheme<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Real<span class="token operator">-</span>IP $remote_addr<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">115.159</span><span class="token punctuation">.</span><span class="token number">155.102</span><span class="token punctuation">:</span><span class="token number">8090</span><span class="token operator">/</span><span class="token punctuation">;</span> # 这里改为自己服务器ip
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-3-gt-检查配置是否有误并且重载-Nginx-配置"><a href="#3-3-gt-检查配置是否有误并且重载-Nginx-配置" class="headerlink" title="3.3&gt;检查配置是否有误并且重载 Nginx 配置"></a>3.3&gt;检查配置是否有误并且重载 Nginx 配置</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span>sudo nginx <span class="token operator">-</span>t
<span class="token number">2</span><span class="token operator">></span>sudo nginx <span class="token operator">-</span>s reload</code></pre>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>halo</tag>
        <tag>halo 主题</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用的问题指南</title>
    <url>/leader755/52181.html</url>
    <content><![CDATA[<h3 id="1-hexo-g-d-会报错"><a href="#1-hexo-g-d-会报错" class="headerlink" title="1.hexo g -d 会报错"></a>1.hexo g -d 会报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588475689582-0959dce9-cdf9-4e4f-937b-175fcab6f7ce.png#align=left&display=inline&height=127&margin=%5Bobject%20Object%5D&name=image.png&originHeight=254&originWidth=1160&size=179534&status=done&style=none&width=580" alt="image.png"><br>win 本地仓库：将 https 改为 ssh</p>
<pre class=" language-javascript"><code class="language-javascript">deploy：
   type：git
   repo：git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git
   branch：master</code></pre>
<p>mac:</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>问题指南</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客增加音乐播放器功能</title>
    <url>/leader755/44650.html</url>
    <content><![CDATA[<h2 id="1-在-layout-ejs-中-body-标签内粘贴入以下"><a href="#1-在-layout-ejs-中-body-标签内粘贴入以下" class="headerlink" title="1.在 layout.ejs 中 body 标签内粘贴入以下"></a>1.在 layout.ejs 中 body 标签内粘贴入以下</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1611486097780-bb96d811-8890-4e58-b7bf-bf82721b18db.png#height=203&id=R5N0A&margin=%5Bobject%20Object%5D&name=image.png&originHeight=406&originWidth=1636&originalType=binary&size=116762&status=done&style=none&width=818" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>音乐<span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/npm/meting@1.2/dist/Meting.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"player"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"aplayer aplayer-withlist aplayer-fixed"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"3025663508"</span> data<span class="token operator">-</span>server<span class="token operator">=</span><span class="token string">"netease"</span> data<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">"playlist"</span> data<span class="token operator">-</span>order<span class="token operator">=</span><span class="token string">"random"</span> data<span class="token operator">-</span>fixed<span class="token operator">=</span><span class="token string">"true"</span> data<span class="token operator">-</span>listfolded<span class="token operator">=</span><span class="token string">"true"</span> data<span class="token operator">-</span>theme<span class="token operator">=</span><span class="token string">"#2D8CF0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<p>页面就能正常展示了<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1611486237141-002aefbf-0f92-4d92-98bd-0c5a98f73583.png#height=786&id=aYMIn&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1572&originWidth=2878&originalType=binary&size=3107288&status=done&style=none&width=1439" alt="image.png"></p>
<h2 id="2-跳转页面不中段播放"><a href="#2-跳转页面不中段播放" class="headerlink" title="2.跳转页面不中段播放"></a>2.跳转页面不中段播放</h2><p>这个一直都没有效果，试了很多方法，如果有知道的朋友推荐下。待续。</p>
]]></content>
      <categories>
        <category>hexo 博客</category>
      </categories>
      <tags>
        <tag>音乐播放器</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客添加百度统计和Google统计</title>
    <url>/leader755/37600.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>百度统计和 Google 统计主要用于分析网站数据：流量、访客量等。需要注册账号，然后将代码（脚本）嵌入到网站中，然后在后台就会生成对应数据，然后进行分析。</p>
<ul>
<li>百度统计网址：<a href="https://tongji.baidu.com/" target="_blank" rel="noopener">https://tongji.baidu.com</a></li>
<li>Google 统计网址：<a href="https://analytics.google.com/analytics/web/" target="_blank" rel="noopener">https://analytics.google.com/analytics/web/</a></li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601827491229-f73a23b0-7a4c-45c0-8944-476a2271f2bb.png#height=644&id=qoogv&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1288&originWidth=2560&originalType=binary&size=231314&status=done&style=none&width=1280" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601827554009-6fba7cf9-3c2e-4ca8-9cdd-7c62f0441ab6.png#height=685&id=asX1M&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1370&originWidth=2546&originalType=binary&size=231985&status=done&style=none&width=1273" alt="image.png"></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>一般 hexo 博客主题已经集成了百度和谷歌的统计功能，在主题文件下一般可以找到 ：</p>
<blockquote>
<ul>
<li><code>themes\next\layout\_partial\baidu-analytics.ejs</code></li>
<li><code>\themes\next\layout\_partial\google-analytics.ejs</code></li>
</ul>
</blockquote>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 主题的  <code>_config.yml</code>  里正确配置了 <strong>googleAnalytics</strong> 和 *<em>baiduAnalytics *</em></p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true"># Add google analytics configuration</span>
<span class="token comment" spellcheck="true"># 添加 Google Analytics 配置</span>
googleAnalytics<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token keyword">true</span>
  id<span class="token punctuation">:</span> <span class="token constant">UA</span><span class="token operator">-</span><span class="token number">172870061</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true">#谷歌的分析 id</span>

<span class="token comment" spellcheck="true"># Add baidu analytics configuration</span>
<span class="token comment" spellcheck="true"># 添加 baidu Analytics 配置</span>
baiduAnalytics<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token keyword">true</span>
  id<span class="token punctuation">:</span> 74dfb013d45a0618e37b66859a58a159 <span class="token comment" spellcheck="true">#百度的分析 id</span></code></pre>
<h3 id="百度分析代码"><a href="#百度分析代码" class="headerlink" title="百度分析代码"></a>百度分析代码</h3><p><a href="https://tongji.baidu.com/web/10000241351/overview/index" target="_blank" rel="noopener">https://tongji.baidu.com/web/10000241351/overview/index</a><br>百度分析网站首页—&gt;管理–&gt;代码管理–&gt;问号后的字符串–》将该字符串填入<code>_config.yml</code>文件相应的位置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601828543140-11541988-4904-4749-b748-592023b359a7.png#height=679&id=Mk2Iq&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1358&originWidth=2554&originalType=binary&size=363323&status=done&style=none&width=1277" alt="image.png"></p>
<h3 id="Google-全局网站代码"><a href="#Google-全局网站代码" class="headerlink" title="Google 全局网站代码"></a>Google 全局网站代码</h3><p><a href="https://analytics.google.com/analytics/web/#/report-home/a172870001w240092785p230298431" target="_blank" rel="noopener">https://analytics.google.com/analytics/web/#/report-home/a172870001w240092785p230298431</a><br><strong>生成代码：控制台–&gt;（左下角）管理–&gt;管理–&gt;（中间）媒体资源–&gt;（中间）跟踪信息–&gt;跟踪代码</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601829115797-8e037842-d434-43a2-8fd9-6142068f44cb.png#height=685&id=f6jI3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1370&originWidth=2554&originalType=binary&size=407588&status=done&style=none&width=1277" alt="image.png"></p>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>当完成以上，你的代码就可以不知道线上网站了。此时我们就需要检测我们是否已经成功的使用了百度和谷歌的分析。这里推荐一款谷歌插件** <strong>[</strong>Library Sniffe<strong>](<a href="https://chrome.google.com/webstore/detail/library-sniffer/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/library-sniffer/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh?utm_source=chrome-ntp-icon</a>)</strong>r**，<a href="https://chrome.google.com/webstore/detail/library-sniffer/fhhdlnnepfjhlhilgmeepgkhjmhhhjkh?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">点我直达</a>，可以看到当前网站的使用技术或者服务。安装完成后就可以看到当前网站使用了哪些技术。如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601829609075-ea1c6be1-555a-4eaf-9b7c-b710702fb638.png#height=703&id=lhsXM&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1406&originWidth=2430&originalType=binary&size=3408083&status=done&style=none&width=1215" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>百度统计</tag>
        <tag>Google 统计</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的生成永久标题链接</title>
    <url>/leader755/9481.html</url>
    <content><![CDATA[<h2 id="1-hexo-博客默认链接规则："><a href="#1-hexo-博客默认链接规则：" class="headerlink" title="1.hexo 博客默认链接规则："></a>1.hexo 博客默认链接规则：</h2><p><strong>hexo 生成的标题默认规则（年、月、日、标题）：:year/:month/:day/:title。复制后的链接是一长串，非常不利于阅读，也不简洁。</strong></p>
<h2 id="2-解决方案："><a href="#2-解决方案：" class="headerlink" title="2.解决方案："></a>2.解决方案：</h2><h3 id="1-使用hexo-permalink-pinyin"><a href="#1-使用hexo-permalink-pinyin" class="headerlink" title="1.使用hexo-permalink-pinyin"></a>1.使用<a href="">hexo-permalink-pinyin</a></h3><p>将中文转英文，这样方案也存在一定的缺陷，比如修改了文章标题，重新 hexo 三连后，URL 就变了，以前的文章地址变成了 404。而且这样生成的 URL 层级也很深，不利于 SEO。</p>
<h4 id="1-gt-安装-hexo-permalink-pinyin"><a href="#1-gt-安装-hexo-permalink-pinyin" class="headerlink" title="1&gt;安装 hexo-permalink-pinyin"></a>1&gt;安装 hexo-permalink-pinyin</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>
permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>             # Enable <span class="token keyword">this</span> plugin
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span>           # Separator <span class="token keyword">of</span> the slug<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>
  exclude<span class="token punctuation">:</span> <span class="token operator">/</span>ignore_post<span class="token operator">/</span>   # Regex <span class="token keyword">for</span> which post should skip</code></pre>
<p>###</p>
<h3 id="2-使用hexo-abbrlink"><a href="#2-使用hexo-abbrlink" class="headerlink" title="2.使用hexo-abbrlink"></a>2.使用<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></h3><p>生成唯一不变的 URl 链接，链接可以调整自己想要的。弊端</p>
<h4 id="1-gt-安装-hexo-abbrlink"><a href="#1-gt-安装-hexo-abbrlink" class="headerlink" title="1&gt;安装 hexo-abbrlink"></a>1&gt;安装 hexo-abbrlink</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<p>####</p>
<h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink<span class="token punctuation">:</span> post<span class="token operator">/</span><span class="token punctuation">:</span>abbrlink<span class="token punctuation">.</span>html  # 文章的永久链接格式<span class="token punctuation">,</span>post可以自定义
abbrlink<span class="token punctuation">:</span>
  alg<span class="token punctuation">:</span> crc32  # 算法： <span class="token function">crc16</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and crc32
  rep<span class="token punctuation">:</span> hex    # 进制： <span class="token function">dec</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and hex</code></pre>
<p>生成后的博客链接如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588694804547-5dbe637d-46af-4bfc-9b3d-4d5228b573a6.png#align=left&display=inline&height=37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=74&originWidth=908&size=11417&status=done&style=none&width=454" alt="image.png"></p>
<p>如果觉得对你有帮助，点个赞呗。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>永久标签</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客的评论功能</title>
    <url>/leader755/38478.html</url>
    <content><![CDATA[<h2 id="1-这里推荐的评论功能插件为valine"><a href="#1-这里推荐的评论功能插件为valine" class="headerlink" title="1.这里推荐的评论功能插件为valine"></a>1.这里推荐的评论功能插件为<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a></h2><p>官网：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a><br>注册登录网站：<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a><br>      需要实名注册登记，可以使用支付宝来实名认证，很快的，秒过。</p>
<h2 id="2-去leancloud注册"><a href="#2-去leancloud注册" class="headerlink" title="2.去leancloud注册"></a>2.去<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>注册</h2><p>注册完成后去创建应用，选择开发版就可以了。（需要实名登记才能创建应用）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779620815-f8a3fc6e-f667-4959-9cb2-53b5777427c7.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1232&size=83220&status=done&style=none&width=616" alt="image.png"></p>
<h2 id="3-获取-appkey-和-appid"><a href="#3-获取-appkey-和-appid" class="headerlink" title="3.获取 appkey 和 appid"></a>3.获取 appkey 和 appid</h2><p>创建完成应用后，<strong>进入应用-&gt;设置-&gt;应用 key，找到相应的 appkey 和 appid。</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779969891-d05a06f8-bcf5-4b7e-84cb-bcedabc8f762.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=2394&size=185376&status=done&style=none&width=746" alt="image.png"></strong></p>
<h2 id="4-配置主题文件-config-yml"><a href="#4-配置主题文件-config-yml" class="headerlink" title="4.配置主题文件_config.yml"></a>4.配置主题文件_config.yml</h2><p><strong>搜索 valine，一般可看到如下，将 enbled:true, 并填写 appid 和 appkey(从 leancloud 中获取的 appid 和 appkey)。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"># The configuration <span class="token keyword">of</span> the Valine comment module is not activated by <span class="token keyword">default</span><span class="token punctuation">.</span>
# To use it<span class="token punctuation">,</span> activate the configuration item and <span class="token keyword">set</span> appId and appKey<span class="token punctuation">.</span>
# Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey<span class="token punctuation">.</span>
valine<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  appId<span class="token punctuation">:</span>
  appKey<span class="token punctuation">:</span>
  notify<span class="token punctuation">:</span> <span class="token boolean">false</span>
  verify<span class="token punctuation">:</span> <span class="token boolean">false</span>
  visitor<span class="token punctuation">:</span> <span class="token boolean">true</span>
  avatar<span class="token punctuation">:</span> <span class="token string">'mp'</span> # Gravatar style <span class="token punctuation">:</span> mp<span class="token operator">/</span>identicon<span class="token operator">/</span>monsterid<span class="token operator">/</span>wavatar<span class="token operator">/</span>retro<span class="token operator">/</span>hide
  pageSize<span class="token punctuation">:</span> <span class="token number">10</span>
  placeholder<span class="token punctuation">:</span> <span class="token string">'just go go'</span> # Comment Box placeholder
  background<span class="token punctuation">:</span> <span class="token operator">/</span>medias<span class="token operator">/</span>comment_bg<span class="token punctuation">.</span>png</code></pre>
<h2 id="5-配置域名"><a href="#5-配置域名" class="headerlink" title="5.配置域名"></a>5.配置域名</h2><p>在 Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去.</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588780306061-73286643-1359-4efe-b2a1-5545f880dd4a.png#align=left&display=inline&height=500&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1804&size=166396&status=done&style=none&width=902" alt="image.png"></p>
<h2 id="6-重启你的博客"><a href="#6-重启你的博客" class="headerlink" title="6.重启你的博客"></a>6.重启你的博客</h2><p>大功告成！！</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>valine</tag>
        <tag>leancloud</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客站内搜索功能</title>
    <url>/leader755/31782.html</url>
    <content><![CDATA[<h2 id="1-根目录安装插件-hexo-generator-searchdb"><a href="#1-根目录安装插件-hexo-generator-searchdb" class="headerlink" title="1.根目录安装插件 hexo-generator-searchdb"></a>1.根目录安装插件 hexo-generator-searchdb</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>searchdb <span class="token operator">--</span>save</code></pre>
<h2 id="2-配置根目录文件-config-yml"><a href="#2-配置根目录文件-config-yml" class="headerlink" title="2.配置根目录文件_config.yml"></a>2.配置根目录文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
field<span class="token punctuation">:</span> post<span class="token punctuation">;</span>
format<span class="token punctuation">:</span> html<span class="token punctuation">;</span>
limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">;</span></code></pre>
<p>##</p>
<h2 id="3-配置主题文件-config-yml"><a href="#3-配置主题文件-config-yml" class="headerlink" title="3.配置主题文件_config.yml"></a>3.配置主题文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">local_search<span class="token punctuation">:</span> enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre>
<h2 id="4-完成效果图示"><a href="#4-完成效果图示" class="headerlink" title="4.完成效果图示"></a>4.完成效果图示</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588695774509-2476d128-a52b-4d6b-8e64-7269b5c7389b.png#align=left&display=inline&height=568&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1136&originWidth=2180&size=310201&status=done&style=none&width=1090" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客解决不蒜子统计无法显示问题</title>
    <url>/leader755/25342.html</url>
    <content><![CDATA[<p>最近发现博客页面底部的访客统计不蒜子失效了，于是就去查找问题如何解决失效问题了。其实就是因为不蒜子统计的域名过期了，而 js 的引用就会有问题，确实是域名的问题，找到问题之后解决方法就好说了。</p>
<p><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计官网</a></p>
<p>首先需要先找到 主题 下引用不蒜子统计的方法，文件路径为 busuanzi.pure.mini.js 文件，如果搜索不到此文件，可以尝试搜索** busuanzi.pure** 关键词，找到 js 文件，将** js 文件中**的内容替换掉：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1601822019290-506a4920-a79e-482b-9bc8-7db0f858b51e.png#height=604&id=wXxdq&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1208&originWidth=1614&originalType=binary&size=438352&status=done&style=none&width=807" alt="image.png"><br>替换红框部分即可。替换为 “<a href="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js" target="_blank" rel="noopener">https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js</a>“。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>busuanzi</tag>
        <tag>不蒜子失效</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo发布到又拍云和七牛云</title>
    <url>/leader755/44714.html</url>
    <content><![CDATA[<blockquote>
<p><strong>hello，到了这里想必大家已经对，hexo 一键部署到 githubPage 页面很熟悉了吧，大家会考虑页面的 cdn 优化吧。所以这里介绍 几 个额外的插件，其他文章可能介绍不多。</strong></p>
</blockquote>
<h2 id="1-hexo-deployer-upyun-hexo-插件又拍云"><a href="#1-hexo-deployer-upyun-hexo-插件又拍云" class="headerlink" title="1.hexo-deployer-upyun(hexo 插件又拍云)"></a>1.hexo-deployer-upyun(hexo 插件又拍云)</h2><h3 id="1-gt-操作步骤"><a href="#1-gt-操作步骤" class="headerlink" title="1&gt;操作步骤"></a>1&gt;操作步骤</h3><ol>
<li>注册并登录<a href="https://console.upyun.com/register/?invite=H1fVoSoVD" target="_blank" rel="noopener">又拍云</a></li>
<li>新建<a href="https://console.upyun.com/services/create/file/" target="_blank" rel="noopener">云存储服务</a></li>
<li>添加<a href="https://console.upyun.com/account/operators/" target="_blank" rel="noopener">操作员</a></li>
<li>安装插件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>upyun <span class="token operator">--</span>save</code></pre>
<ol start="5">
<li>编辑根目录<code>_config.yml</code>文件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">deploy<span class="token punctuation">:</span>
<span class="token operator">-</span> type<span class="token punctuation">:</span> upyun <span class="token comment" spellcheck="true"># 又拍云</span>
  bucket<span class="token punctuation">:</span> blog<span class="token operator">-</span>leder755 <span class="token comment" spellcheck="true">#服务名(填写自己的)</span>
  operator<span class="token punctuation">:</span> leader5 <span class="token comment" spellcheck="true">#操作员名（填写自己的）</span>
  password<span class="token punctuation">:</span> <span class="token constant">EleCMvRh8lhhsdwhjjj9IKk9Zqu</span> <span class="token comment" spellcheck="true">#操作员密码（填写自己的）</span>
  endpoint<span class="token punctuation">:</span> v0<span class="token punctuation">.</span>api<span class="token punctuation">.</span>upyun<span class="token punctuation">.</span>com
  secret<span class="token punctuation">:</span> secret
  try_times<span class="token punctuation">:</span> <span class="token number">5</span>
  ignore_path_re<span class="token punctuation">:</span>
    dir<span class="token punctuation">:</span> null
    file<span class="token punctuation">:</span> <span class="token string">".DS_Store$"</span></code></pre>
<ol start="6">
<li>部署</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">hexo deploy</code></pre>
<h3 id="2-gt-官方文档"><a href="#2-gt-官方文档" class="headerlink" title="2&gt;官方文档"></a>2&gt;官方文档</h3><p><a href="https://github.com/Menci/hexo-deployer-upyun" target="_blank" rel="noopener">https://github.com/Menci/hexo-deployer-upyun</a></p>
<h2 id="2-hexo-deployer-qiniucloud2-hexo-插件-的七牛云"><a href="#2-hexo-deployer-qiniucloud2-hexo-插件-的七牛云" class="headerlink" title="2.hexo-deployer-qiniucloud2(hexo 插件 的七牛云)"></a>2.hexo-deployer-qiniucloud2(hexo 插件 的七牛云)</h2><h3 id="1-gt-操作步骤-1"><a href="#1-gt-操作步骤-1" class="headerlink" title="1&gt;操作步骤"></a>1&gt;操作步骤</h3><ol>
<li>注册并登录<a href="https://portal.qiniu.com/signup?code=1h7qj4q215b9u" target="_blank" rel="noopener">七牛云</a></li>
<li>新建<a href="https://portal.qiniu.com/bucket/create" target="_blank" rel="noopener">存储空间</a></li>
<li>获取<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">密钥(Access/Secret Key)</a></li>
<li>安装插件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>qiniucloud2 <span class="token operator">--</span>save</code></pre>
<ol start="5">
<li>编辑根目录<code>_config.yml</code>文件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">deploy<span class="token punctuation">:</span>
   type<span class="token punctuation">:</span> qiniu
   accessKey<span class="token punctuation">:</span> <span class="token operator">&lt;</span>accessKey<span class="token operator">></span>
   secretKey<span class="token punctuation">:</span> <span class="token operator">&lt;</span>secretKey<span class="token operator">></span>
   zone<span class="token punctuation">:</span> <span class="token operator">&lt;</span>zone<span class="token operator">></span> <span class="token comment" spellcheck="true"># 华东: Zone_z0, 华北: Zone_z1, 华南: Zone_z2, 北美: Zone_na0, 东南亚: Zone_as0</span>
   scope<span class="token punctuation">:</span> <span class="token operator">&lt;</span>scope<span class="token operator">></span> <span class="token comment" spellcheck="true"># the name of bucket  http://www.a.com/,http://www.b.cn/</span>
   dirsToRefresh<span class="token punctuation">:</span> <span class="token operator">&lt;</span>dirsToRefresh<span class="token operator">></span>  <span class="token comment" spellcheck="true"># default is 3600</span>
   expires<span class="token punctuation">:</span> <span class="token punctuation">[</span>expires<span class="token punctuation">]</span>
   cover<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">true</span><span class="token operator">|</span><span class="token keyword">false</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># default is true</span>
   refreshCdn<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token keyword">true</span><span class="token operator">|</span><span class="token keyword">false</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># default is false</span></code></pre>
<ol start="6">
<li>部署</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">hexo deploy</code></pre>
<h3 id="2-gt-官方文档-1"><a href="#2-gt-官方文档-1" class="headerlink" title="2&gt;官方文档"></a>2&gt;官方文档</h3><p><a href="https://github.com/howardliu-cn/hexo-deployer-qiniucloud2" target="_blank" rel="noopener">https://github.com/howardliu-cn/hexo-deployer-qiniucloud2</a></p>
<h2 id="3-hexo-qiniu-sync-hexo-插件-同步七牛云"><a href="#3-hexo-qiniu-sync-hexo-插件-同步七牛云" class="headerlink" title="3.hexo-qiniu-sync(hexo 插件 同步七牛云)"></a>3.hexo-qiniu-sync(hexo 插件 同步七牛云)</h2><h3 id="1-gt-操作步骤-2"><a href="#1-gt-操作步骤-2" class="headerlink" title="1&gt;操作步骤"></a>1&gt;操作步骤</h3><ol>
<li>注册并登录<a href="https://portal.qiniu.com/signup?code=1h7qj4q215b9u" target="_blank" rel="noopener">七牛云</a></li>
<li>新建<a href="https://portal.qiniu.com/bucket/create" target="_blank" rel="noopener">存储空间</a></li>
<li>获取<a href="https://portal.qiniu.com/user/key" target="_blank" rel="noopener">密钥(Access/Secret Key)</a></li>
<li>安装插件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">npm install hexo<span class="token operator">-</span>qiniu<span class="token operator">-</span>sync <span class="token operator">--</span>save</code></pre>
<ol start="5">
<li>编辑根目录<code>_config.yml</code>文件</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#七牛云存储设置</span>
<span class="token comment" spellcheck="true">##offline       是否离线. 离线状态将使用本地地址渲染</span>
<span class="token comment" spellcheck="true">##sync          是否同步</span>
<span class="token comment" spellcheck="true">##bucket        空间名称.</span>
<span class="token comment" spellcheck="true">##access_key    上传密钥AccessKey</span>
<span class="token comment" spellcheck="true">##secret_key    上传密钥SecretKey</span>
<span class="token comment" spellcheck="true">##secret_file   秘钥文件路径，可以将上述两个属性配置到文件内，防止泄露，json格式。绝对路径相对路径均可</span>
<span class="token comment" spellcheck="true">##dirPrefix     上传的资源子目录前缀.如设置，需与urlPrefix同步</span>
<span class="token comment" spellcheck="true">##urlPrefix     外链前缀.</span>
<span class="token comment" spellcheck="true">##up_host      上传服务器路径,如选择华北区域的话配置为http://up-z1.qiniu.com</span>
<span class="token comment" spellcheck="true">##local_dir     本地目录.</span>
<span class="token comment" spellcheck="true">##update_exist  是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span>
<span class="token comment" spellcheck="true">##image/js/css  子参数folder为不同静态资源种类的目录名称，一般不需要改动</span>
<span class="token comment" spellcheck="true">##image.extend  这是个特殊参数，用于生成缩略图或加水印等操作。具体请参考http://developer.qiniu.com/docs/v6/api/reference/fop/image/</span>
<span class="token comment" spellcheck="true">##              可使用基本图片处理、高级图片处理、图片水印处理这3个接口。例如 ?imageView2/2/w/500 即生成宽度最多500px的缩略图</span>
qiniu<span class="token punctuation">:</span>
  offline<span class="token punctuation">:</span> <span class="token keyword">false</span>
  sync<span class="token punctuation">:</span> <span class="token keyword">true</span>
  bucket<span class="token punctuation">:</span> bucket_name
  secret_file<span class="token punctuation">:</span> sec<span class="token operator">/</span>qn<span class="token punctuation">.</span>json <span class="token keyword">or</span> <span class="token constant">C</span><span class="token punctuation">:</span>
  access_key<span class="token punctuation">:</span> <span class="token constant">AccessKey</span>
  secret_key<span class="token punctuation">:</span> <span class="token constant">SecretKey</span>
  dirPrefix<span class="token punctuation">:</span> static
  urlPrefix<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>bucket_name<span class="token punctuation">.</span>qiniudn<span class="token punctuation">.</span>com<span class="token operator">/</span>static
  up_host<span class="token punctuation">:</span> http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>upload<span class="token punctuation">.</span>qiniu<span class="token punctuation">.</span>com
  local_dir<span class="token punctuation">:</span> static
  update_exist<span class="token punctuation">:</span> <span class="token keyword">true</span>
  image<span class="token punctuation">:</span>
    folder<span class="token punctuation">:</span> images
    extend<span class="token punctuation">:</span>
  js<span class="token punctuation">:</span>
    folder<span class="token punctuation">:</span> js
  css<span class="token punctuation">:</span>
    folder<span class="token punctuation">:</span> css</code></pre>
<ol start="6">
<li>部署</li>
</ol>
<pre class=" language-ruby"><code class="language-ruby">hexo deploy</code></pre>
<h3 id="2-gt-官方文档-2"><a href="#2-gt-官方文档-2" class="headerlink" title="2&gt;官方文档"></a>2&gt;官方文档</h3><p><a href="https://github.com/gyk001/hexo-qiniu-sync" target="_blank" rel="noopener">https://github.com/gyk001/hexo-qiniu-sync</a></p>
<h2 id="4-hexo-博客的官方插件"><a href="#4-hexo-博客的官方插件" class="headerlink" title="4.hexo 博客的官方插件"></a>4.hexo 博客的官方插件</h2><blockquote>
<p>以上所介绍的插件在官方文档中都能找到，之所以在这里有这篇文章，因为可能之前没太关注。更多插件请关注官方插件。</p>
</blockquote>
<p>官方插件网址：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">https://hexo.io/plugins/</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>又拍云</tag>
        <tag>hexo 插件</tag>
        <tag>七牛云</tag>
      </tags>
  </entry>
  <entry>
    <title>input输入框的限制</title>
    <url>/leader755/33767.html</url>
    <content><![CDATA[<h3 id="原生输入对复制粘贴也会生效，但是-vue-中的双向绑定-v-model-会出现，实际值并没有改变而使显示值变化了。"><a href="#原生输入对复制粘贴也会生效，但是-vue-中的双向绑定-v-model-会出现，实际值并没有改变而使显示值变化了。" class="headerlink" title="原生输入对复制粘贴也会生效，但是 vue 中的双向绑定 v-model 会出现，实际值并没有改变而使显示值变化了。"></a>原生输入对复制粘贴也会生效，但是 vue 中的双向绑定 v-model 会出现，实际值并没有改变而使显示值变化了。</h3><h3 id="1-文本框只能输入数字"><a href="#1-文本框只能输入数字" class="headerlink" title="1.文本框只能输入数字"></a>1.文本框只能输入数字</h3><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input onkeyup<span class="token operator">=</span><span class="token string">"this.value=this.value.replace(/\D/g,'')"</span> onafterpaste<span class="token operator">=</span><span class="token string">"this.value=this.value.replace(/\D/g,'')"</span><span class="token operator">></span></code></pre>
<h3 id="2-只能输入数字和小数点"><a href="#2-只能输入数字和小数点" class="headerlink" title="2..只能输入数字和小数点"></a>2..只能输入数字和小数点</h3><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text t_value<span class="token operator">=</span><span class="token string">""</span> o_value<span class="token operator">=</span><span class="token string">""</span> onkeypress<span class="token operator">=</span><span class="token string">"if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;else this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value"</span> onkeyup<span class="token operator">=</span><span class="token string">"if(!this.value.match(/^[\+\-]?\d*?\.?\d*?$/))this.value=this.t_value;else this.t_value=this.value;if(this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?)?$/))this.o_value=this.value"</span> onblur<span class="token operator">=</span><span class="token string">"if(!this.value.match(/^(?:[\+\-]?\d+(?:\.\d+)?|\.\d*?)?$/))this.value=this.o_value;else{if(this.value.match(/^\.\d+$/))this.value=0+this.value;if(this.value.match(/^\.$/))this.value=0;this.o_value=this.value}"</span><span class="token operator">></span></code></pre>
<h3 id="3-输入负数、0、正数，小数点保留-2-位小数"><a href="#3-输入负数、0、正数，小数点保留-2-位小数" class="headerlink" title="3.输入负数、0、正数，小数点保留 2 位小数"></a>3.输入负数、0、正数，小数点保留 2 位小数</h3><pre class=" language-ruby"><code class="language-ruby">function <span class="token function">money</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\d.]/g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>清除<span class="token string">"数字"</span>和<span class="token string">"."</span>以外的字符
  <span class="token operator">/</span><span class="token operator">/</span> obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^-\d.]/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>清除<span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">"数字"</span>和<span class="token string">"."</span>以外的字符
  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\./g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>验证第一个字符是数字而不是字符
  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\.{2,}/g</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>只保留第一个<span class="token punctuation">.</span>清除多余的
  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"$#$"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\./g</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"$#$"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  obj<span class="token punctuation">.</span>value <span class="token operator">=</span> obj<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^(\-)*(\d+)\.(\d\d).*$/</span><span class="token punctuation">,</span><span class="token string">'$1$2.$3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>只能输入两个小数
<span class="token punctuation">}</span></code></pre>
<h4 id="1-gt-输入-0、正数，小数点保留-2-位小数"><a href="#1-gt-输入-0、正数，小数点保留-2-位小数" class="headerlink" title="1&gt;输入 0、正数，小数点保留 2 位小数"></a>1&gt;输入 0、正数，小数点保留 2 位小数</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span><span class="token keyword">else</span> <span class="token symbol">:placeholder</span><span class="token operator">=</span><span class="token string">"changePriceTitleplaceholder"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"ruleFormPrice.raiseNumber"</span> style<span class="token operator">=</span><span class="token string">"width:170px"</span> oninput<span class="token operator">=</span>"this<span class="token punctuation">.</span>value<span class="token operator">=</span>this<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\d.]/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\./g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\.{2,}/g</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'$#$'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\./g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'$#$'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^(\-)*(\d+)\.(\d\d).*$/</span><span class="token punctuation">,</span><span class="token string">'$1$2.$3'</span><span class="token punctuation">)</span>"<span class="token operator">></span>
   <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"suffix"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token constant">PriceType</span> <span class="token operator">?</span> <span class="token string">"元"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span></code></pre>
<h4 id="2-gt-输入负数，0、正数，小数点保留-2-位小数"><a href="#2-gt-输入负数，0、正数，小数点保留-2-位小数" class="headerlink" title="2&gt;输入负数，0、正数，小数点保留 2 位小数"></a>2&gt;输入负数，0、正数，小数点保留 2 位小数</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span><span class="token keyword">else</span> <span class="token symbol">:placeholder</span><span class="token operator">=</span><span class="token string">"changePriceTitleplaceholder"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"ruleFormPrice.raiseNumber"</span> style<span class="token operator">=</span><span class="token string">"width:170px"</span> oninput<span class="token operator">=</span>"this<span class="token punctuation">.</span>value<span class="token operator">=</span>this<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^-\d.]/g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^\./g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\.{2,}/g</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'$#$'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\./g</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'$#$'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^(\-)*(\d+)\.(\d\d).*$/</span><span class="token punctuation">,</span><span class="token string">'$1$2.$3'</span><span class="token punctuation">)</span>"<span class="token operator">></span>
   <span class="token operator">&lt;</span>i slot<span class="token operator">=</span><span class="token string">"suffix"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token constant">PriceType</span> <span class="token operator">?</span> <span class="token string">"元"</span><span class="token punctuation">:</span><span class="token string">"%"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span></code></pre>
<h2 id="vue-的-input-输入框"><a href="#vue-的-input-输入框" class="headerlink" title="vue 的 input 输入框"></a>vue 的 input 输入框</h2><h3 id="一、-input"><a href="#一、-input" class="headerlink" title="一、@input"></a>一、@input</h3><p>适用于实时查询，每输入一个字符都会触发该事件</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"通过乘车人/订单号查询"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputVal"</span> <span class="token variable">@input</span><span class="token operator">=</span><span class="token string">"search"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>
<h3 id="二、-keyup-enter"><a href="#二、-keyup-enter" class="headerlink" title="二、@keyup.enter"></a>二、@keyup.enter</h3><p>该事件与 v-on:input 事件的区别在于：input 事件是实时监控的，每次输入都会调用，而@keyup.enter 事件则是在 pc 上需要点击回车键触发，而在手机上则是需要点击输入键盘上的确定键才可触发。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"通过乘车人/订单号查询"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputVal"</span> <span class="token variable">@keyup</span><span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"search"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>
<p>###</p>
<h3 id="三、-change"><a href="#三、-change" class="headerlink" title="三、@change"></a>三、@change</h3><p>该事件和 enter 事件相似，在手机上都是要经过触发虚拟键盘的搜索键才会触发事件。使用方式同 input 事件。<br>注：在 ios 手机上会出现问题:<br>如果要的效果是输入值不用虚拟键盘触发方法就调查询接口进行查询，这时在安卓手机上没有问题，但是在 ios 手机上会出现多次触发的情况。<br>简单的解决办法：<br>对 input 的值进行监听（watch），把原本需要绑在 input 框的事件在监听变化时调用。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> placeholder<span class="token operator">=</span><span class="token string">"通过乘车人/订单号查询"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"inputVal"</span> <span class="token variable">@change</span><span class="token operator">=</span><span class="token string">"search"</span> <span class="token operator">/</span><span class="token operator">></span>

watch<span class="token punctuation">:</span><span class="token punctuation">{</span>
  <span class="token function">inputVal</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>
        comsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span></code></pre>
<p>###</p>
<h3 id="四、-blur（失焦）"><a href="#四、-blur（失焦）" class="headerlink" title="四、@blur（失焦）"></a>四、@blur（失焦）</h3><p>要满足输入框在输入完成、移到其他地方时进行验证时，需要用到该事件，用此事件进行绑定验证方法即可。<br>注：如果使用 mintui 中的 mt-field 标签时，对应的 blur（失焦）事件要执行时，要用@blur.native.capture=””来代替@blur。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>mt<span class="token operator">-</span>field label<span class="token operator">=</span><span class="token string">"用户名"</span> placeholder<span class="token operator">=</span><span class="token string">"请输入用户名"</span> type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"username"</span> <span class="token variable">@blur</span><span class="token punctuation">.</span>native<span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">"testUser"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>mt<span class="token operator">-</span>field<span class="token operator">></span></code></pre>
]]></content>
      <categories>
        <category>input 输入限制</category>
      </categories>
      <tags>
        <tag>input 输入</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins的nginx反向代理配置域名</title>
    <url>/leader755/4285.html</url>
    <content><![CDATA[<blockquote>
<p>假设 nginx 在目标服务器已经安装好了。没有安装好的，参考[《<strong>centos7 安装 jdk ,maven，tomcat，nginx</strong>》](<a href="https://www.yuque.com/docs/share/954a9630-ae57-4fb0-aff5-cf6371942352?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/954a9630-ae57-4fb0-aff5-cf6371942352?#</a> 《centons7 安装 jdk ,maven，tomcat，nginx》)。</p>
</blockquote>
<h3 id="1-创建-jenkins-conf-文件"><a href="#1-创建-jenkins-conf-文件" class="headerlink" title="1. 创建 jenkins.conf 文件"></a>1. 创建 jenkins.conf 文件</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d  <span class="token comment" spellcheck="true">//进入到nginx 配置目录下</span>
<span class="token number">2</span><span class="token operator">></span>创建文件名为： jenkins<span class="token punctuation">.</span>conf</code></pre>
<p>###</p>
<h3 id="2-配置-jenkins-conf-文件-将以下文件按照自己的实际情况进行复制"><a href="#2-配置-jenkins-conf-文件-将以下文件按照自己的实际情况进行复制" class="headerlink" title="2.配置 jenkins.conf 文件(将以下文件按照自己的实际情况进行复制)"></a>2.配置 jenkins.conf 文件(将以下文件按照自己的实际情况进行复制)</h3><pre class=" language-javascript"><code class="language-javascript">#jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com
server <span class="token punctuation">{</span>
    listen <span class="token number">80</span><span class="token punctuation">;</span>
    server_name jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
    <span class="token keyword">return</span>      <span class="token number">301</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>$server_name$request_uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
server<span class="token punctuation">{</span>
  listen <span class="token number">443</span> ssl<span class="token punctuation">;</span>
    server_name jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
    #SSL<span class="token operator">-</span>START SSL相关配置，请勿删除或修改下一行带注释的<span class="token number">404</span>规则
    #error_page <span class="token number">404</span><span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    ssl_certificate     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>  # pem文件的路径
    ssl_certificate_key  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span> # key文件的路径
    ssl_protocols TLSv1 TLSv1<span class="token number">.1</span> TLSv1<span class="token number">.2</span><span class="token punctuation">;</span>
    ssl_ciphers ECDHE<span class="token operator">-</span>RSA<span class="token operator">-</span>AES128<span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>HIGH<span class="token punctuation">:</span><span class="token operator">!</span>aNULL<span class="token punctuation">:</span><span class="token operator">!</span>MD5<span class="token punctuation">:</span><span class="token operator">!</span>RC4<span class="token punctuation">:</span><span class="token operator">!</span>DHE<span class="token punctuation">;</span>
    ssl_prefer_server_ciphers on<span class="token punctuation">;</span>
    ssl_session_cache shared<span class="token punctuation">:</span>SSL<span class="token punctuation">:</span>10m<span class="token punctuation">;</span>
    ssl_session_timeout 10m<span class="token punctuation">;</span>
    error_page <span class="token number">497</span>  https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>$host$request_uri<span class="token punctuation">;</span>

    #Location配置
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        proxy_set_header X<span class="token operator">-</span>Rea $remote_addr<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>
        proxy_set_header Host $http_host<span class="token punctuation">;</span>
        proxy_set_header X<span class="token operator">-</span>Nginx<span class="token operator">-</span>Proxy <span class="token boolean">true</span><span class="token punctuation">;</span>
        proxy_pass http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>  # 此处改为 <span class="token number">8081</span>，取决于自己之前访问的ip地址的端口号
        proxy_set_header X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto $scheme<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="3-重启-nginx"><a href="#3-重启-nginx" class="headerlink" title="3.重启 nginx"></a>3.重启 nginx</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>保存修改并重启nginx
  <span class="token number">1</span><span class="token operator">></span>ESC<span class="token operator">+</span><span class="token punctuation">:</span><span class="token function">wq</span><span class="token punctuation">(</span>退出并保存<span class="token punctuation">)</span>
  <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># sudo nginx <span class="token operator">-</span>t <span class="token comment" spellcheck="true">// 验证书写是否正确</span>
  <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true">//重启</span>

  <span class="token comment" spellcheck="true">//或者使用下面</span>
  <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># killall <span class="token operator">-</span><span class="token number">9</span> nginx <span class="token comment" spellcheck="true">//强制杀死所有的 nginx 进程</span>
  <span class="token number">5</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># service nginx start <span class="token comment" spellcheck="true">//sha</span></code></pre>
<blockquote>
<p>如果有问题的，请参考<a href="https://www.yuque.com/leader755/blog/mlnd6i#053af2445033b29c3b65eac5df49414a" target="_blank" rel="noopener">《<strong>centos7 安装 jdk ,maven，tomcat，nginx</strong>》</a></p>
</blockquote>
<h3 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620196183660-a109c756-cdb1-4120-a911-befb34c089e5.png#clientId=u63903d62-8fc6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=680&id=ucf64dd5b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1360&originWidth=1646&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121399&status=done&style=none&taskId=uce49f3e8-31b2-4c6b-a593-3ca01369972&title=&width=823" alt="image.png"></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>niginx</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins配置 jdk，maven，git，node</title>
    <url>/leader755/1179.html</url>
    <content><![CDATA[<h2 id="1-centos-中安装-JDK"><a href="#1-centos-中安装-JDK" class="headerlink" title="1.centos 中安装 JDK:"></a>1.centos 中安装 JDK:</h2><pre class=" language-ruby"><code class="language-ruby"><span class="token number">1</span><span class="token operator">></span>查看系统是否已安装 <span class="token function">Java</span><span class="token punctuation">(</span><span class="token constant">Jenkins</span>需要在 <span class="token constant">Java</span> 环境下运行<span class="token punctuation">)</span>
yum list installed <span class="token operator">|</span> grep jdk

<span class="token number">2</span><span class="token operator">></span>yun 安装 java
yum search openjdk
yum <span class="token operator">-</span>y install java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>devel

<span class="token number">3</span><span class="token operator">></span>验证 java 是否安装成功
java <span class="token operator">-</span>version</code></pre>
<h2 id="2-centos-安装-Maven-非必须"><a href="#2-centos-安装-Maven-非必须" class="headerlink" title="2.centos 安装 Maven(非必须):"></a>2.centos 安装 Maven(非必须):</h2><pre class=" language-ruby"><code class="language-ruby"><span class="token number">1</span><span class="token operator">></span>安装 maven
wget http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>repos<span class="token punctuation">.</span>fedorapeople<span class="token punctuation">.</span>org<span class="token operator">/</span>repos<span class="token operator">/</span>dchen<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">/</span>epel<span class="token operator">-</span>apache<span class="token operator">-</span>maven<span class="token punctuation">.</span>repo <span class="token operator">-</span><span class="token constant">O</span> <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>epel<span class="token operator">-</span>apache<span class="token operator">-</span>maven<span class="token punctuation">.</span>repo
yum <span class="token operator">-</span>y install apache<span class="token operator">-</span>maven

<span class="token number">2</span><span class="token operator">></span>验证 <span class="token constant">Maven</span> 是否安装成功
mvn <span class="token operator">-</span>v

<span class="token number">3</span><span class="token operator">></span>卸载 maven
yum remove apache<span class="token operator">-</span>maven</code></pre>
<blockquote>
<p>关于 JDK 和 maven 的安装详细的，请参考<a href="https://www.yuque.com/leader755/blog/mlnd6i#36d395a02bb9c89efdc5687df83e0819" target="_blank" rel="noopener">《<strong>centos7 安装 jdk ,maven，tomcat，nginx</strong>》</a>。</p>
</blockquote>
<h2 id="3-centos-安装-Git"><a href="#3-centos-安装-Git" class="headerlink" title="3.centos 安装 Git"></a>3.centos 安装 Git</h2><pre class=" language-ruby"><code class="language-ruby">yum <span class="token operator">-</span>y install git
git <span class="token operator">--</span>version</code></pre>
<h2 id="4-jenkins-安装-nodejs"><a href="#4-jenkins-安装-nodejs" class="headerlink" title="4.jenkins 安装 nodejs"></a>4.jenkins 安装 nodejs</h2><h3 id="1-gt-node-插件安装"><a href="#1-gt-node-插件安装" class="headerlink" title="1&gt;node 插件安装"></a>1&gt;node 插件安装</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620208745508-261b3fb1-ef17-4464-b022-310933389e95.png#clientId=uadb33ceb-25bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=360&id=u94351d42&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=2804&originalType=binary&ratio=1&rotation=0&showTitle=false&size=136050&status=done&style=none&taskId=u1d26eb07-4abe-4c79-a22d-80766a376d6&title=&width=1402" alt="image.png"></p>
<h2 id="5-Jenkins-中配置-JDK、Maven、Git-和-node"><a href="#5-Jenkins-中配置-JDK、Maven、Git-和-node" class="headerlink" title="5. Jenkins 中配置 JDK、Maven、Git 和 node"></a>5. Jenkins 中配置 JDK、Maven、Git 和 node</h2><p>进入 Manage Jenkins -&gt; Global Tool Configuration，依次配置 JDK、Maven 、Git 和 node 路径。</p>
<h3 id="1-查看-JDK-路径"><a href="#1-查看-JDK-路径" class="headerlink" title="1. 查看 JDK 路径"></a>1. 查看 JDK 路径</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//查看 java</span>
<span class="token punctuation">[</span>root@VM<span class="token number">-0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ls <span class="token operator">-</span>l <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>java
  看到 <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>java 指向了 <span class="token operator">/</span>etc<span class="token operator">/</span>alternatives<span class="token operator">/</span>java，很遗憾，还不是我们要找的真正路径

<span class="token comment" spellcheck="true">//JDK 真正所在的地方 （/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64）</span>
<span class="token punctuation">[</span>root@VM<span class="token number">-0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ls <span class="token operator">-</span>l <span class="token operator">/</span>etc<span class="token operator">/</span>alternatives<span class="token operator">/</span>java
 lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">73</span> <span class="token number">11</span>月 <span class="token number">21</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">30</span> <span class="token operator">/</span>etc<span class="token operator">/</span>alternatives<span class="token operator">/</span>java <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0.272</span><span class="token punctuation">.</span>b10<span class="token number">-1</span><span class="token punctuation">.</span>el7_9<span class="token punctuation">.</span>x86_64<span class="token operator">/</span>jre<span class="token operator">/</span>bin<span class="token operator">/</span>java
</code></pre>
<h3 id="2-gt-查看-maven-路径"><a href="#2-gt-查看-maven-路径" class="headerlink" title="2&gt;查看 maven 路径"></a>2&gt;查看 maven 路径</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//查看</span>
<span class="token punctuation">[</span>root@VM<span class="token number">-0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ls <span class="token operator">-</span>l <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mvn
  lrwxrwxrwx <span class="token number">1</span> root root <span class="token number">31</span> <span class="token number">11</span>月 <span class="token number">21</span> <span class="token number">20</span><span class="token punctuation">:</span><span class="token number">54</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mvn <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">/</span>bin<span class="token operator">/</span>mvn

<span class="token comment" spellcheck="true">//mvn 真正所在的地方 /usr/share/apache-maven/</span>
<span class="token punctuation">[</span>root@VM<span class="token number">-0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ls <span class="token operator">-</span>l  <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">/</span>bin<span class="token operator">/</span>mvn
    rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">1</span> root root <span class="token number">5969</span> <span class="token number">10</span>月 <span class="token number">18</span> <span class="token number">2017</span> <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>apache<span class="token operator">-</span>maven<span class="token operator">/</span>bin<span class="token operator">/</span>mvn
</code></pre>
<p>3&gt;插卡 git 路径</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//查看</span>
<span class="token punctuation">[</span>root@VM<span class="token number">-0</span><span class="token operator">-</span><span class="token number">7</span><span class="token operator">-</span>centos <span class="token operator">~</span><span class="token punctuation">]</span># ls <span class="token operator">-</span>l <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>mvn
 <span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x <span class="token number">113</span> root root <span class="token number">1527752</span> <span class="token number">5</span>月  <span class="token number">29</span> <span class="token number">2020</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>git</code></pre>
<h3 id="3-gt-全局配置-jdk-，mvn-git，node-也可全部选择自动安装"><a href="#3-gt-全局配置-jdk-，mvn-git，node-也可全部选择自动安装" class="headerlink" title="3&gt;全局配置 jdk ，mvn, git，node(也可全部选择自动安装)"></a>3&gt;全局配置 jdk ，mvn, git，node(也可全部选择自动安装)</h3><p>jenkins 面板–》全局配置工具<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606047882164-c17da9e2-6526-4ce3-9e9a-e38d20640439.png#crop=0&crop=0&crop=1&crop=1&height=354&id=iRVgA&margin=%5Bobject%20Object%5D&name=image.png&originHeight=708&originWidth=1880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=67088&status=done&style=none&title=&width=940" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620209685480-06264a43-c0da-4eaf-8c3d-b859d8d4de34.png#clientId=uadb33ceb-25bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=361&id=u210324c5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=722&originWidth=2246&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70037&status=done&style=none&taskId=ub282f6a1-3296-4120-bd63-8ce58d9bde7&title=&width=1123" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620209753638-d6bdd1d2-d865-482d-9282-d1d0a7acbf7d.png#clientId=uadb33ceb-25bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=379&id=ue45b5a8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=758&originWidth=2176&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65134&status=done&style=none&taskId=u77a606fb-9d0e-44aa-bcb9-4709c977171&title=&width=1088" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620209201830-a3796ee3-1cca-4afc-baca-5354ec63c19c.png#clientId=uadb33ceb-25bc-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=773&id=Oc9TH&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1546&originWidth=2858&originalType=binary&ratio=1&rotation=0&showTitle=false&size=220266&status=done&style=none&taskId=u0659ca0d-189e-4a16-b436-6ec1ee1dcd5&title=&width=1429" alt="image.png"></p>
<h2 id="6-nodejs-在-job-中的应用"><a href="#6-nodejs-在-job-中的应用" class="headerlink" title="6.nodejs 在 job 中的应用"></a>6.nodejs 在 job 中的应用</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620210323919-25d3c27f-005a-4e77-8a20-bafbc3c0dc62.png#clientId=u5c8a301e-c27f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=793&id=ua4c82c56&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1586&originWidth=2880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=272376&status=done&style=none&taskId=u65a1aa55-af72-4af9-aee7-ea064a318fb&title=&width=1440" alt="image.png"></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jdk</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 的定时任务crontab</title>
    <url>/leader755/58426.html</url>
    <content><![CDATA[<blockquote>
<p>背景：<br>本人博客的评论为 valine 评论，为了及时知道评论，设置了邮件通知。奈何 leancloud 的每天活跃状态为 16 小时，且半小时内无人访问，则自动进入休眠状态。为了解决这一问题，研究了下 linux 系统自带的 crontab 定时器，通过 定时访问评论网站 去解决这一问题。</p>
</blockquote>
<h2 id="一、认识-crond-服务基本命令"><a href="#一、认识-crond-服务基本命令" class="headerlink" title="一、认识 crond 服务基本命令"></a>一、认识 crond 服务基本命令</h2><h3 id="1-gt-安装-crontab："><a href="#1-gt-安装-crontab：" class="headerlink" title="1&gt;安装 crontab："></a>1&gt;安装 crontab：</h3><pre class=" language-javascript"><code class="language-javascript">yum install crontabs</code></pre>
<h3 id="2-gt-查看-crontab-服务状态："><a href="#2-gt-查看-crontab-服务状态：" class="headerlink" title="2&gt;查看 crontab 服务状态："></a>2&gt;查看 crontab 服务状态：</h3><pre class=" language-javascript"><code class="language-javascript">service crond status</code></pre>
<h3 id="3-gt-手动启动-crontab-服务："><a href="#3-gt-手动启动-crontab-服务：" class="headerlink" title="3&gt;手动启动 crontab 服务："></a>3&gt;手动启动 crontab 服务：</h3><pre class=" language-javascript"><code class="language-javascript">service crond start</code></pre>
<h3 id="4-gt-设置开机自动启动："><a href="#4-gt-设置开机自动启动：" class="headerlink" title="4&gt;设置开机自动启动："></a>4&gt;设置开机自动启动：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//查看是否已经设置为开机启动</span>
ntsysv<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//设置为开机启动</span></code></pre>
<h3 id="5-gt-常用的命令行"><a href="#5-gt-常用的命令行" class="headerlink" title="5&gt;常用的命令行"></a>5&gt;常用的命令行</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//启动服务</span>
service crond start

<span class="token comment" spellcheck="true">//关闭服务</span>
service crond stop

<span class="token comment" spellcheck="true">//重启服务</span>
service crond restart

<span class="token comment" spellcheck="true">//重新载入配置</span>
service crond reload

<span class="token comment" spellcheck="true">//查看crontab服务状态</span>
service crond status

<span class="token comment" spellcheck="true">//列出所有的crontab 任务</span>
crontab <span class="token operator">-</span>l

<span class="token comment" spellcheck="true">//编辑定时任务【删除-添加-修改】</span>
crontab <span class="token operator">-</span>e

<span class="token comment" spellcheck="true">//删除定时任务</span>
crontab <span class="token operator">-</span>r</code></pre>
<h2 id="二、创建一个定时任务"><a href="#二、创建一个定时任务" class="headerlink" title="二、创建一个定时任务"></a>二、创建一个定时任务</h2><h3 id="1-gt-列出定时任务"><a href="#1-gt-列出定时任务" class="headerlink" title="1&gt;列出定时任务"></a>1&gt;列出定时任务</h3><pre class=" language-javascript"><code class="language-javascript">crontab <span class="token operator">-</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果无定时任务</span></code></pre>
<h3 id="2-gt-新建定时任务"><a href="#2-gt-新建定时任务" class="headerlink" title="2&gt;新建定时任务"></a>2&gt;新建定时任务</h3><p>执行如下命令，打开 crontab 定时任务编辑界面，按 I 键进入编辑模式。</p>
<pre class=" language-javascript"><code class="language-javascript">crontab <span class="token operator">-</span> e<span class="token punctuation">;</span></code></pre>
<h3 id="3-gt-添加定时任务"><a href="#3-gt-添加定时任务" class="headerlink" title="3&gt;添加定时任务"></a>3&gt;添加定时任务</h3><blockquote>
<p>设置上午 9 点到凌晨 1 点，每 30 分钟访问一次网站。关于定时任务表达式不懂的去网上搜下。注意 linux 与 下的 crontab 是有些差异的，搜索的时候应当带上 linux。本人就入坑了。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token operator">/</span><span class="token number">30</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>curl https<span class="token punctuation">:</span>www<span class="token punctuation">.</span>baidu<span class="token punctuation">.</span>com</code></pre>
<h2 id="三、定时任务表达式"><a href="#三、定时任务表达式" class="headerlink" title="三、定时任务表达式"></a>三、定时任务表达式</h2><h3 id="1-gt-格式"><a href="#1-gt-格式" class="headerlink" title="1&gt;格式"></a>1&gt;格式</h3><pre class=" language-javascript"><code class="language-javascript">字段名                 允许的值                        允许的特殊字符
秒                    <span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>                            <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span>
分                    <span class="token number">0</span><span class="token operator">-</span><span class="token number">59</span>                            <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span>
小时                  <span class="token number">0</span><span class="token operator">-</span><span class="token number">23</span>                            <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span>
日                    <span class="token number">1</span><span class="token operator">-</span><span class="token number">31</span>                            <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">?</span> <span class="token operator">/</span> L W C
月                    <span class="token number">1</span><span class="token operator">-</span><span class="token number">12</span> or JAN<span class="token operator">-</span>DEC                 <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span>
周几                  <span class="token number">1</span><span class="token operator">-</span><span class="token number">7</span> or SUN<span class="token operator">-</span>SAT                   <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">?</span> <span class="token operator">/</span> L C #
年 <span class="token punctuation">(</span>可选字段<span class="token punctuation">)</span>          empty<span class="token punctuation">,</span> <span class="token number">1970</span><span class="token operator">-</span><span class="token number">2099</span>                 <span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token operator">*</span> <span class="token operator">/</span></code></pre>
<h3 id="2-gt-说明"><a href="#2-gt-说明" class="headerlink" title="2&gt;说明"></a>2&gt;说明</h3><blockquote>
<p>Month<br>一年中的几月：可以用 0-11 或用字符串 “JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV and DEC” 表示</p>
<p>Day-of-Week<br>每周：数字 1-7（1 ＝ 星期日），或用字符口串“SUN, MON, TUE, WED, THU, FRI and SAT”</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span> ：代表整个时间段
<span class="token operator">?</span> ：表示不确定的值
<span class="token punctuation">,</span> ：指定数个值
<span class="token operator">-</span> ：指定一个值的范围
<span class="token operator">/</span> ：指定一个值的增加幅度。n<span class="token operator">/</span>m表示从n开始，每次增加m
L ：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X
W <span class="token function">：指定离给定日期最近的工作日</span><span class="token punctuation">(</span>周一到周五<span class="token punctuation">)</span>
# ：表示该月第几个周X。<span class="token number">6</span>#<span class="token number">3</span>表示该月第<span class="token number">3</span>个周五</code></pre>
<h3 id="3-gt-举例"><a href="#3-gt-举例" class="headerlink" title="3&gt;举例"></a>3&gt;举例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token operator">/</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>  每隔<span class="token number">5</span>秒执行一次
<span class="token number">0</span> <span class="token operator">*</span><span class="token operator">/</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>  每隔<span class="token number">1</span>分钟执行一次
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">23</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>  每天<span class="token number">23</span>点执行一次
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>  每天凌晨<span class="token number">1</span>点执行一次：
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token operator">?</span>  每月<span class="token number">1</span>号凌晨<span class="token number">1</span>点执行一次
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">23</span> L <span class="token operator">*</span> <span class="token operator">?</span>  每月最后一天<span class="token number">23</span>点执行一次
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">*</span> L  每周星期天凌晨<span class="token number">1</span>点实行一次
<span class="token number">0</span> <span class="token number">26</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">33</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span>  在<span class="token number">26</span>分、<span class="token number">29</span>分、<span class="token number">33</span>分执行一次
<span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token operator">?</span> 每天的<span class="token number">0</span>点、<span class="token number">13</span>点、<span class="token number">18</span>点、<span class="token number">21</span>点都执行一次</code></pre>
<h2 id="三、定时任务相关网站推荐"><a href="#三、定时任务相关网站推荐" class="headerlink" title="三、定时任务相关网站推荐"></a>三、定时任务相关网站推荐</h2><ul>
<li><strong>设置 cron 定时的网站：</strong><a href="https://console.cron-job.org/jobs" target="_blank" rel="noopener"><strong>https://console.cron-job.org/jobs</strong></a></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1621173755251-72853e3d-28e8-432f-84ee-3df3b588bb78.png#clientId=uba7a3344-3d2c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=765&id=u62766af0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1530&originWidth=2880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=330274&status=done&style=none&taskId=u1e54fd58-9b6f-44e5-bea3-9f517ec5ac1&title=&width=1440" alt="image.png"></p>
<ul>
<li>** 效验表达式的网站：<strong>[</strong><a href="https://tool.lu/crontab**](https://tool.lu/crontab)" target="_blank" rel="noopener">https://tool.lu/crontab**](https://tool.lu/crontab)</a></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1621172152399-18980836-1323-4a95-9c4a-1a674ded214d.png#clientId=u0bdf43c1-5e9e-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=632&id=uf28d6180&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1264&originWidth=1904&originalType=binary&ratio=1&rotation=0&showTitle=false&size=188811&status=done&style=none&taskId=u489fd11e-183e-466e-8497-5d1ec82d008&title=&width=952" alt="image.png"></p>
]]></content>
      <categories>
        <category>crontab</category>
      </categories>
      <tags>
        <tag>crontab</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux安装 docker</title>
    <url>/leader755/10309.html</url>
    <content><![CDATA[<h2 id="1、安装前置条件"><a href="#1、安装前置条件" class="headerlink" title="1、安装前置条件"></a>1、安装前置条件</h2><p>docker 要求 Linux 内核要 3.0 以上版本，如果 centos6.x 内核是 2.x，需要升级 linux 内核</p>
<h2 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h2><h3 id="1）升级本地-yum-包"><a href="#1）升级本地-yum-包" class="headerlink" title="1）升级本地 yum 包"></a>1）升级本地 yum 包</h3><pre class=" language-javascript"><code class="language-javascript">yum update</code></pre>
<h3 id="2）-安装工具集"><a href="#2）-安装工具集" class="headerlink" title="2） 安装工具集"></a>2） 安装工具集</h3><pre class=" language-javascript"><code class="language-javascript">yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span>data lvm2</code></pre>
<h3 id="3）安装阿里云-docker-源"><a href="#3）安装阿里云-docker-源" class="headerlink" title="3）安装阿里云 docker 源"></a>3）安装阿里云 docker 源</h3><pre class=" language-javascript"><code class="language-javascript">sudo yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">--</span>add<span class="token operator">-</span>repo https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo</code></pre>
<h3 id="4）更新-yum-缓存"><a href="#4）更新-yum-缓存" class="headerlink" title="4）更新 yum 缓存"></a>4）更新 yum 缓存</h3><pre class=" language-javascript"><code class="language-javascript">yum makecache fast
yum clean  all</code></pre>
<h3 id="5）安装-docker"><a href="#5）安装-docker" class="headerlink" title="5）安装 docker"></a>5）安装 docker</h3><pre class=" language-javascript"><code class="language-javascript">yum <span class="token operator">-</span>y install docker<span class="token operator">-</span>ce</code></pre>
<h3 id="6）启动-docker-服务"><a href="#6）启动-docker-服务" class="headerlink" title="6）启动 docker 服务"></a>6）启动 docker 服务</h3><pre class=" language-javascript"><code class="language-javascript">service docker start</code></pre>
<h3 id="7）查看-docker-版本"><a href="#7）查看-docker-版本" class="headerlink" title="7）查看 docker 版本"></a>7）查看 docker 版本</h3><pre class=" language-javascript"><code class="language-javascript">docker <span class="token operator">-</span> v<span class="token punctuation">;</span></code></pre>
<h3 id="8）开机启动-docker-服务"><a href="#8）开机启动-docker-服务" class="headerlink" title="8）开机启动 docker 服务"></a>8）开机启动 docker 服务</h3><pre class=" language-javascript"><code class="language-javascript">systemctl enable docker<span class="token punctuation">.</span>service</code></pre>
<h2 id="3-docker-设置镜像-未设置镜像"><a href="#3-docker-设置镜像-未设置镜像" class="headerlink" title="3.docker 设置镜像(未设置镜像)"></a>3.docker 设置镜像(未设置镜像)</h2><blockquote>
<p>docker pull 很慢解决办法，经常拉取镜像的时候很慢或者拉不下来，这里可以使用阿里云镜像加速器，然后试试看有没有效果</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">##使用阿里云镜像加速器
[root@localhost ~]# mkdir -p /etc/docker

[root@localhost ~]# tee /etc/docker/daemon.json <<-'EOF'
{
  "registry-mirrors": ["https://9cpn8tt6.mirror.aliyuncs.com"]
}
EOF

[root@localhost ~]# systemctl daemon-reload
[root@localhost ~]# systemctl restart docker</code></pre>
<h2 id="4-docker-服务启动-重启-关闭命令"><a href="#4-docker-服务启动-重启-关闭命令" class="headerlink" title="4.docker 服务启动,重启,关闭命令"></a>4.docker 服务启动,重启,关闭命令</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span>docker官网地址  https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span>

<span class="token number">2</span><span class="token operator">></span>docker命令
  启动：systemctl start docker
    重启：sudo service docker restart
  守护进程重启 sudo systemctl daemon<span class="token operator">-</span>reload
  关闭 docker service docker stop
  关闭 docker systemctl stop docker</code></pre>
<h2 id="5-Docker-退出容器但不关闭当前容器"><a href="#5-Docker-退出容器但不关闭当前容器" class="headerlink" title="5.Docker 退出容器但不关闭当前容器"></a>5.Docker 退出容器但不关闭当前容器</h2><hr>
<p>方法一：如果要正常退出不关闭容器，请按 Ctrl+P+Q 进行退出容器</p>
<hr>
<p>方法二：如果使用 exit 退出，那么在退出之后会关闭容器，可以使用下面的流程进行恢复</p>
<ul>
<li>使用 docker restart 命令重启容器</li>
<li>使用 docker attach 命令进入容器</li>
</ul>
<p>重启 httpd（service httpd restart）和 radosgw(/etc/init.d/ceph-radosgw restart)，并且使用 wget 验证是否将 radosgw 重启成功(wget <a href="http://127.0.0.1/" target="_blank" rel="noopener">http://127.0.0.1</a>)</p>
<h2 id="6-Docker-删除镜像"><a href="#6-Docker-删除镜像" class="headerlink" title="6.Docker 删除镜像"></a>6.Docker 删除镜像</h2><blockquote>
<pre><code>Docker：删除images报错（Error response from daemon: conflict: unable to delete 6885a5e3712a (must be forced) - image is being used by stopped container 0cf27d7d29c7）</code></pre></blockquote>
<pre class=" language-shell"><code class="language-shell">1.进入root权限
sudo su

2.停止所有的container，这样才能够删除其中的images：
docker stop $(docker ps -a -q)

如果想要删除所有container的话再加一个指令：
docker rm $(docker ps -a -q)

3.查看当前有些什么images
docker images

4.删除images，通过image的id来指定删除谁
docker rmi

想要删除untagged images，也就是那些id为的image的话可以用
docker rmi $(docker images | grep "^<none>" | awk '{print $3}')

要删除全部image的话
docker rmi $(docker images -q)</code></pre>
<p>1、删除容器实例</p>
<blockquote>
<p>docker rm 容器 ID 或容器名</p>
<ol>
<li>先 docker ps -a 寻找已经停止运行的实例<br>2.docker rm 59ec 删除实例<br>3.docker ps -a 查看实例已经删除<br>具体操作如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1605628630199-471ec578-4dbb-4698-9bee-35e1501e9d4f.png#crop=0&crop=0&crop=1&crop=1&height=269&id=jUyrG&originHeight=269&originWidth=1307&originalType=binary&ratio=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=1307" alt=""><br>如果容器实例在运行状态下 是不能通过上面的命令删除的，会提示容器实例正在运行中。需要先停止在删除,不会停止实例的看这里<a href="https://blog.csdn.net/Michel4Liu/article/details/80889977" target="_blank" rel="noopener">https://blog.csdn.net/Michel4Liu/article/details/80889977</a>，也可以通过参数强制删除<br>参数：<br>-f : 通过 SIGKILL 信号强制删除一个运行中的容器,主要删除正在运行的容器实例<br>-l : 移除容器间的网络连接，而非容器本身<br>-v : 删除容器挂载卷</li>
</ol>
</blockquote>
<p>2、删除镜像</p>
<blockquote>
<p>docker rmi 容器 ID 或容器名</p>
<ol>
<li>首先 docker images 查看所有镜像</li>
<li>然后 docker rmi fe200 删除镜像 3.再次通过 docker images 查看镜像 发现已经删除<br>具体操作如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1605628630192-3c1c37e2-3250-4ea1-b537-dd41489dcb10.png#crop=0&crop=0&crop=1&crop=1&height=441&id=INqi8&originHeight=441&originWidth=1014&originalType=binary&ratio=1&rotation=0&showTitle=false&size=0&status=done&style=none&title=&width=1014" alt=""><br>如果删除的镜像已经产生了容器实例(run 过)不容器实例是否启动都会提示无法删除，因为被占用。这时需要先删除容器实例或添加删除参数<br>参数<br>-f :强制删除，一般用于被占用的删除<br>–no-prune :不移除该镜像的过程镜像，默认移除</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 使用 homebrew</title>
    <url>/leader755/65348.html</url>
    <content><![CDATA[<p>使用 brew update 指令</p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>Error: The following directories are not writable by your user:<br>/usr/local/sbin<br>/usr/local/share/man/man5<br>/usr/local/share/man/man7</p>
<p>解决办法：</p>
<pre class=" language-javascript"><code class="language-javascript">sudo chown <span class="token operator">-</span>R <span class="token function">$</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token operator">*</span></code></pre>
<p>重新调用即可：</p>
<pre><code>brew update</code></pre>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 上使用brew安装 nvm</title>
    <url>/leader755/59816.html</url>
    <content><![CDATA[<h2 id="1-nvm-介绍"><a href="#1-nvm-介绍" class="headerlink" title="1.nvm 介绍"></a>1.nvm 介绍</h2><blockquote>
<p>当我们使用 node 开发网站时，可能会同时需要运行多个项目，每个项目所使用当 node 版本又不相同，或者当我们需要学习新的 node 时，多个版本之间的切换和维护会变得非常麻烦和棘手。nvm 的出现就是为了解决这个问题。详细介绍请看<a href="http://nvm.uihtm.com/" target="_blank" rel="noopener">nvm 官网</a>。</p>
</blockquote>
<h3 id="1-1-区分-nvm，node，npm"><a href="#1-1-区分-nvm，node，npm" class="headerlink" title="1.1   区分 nvm，node，npm"></a>1.1   区分 nvm，node，npm</h3><blockquote>
<ul>
<li>区别：<ul>
<li>nvm：nodejs 版本管理工具。<br>也就是说：一个 nvm 可以管理很多 node 版本和 npm 版本。</li>
<li>nodejs：在项目开发时的所需要的代码库</li>
<li>npm：nodejs 包管理工具。<br>在安装的 nodejs 的时候，npm 也会跟着一起安装，它是包管理工具。<br>npm 管理 nodejs 中的第三方插件</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>关联：<ul>
<li>nvm 管理 nodejs 和 npm 的版本。npm 可以管理 nodejs 的第三方插件。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="2-安装-nvm"><a href="#2-安装-nvm" class="headerlink" title="2.安装 nvm"></a>2.安装 nvm</h2><blockquote>
<p>此处选择 mac 系统自带的 Homebrew 安装 nvm。</p>
</blockquote>
<pre><code>Homebrew是一款Mac OS平台下的软件包管理工具，拥有安装、卸载、更新、查看、搜索等很多实用的功能。简单的一条指令，就可以实现包管理，而不用你关心各种依赖和文件路径的情况，十分方便快捷。</code></pre><p>简单来说，Homebrew 提供 Apple 没有预装但你需要的东西。详情请见<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew 官网</a> 。</p>
<h3 id="2-1-安装-Homebrew"><a href="#2-1-安装-Homebrew" class="headerlink" title="2.1 安装 Homebrew"></a>2.1 安装 Homebrew</h3><ul>
<li>检查电脑是否有安装 Homebrew，在终端输入</li>
</ul>
<pre class=" language-shell"><code class="language-shell">brew -v  //检查 brew 的版本

//已安装：则出现版本号，则表示已安装Homebrew
//未安装：-bash: brew: command not found</code></pre>
<ul>
<li>未安装则在终端执行（已安装则跳过）：</li>
</ul>
<pre class=" language-shell"><code class="language-shell">//安装Homebrew
/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

//安装完成查看版本号，
brew -v</code></pre>
<h3 id="2-2-使用-Homebrew-安装-nvm"><a href="#2-2-使用-Homebrew-安装-nvm" class="headerlink" title="2.2 使用 Homebrew 安装 nvm"></a>2.2 使用 Homebrew 安装 nvm</h3><ul>
<li>在终端输入命令：</li>
</ul>
<pre class=" language-shell"><code class="language-shell">brew install nvm</code></pre>
<ul>
<li>安装成功后不能直接使用 nvm 命令，</li>
</ul>
<blockquote>
<p>安装成功之后，还不能直接使用 nvm 命令，需要进行以下配置，将以下命令复制到终端执行：</p>
</blockquote>
<pre class=" language-shell"><code class="language-shell">echo "source $(brew --prefix nvm)/nvm.sh" >> .bash_profile

. ~/.bash_profile   //需要重新定向来源</code></pre>
<ul>
<li>执行 nvm 命令</li>
</ul>
<pre class=" language-shell"><code class="language-shell">nvm list</code></pre>
<blockquote>
<p>如果未曾安装 node，则显示为空。<br>如果安装了 node，则可查看当前电脑中安装的 node 版本。</p>
</blockquote>
<h2 id="3-nvm-常用命令介绍"><a href="#3-nvm-常用命令介绍" class="headerlink" title="3.nvm 常用命令介绍"></a>3.nvm 常用命令介绍</h2><pre class=" language-shell"><code class="language-shell">nvm list 是查找本电脑上所有的node版本
    - nvm list 查看已经安装的版本
    - nvm list installed 查看已经安装的版本
    - nvm list available 查看网络可以安装的版本

nvm install <version> 安装指定版本node
nvm uninstall <version> 卸载制定的版本
nvm install stable ## 安装最新稳定版 node，当前是node v9.5.0 (npm v5.6.0)
nvm install <version> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可nvm install 4.4

nvm use <version> ##切换使用指定的版本node
nvm -v 查看当前的版本

nvm ls ## 列出所有安装的版本
nvm ls-remote ## 列出所有远程服务器的版本（官方node version list）
nvm current ## 显示当前的版本

nvm alias <name> <version> ## 给不同的版本号添加别名
nvm unalias <name> ## 删除已定义的别名

nvm reinstall-packages <version> ## 在当前版本 node 环境下，重新全局安装指定版本号的 npm 包

nvm on 打开nodejs控制
nvm off 关闭nodejs控制
nvm proxy 查看设置与代理
nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/
nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是： https://github.com/npm/npm/archive/.

nvm use [version] [arch] 切换制定的node版本和位数
nvm root [path] 设置和查看root路径</code></pre>
]]></content>
      <categories>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>serverless 和 hexo快速搭建静态博客</title>
    <url>/leader755/2093.html</url>
    <content><![CDATA[<p>##</p>
<h2 id="1-首先搭建一个用-hexo-快速搭建一个博客"><a href="#1-首先搭建一个用-hexo-快速搭建一个博客" class="headerlink" title="1.首先搭建一个用 hexo 快速搭建一个博客"></a>1.首先搭建一个用 hexo 快速搭建一个博客</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装脚手架 hexo-cli</span>
npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g

<span class="token comment" spellcheck="true">//初始化一个 blog</span>
hexo init blog

<span class="token comment" spellcheck="true">//访问本地博客(默认地址为：localhost:4000)</span>
cd blog
hexo s</code></pre>
<h2 id="2-serverless-文档（推荐）"><a href="#2-serverless-文档（推荐）" class="headerlink" title="2.serverless 文档（推荐）"></a>2.serverless 文档（推荐）</h2><p>github 官方中文文档：<a href="https://github.com/serverless/serverless/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/serverless/serverless/blob/master/README_CN.md</a><br>serverless 中文博客： <a href="https://serverlesscloud.cn/" target="_blank" rel="noopener">https://serverlesscloud.cn/</a></p>
<h2 id="3-使用-npm-安装"><a href="#3-使用-npm-安装" class="headerlink" title="3.使用 npm 安装"></a>3.使用 npm 安装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装 serverless</span>
npm install <span class="token operator">-</span>g serverless</code></pre>
<h2 id="4-在-blog-的根目录创建一个-serverless-yml-文件"><a href="#4-在-blog-的根目录创建一个-serverless-yml-文件" class="headerlink" title="4.在 blog 的根目录创建一个 serverless.yml 文件"></a>4.在 blog 的根目录创建一个 serverless.yml 文件</h2><p>复制以下文件内容：唯一注意的地方就是 src 的路径：根据实际更改（即为博客的 index.html 网页）</p>
<pre class=" language-javascript"><code class="language-javascript">myWebsite<span class="token punctuation">:</span>
  component<span class="token punctuation">:</span> <span class="token string">'@serverless/tencent-website'</span>
  inputs<span class="token punctuation">:</span>
    code<span class="token punctuation">:</span>
      src<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>
      index<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html
      error<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html
    region<span class="token punctuation">:</span> ap<span class="token operator">-</span>guangzhou
    bucketName<span class="token punctuation">:</span> my<span class="token operator">-</span>bucket</code></pre>
<h2 id="5-将静态博客发布到-tencent-serverless"><a href="#5-将静态博客发布到-tencent-serverless" class="headerlink" title="5.将静态博客发布到 tencent-serverless"></a>5.将静态博客发布到 tencent-serverless</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//首先将 hexo 中博客打包</span>
heox g

<span class="token comment" spellcheck="true">//将本地的博客部署到 serverless</span>
serverless<span class="token operator">/</span>sls <span class="token operator">--</span>debug</code></pre>
<h2 id="6-稍等片刻可以在-命令行工具看到以下"><a href="#6-稍等片刻可以在-命令行工具看到以下" class="headerlink" title="6.稍等片刻可以在 命令行工具看到以下"></a>6.稍等片刻可以在 命令行工具看到以下</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607113775-6a30d4dc-3c70-4506-9f5b-7af5a07b4e05.png#crop=0&crop=0&crop=1&crop=1&height=567&id=tZJ8o&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1134&originWidth=1298&originalType=binary&ratio=1&rotation=0&showTitle=false&size=453581&status=done&style=none&title=&width=649" alt="image.png"><br>此时需要的操作就是用手机微信去扫描（此处会检测是否有腾讯云账号，没有会提示注册，有会直接成功）并返回以下内容：此处就是部署成功，并返回地址，可以直接访问。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607252405-a0fad8a2-f2d5-49ef-8101-09a10eec3916.png#crop=0&crop=0&crop=1&crop=1&height=264&id=YMymA&margin=%5Bobject%20Object%5D&name=image.png&originHeight=528&originWidth=1274&originalType=binary&ratio=1&rotation=0&showTitle=false&size=364624&status=done&style=none&title=&width=637" alt="image.png"></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>serverless</tag>
      </tags>
  </entry>
  <entry>
    <title>table表格拖拽</title>
    <url>/leader755/50466.html</url>
    <content><![CDATA[<p>el-table 的拖拽使用 Sortable.js<br>官方文档 :<a href="https://github.com/SortableJS/Sortable" target="_blank" rel="noopener">https://github.com/SortableJS/Sortable</a></p>
<h2 id="1-通过-npm-使用-sortable"><a href="#1-通过-npm-使用-sortable" class="headerlink" title="1. 通过 npm 使用 sortable"></a>1. 通过 npm 使用 sortable</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//安装sortablejs</span>
npm install sortablejs <span class="token operator">--</span>save

<span class="token comment" spellcheck="true">//引用 sorttablejs</span>
<span class="token keyword">import</span> Sortable <span class="token keyword">from</span> <span class="token string">'sortablejs'</span></code></pre>
<h2 id="2-用法"><a href="#2-用法" class="headerlink" title="2.用法"></a>2.用法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">SorRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">// 获取表格row的父节点</span>
    <span class="token keyword">const</span> tbody <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span> <span class="token string">".el-table__body-wrapper tbody"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">// 创建行拖拽实例</span>
   <span class="token keyword">const</span> dragTableRow <span class="token operator">=</span> Sortable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>tbody<span class="token punctuation">,</span> <span class="token punctuation">{</span>
     animation<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//动画</span>
     handle<span class="token punctuation">:</span> <span class="token string">".move"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定拖拽目标，点击此目标才可拖拽元素(此例中设置操作按钮拖拽)</span>
     filter<span class="token punctuation">:</span> <span class="token string">".disabled"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//指定不可拖动的类名（el-table中可通过row-class-name设置行的class）</span>
     dragClass<span class="token punctuation">:</span> <span class="token string">"dragClass"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置拖拽样式类名</span>
     ghostClass<span class="token punctuation">:</span> <span class="token string">"ghostClass"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置拖拽停靠样式类名</span>
     chosenClass<span class="token punctuation">:</span> <span class="token string">"chosenClass"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置选中样式类名</span>
     <span class="token comment" spellcheck="true">// 开始拖动事件</span>
     onStart<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"开始拖动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">// 结束拖动事件</span>
     onEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
         <span class="token string">"结束拖动"</span><span class="token punctuation">,</span>
         <span class="token template-string"><span class="token string">`拖动前索引</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>oldIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">---拖动后索引</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token punctuation">.</span>newIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>
       <span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token comment" spellcheck="true">// 列拖拽</span>
 <span class="token function">SorCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//获取表格col的父节点</span>
   <span class="token keyword">const</span> eleCol <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".el-table__header-wrapper tr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">// 创建列拖拽实例</span>
   <span class="token keyword">const</span> dragTableCol <span class="token operator">=</span> Sortable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>eleCol<span class="token punctuation">,</span> <span class="token punctuation">{</span>
     animation<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span>
     dragClass<span class="token punctuation">:</span> <span class="token string">"dragClass"</span><span class="token punctuation">,</span>
     ghostClass<span class="token punctuation">:</span> <span class="token string">"ghostClass"</span><span class="token punctuation">,</span>
     chosenClass<span class="token punctuation">:</span> <span class="token string">"chosenClass"</span><span class="token punctuation">,</span>
     <span class="token comment" spellcheck="true">// 结束拖动事件</span>
     onEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">// 拖拽结束之后通过修改tableHeaderData顺序改变表头顺序</span>
       <span class="token keyword">const</span> dragHeaderCopy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableHeaderData<span class="token punctuation">[</span>e<span class="token punctuation">.</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 备份当前拖拽的表头</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>tableHeaderData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把当前拖动的表头去掉</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>tableHeaderData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dragHeaderCopy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把当前拖拽的表头添加到新位置</span>
       <span class="token comment" spellcheck="true">/**
           * 在做列拖拽功能时发现问题：表头位置错乱，但是内容列正常
           * 于是我给el-table绑定key，每次拖拽结束改变key触发表格重新渲染。
           * 但引出新的问题：表格重渲拖拽事件丢失，导致之后无法拖拽
           * 于是我在表格重渲之后重新调用拖拽方法创建拖拽实例，功能正常
           * **/</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SorRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">SorCol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dragHeaderCopy<span class="token punctuation">,</span> <span class="token string">"结束拖动"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tableHeaderData<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>
 <span class="token comment" spellcheck="true">// 设置表格row的class(此例中通过设置class来配合拖拽属性filter设置某行不可拖拽)</span>
 <span class="token function">tableRowClassName</span><span class="token punctuation">(</span><span class="token punctuation">{</span> row <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>disabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> <span class="token string">"disabled"</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span><span class="token punctuation">,</span>

 <span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">'scss'</span><span class="token operator">></span>
<span class="token comment" spellcheck="true">// 拖拽</span>
<span class="token punctuation">.</span>dragClass <span class="token punctuation">{</span>
  background<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>$color<span class="token punctuation">:</span> #41c21a<span class="token punctuation">,</span> $alpha<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">!</span>important<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 停靠</span>
<span class="token punctuation">.</span>ghostClass <span class="token punctuation">{</span>
  background<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>$color<span class="token punctuation">:</span> #6cacf5<span class="token punctuation">,</span> $alpha<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">!</span>important<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 选择</span>
<span class="token punctuation">.</span>chosenClass<span class="token punctuation">:</span>hover <span class="token operator">></span> td <span class="token punctuation">{</span>
  background<span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>$color<span class="token punctuation">:</span> #f56c6c<span class="token punctuation">,</span> $alpha<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">!</span>important<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>
<h2 id="3-实际使用"><a href="#3-实际使用" class="headerlink" title="3.实际使用"></a>3.实际使用</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>
      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>table<span class="token punctuation">"</span></span>
      <span class="token attr-name">row-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>roleId<span class="token punctuation">"</span></span>
      <span class="token attr-name">@cell-mouse-enter.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>eventDrag<span class="token punctuation">"</span></span>
      <span class="token attr-name">border</span>
      <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sort<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>拖拽区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle<span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>按住拖拽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>
          <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60px<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>序号<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- 此处如果只有行拖动，可以全部替换为 item --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
        <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item, index) of dropCol<span class="token punctuation">"</span></span>
        <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>`dropCol_${index}`<span class="token punctuation">"</span></span>
        <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dropColumn[index].prop<span class="token punctuation">"</span></span>
        <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>
        <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.width<span class="token punctuation">"</span></span>
        <span class="token attr-name">:fixed</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.fixed<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>操作<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ scope.row.edit }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ scope.row.del }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">import</span> Sortable <span class="token keyword">from</span> <span class="token string">"sortablejs"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>
    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      msg<span class="token punctuation">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        tableData<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span>
            roleId<span class="token punctuation">:</span> <span class="token number">20001</span><span class="token punctuation">,</span>
            roleName<span class="token punctuation">:</span> <span class="token string">"咯阿时候1"</span><span class="token punctuation">,</span>
            createTime<span class="token punctuation">:</span> <span class="token string">"2021-06"</span><span class="token punctuation">,</span>
            edit<span class="token punctuation">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span>
            del<span class="token punctuation">:</span> <span class="token string">"删除"</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            roleId<span class="token punctuation">:</span> <span class="token number">20002</span><span class="token punctuation">,</span>
            roleName<span class="token punctuation">:</span> <span class="token string">"咯阿时候2"</span><span class="token punctuation">,</span>
            createTime<span class="token punctuation">:</span> <span class="token string">"2021-07"</span><span class="token punctuation">,</span>
            edit<span class="token punctuation">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span>
            del<span class="token punctuation">:</span> <span class="token string">"删除"</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            roleId<span class="token punctuation">:</span> <span class="token number">20003</span><span class="token punctuation">,</span>
            roleName<span class="token punctuation">:</span> <span class="token string">"咯阿时候3"</span><span class="token punctuation">,</span>
            createTime<span class="token punctuation">:</span> <span class="token string">"2021-08"</span><span class="token punctuation">,</span>
            edit<span class="token punctuation">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span>
            del<span class="token punctuation">:</span> <span class="token string">"删除"</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        dropColumn<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"roleId"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"编码"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"roleName"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"角色名称"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"创建时间"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"edit"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span> fixed<span class="token punctuation">:</span> <span class="token string">"right"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        dropCol<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"roleId"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"编码"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">100</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"roleName"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"角色名称"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"创建时间"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> <span class="token string">"edit"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"编辑"</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span> fixed<span class="token punctuation">:</span> <span class="token string">"right"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"tableOptions.data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newData<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以发现每次拖拽后数据发生了改变</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">eventDrag</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rowDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">columnDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment" spellcheck="true">//行拖拽</span>
      <span class="token function">rowDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//此处需要使用this.$refs.table.$el.querySelector，不然可能获取不到 tbody</span>
        <span class="token keyword">const</span> tbody <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>
          <span class="token string">".el-table__body-wrapper tbody"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tbody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        Sortable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>tbody<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          handle<span class="token punctuation">:</span> <span class="token string">".handle"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//此处指定拖拽元素</span>
          animation<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span>
          <span class="token function">onChoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">//选择元素</span>
            _this<span class="token punctuation">.</span>dropColumn<span class="token punctuation">[</span>_this<span class="token punctuation">.</span>dropColumn<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fixed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          onUnchoose<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 取消选择元素</span>
            _this<span class="token punctuation">.</span>dropColumn<span class="token punctuation">[</span>_this<span class="token punctuation">.</span>dropColumn<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fixed <span class="token operator">=</span> <span class="token string">"right"</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token function">onEnd</span><span class="token punctuation">(</span><span class="token punctuation">{</span> newIndex<span class="token punctuation">,</span> oldIndex <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 拖拽完成</span>
            <span class="token keyword">const</span> currRow <span class="token operator">=</span> _this<span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            _this<span class="token punctuation">.</span>tableData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currRow<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment" spellcheck="true">//列拖拽</span>
      <span class="token function">columnDrop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> wrapperTr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>table<span class="token punctuation">.</span>$el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>
          <span class="token string">".el-table__header-wrapper tr"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wrapperTr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sortable <span class="token operator">=</span> Sortable<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>wrapperTr<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          animation<span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span>
          delay<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
          onEnd<span class="token punctuation">:</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> arr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dropCol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> oldItem <span class="token operator">=</span> arr<span class="token punctuation">[</span>evt<span class="token punctuation">.</span>oldIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>oldIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>newIndex<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldItem<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>dropCol <span class="token operator">=</span> arr<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h2 id="4-在线链接"><a href="#4-在线链接" class="headerlink" title="4.在线链接"></a>4.在线链接</h2><p><a href="https://codesandbox.io/embed/gifted-hill-sdozr?fontsize=14&hidenavigation=1&theme=dark" target="_blank" rel="noopener">https://codesandbox.io/embed/gifted-hill-sdozr?fontsize=14&amp;hidenavigation=1&amp;theme=dark</a></p>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://www.cnblogs.com/enhengenhengNymph/p/14537289.html" target="_blank" rel="noopener">https://www.cnblogs.com/enhengenhengNymph/p/14537289.html</a></p>
]]></content>
      <categories>
        <category>el-table</category>
      </categories>
      <tags>
        <tag>拖拽</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode设置一键同步--settings sync</title>
    <url>/leader755/835.html</url>
    <content><![CDATA[<blockquote>
<p>最近换了新工作，然后作为程序猿首先是编辑器的设置。但是每个人的编辑器都有自己的编程习惯的。那能不能将 vscode 的编辑器设置同步呢？答案是有的：setttings-async</p>
</blockquote>
<h2 id="1-vscode-插件中查找插件-setting-sync"><a href="#1-vscode-插件中查找插件-setting-sync" class="headerlink" title="1.vscode 插件中查找插件 setting-sync"></a>1.vscode 插件中查找插件 setting-sync</h2><p>下面这个插件可以把当前的配置上传到 gist，所以需要去创建 gist。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599917112978-ee13d880-b9d9-48cf-84f4-3948e435f7c8.png#height=534&id=CmJex&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1068&originWidth=650&originalType=binary&size=100569&status=done&style=none&width=325" alt="image.png"></p>
<h2 id="2-在-github-上创建-gist，并查看-token-和-gist-id-信息（查看信息只做验证，不需要保存）"><a href="#2-在-github-上创建-gist，并查看-token-和-gist-id-信息（查看信息只做验证，不需要保存）" class="headerlink" title="2.在 github 上创建 gist，并查看 token 和 gist id 信息（查看信息只做验证，不需要保存）"></a>2.在 github 上创建 gist，并查看 token 和 gist id 信息（查看信息只做验证，不需要保存）</h2><h3 id="1）github-settings-gt-Developer-settings"><a href="#1）github-settings-gt-Developer-settings" class="headerlink" title="1）github settings-&gt;Developer settings"></a>1）github settings-&gt;Developer settings</h3><p><strong>登录 github,点击用户头像–&gt; settings,进入设置界面-&gt;点击左侧 Developer settings，进入开发者设置。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599917634153-a4c8924e-5512-42c6-afd7-c9df46203dd4.png#height=690&id=m6wjD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1380&originWidth=2458&originalType=binary&size=573967&status=done&style=none&width=1229" alt="image.png"></p>
<h3 id="2）创建-Generate-new-token"><a href="#2）创建-Generate-new-token" class="headerlink" title="2）创建 Generate new token"></a>2）创建 Generate new token</h3><p><strong>选择 Personal access tokens，点击右侧 Generate new token</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599917720348-0dabbbc3-4759-4d12-b837-9b4e7d84e9f6.png#height=226&id=LLAW6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=452&originWidth=2368&originalType=binary&size=90751&status=done&style=none&width=1184" alt="image.png"></p>
<h3 id="3）生成新-token"><a href="#3）生成新-token" class="headerlink" title="3）生成新 token"></a>3）生成新 token</h3><p><strong>填写 token 名称，在下方勾选 gist。点击下面按钮，生成新的 token（注意只需要勾选 gist 项）</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599917796086-d7370670-8d50-40f7-acd8-4b03faa1067c.png#height=1545&id=ZGTVb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3090&originWidth=2074&originalType=binary&size=570099&status=done&style=none&width=1037" alt="image.png"></p>
<h3 id="4-查看新生成的-token"><a href="#4-查看新生成的-token" class="headerlink" title="4)查看新生成的 token"></a>4)查看新生成的 token</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918034902-8b062122-6775-4e65-9567-35e03046c961.png#height=270&id=STJMd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=540&originWidth=2326&originalType=binary&size=101341&status=done&style=none&width=1163" alt="image.png"></p>
<h3 id="5）查看生成的-gist-id"><a href="#5）查看生成的-gist-id" class="headerlink" title="5）查看生成的 gist id"></a>5）查看生成的 gist id</h3><p><strong>点击用户头像，点击 your gists。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918103323-40eca146-45a9-4415-971f-7ce13f45be71.png#height=461&id=hzKyt&margin=%5Bobject%20Object%5D&name=image.png&originHeight=922&originWidth=1942&originalType=binary&size=173097&status=done&style=none&width=971" alt="image.png"></p>
<p>点击蓝色按钮查看<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918186497-c45bbf18-871f-4fd4-a1e0-eae38d1c4928.png#height=439&id=pdiaI&margin=%5Bobject%20Object%5D&name=image.png&originHeight=878&originWidth=1980&originalType=binary&size=204822&status=done&style=none&width=990" alt="image.png"><br>跳转到新地址，在新地址后面就可以查看到当前 gist 的 id。<strong>页面不要关闭，后面有用</strong>。仓库后面的一串字符就是 gist ID。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918303579-bab29066-719a-482b-ac22-910cac076675.png#height=35&id=FbKhr&margin=%5Bobject%20Object%5D&name=image.png&originHeight=70&originWidth=1230&originalType=binary&size=17138&status=done&style=none&width=615" alt="image.png"></p>
<h2 id="3-插件使用"><a href="#3-插件使用" class="headerlink" title="3.插件使用"></a>3.插件使用</h2><p>在 vscode 中按 F1，查看插件用法和配置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918476339-18ee9eac-aa13-494c-a411-3e70dcd2bdf2.png#height=265&id=TKW3U&margin=%5Bobject%20Object%5D&name=image.png&originHeight=530&originWidth=1254&originalType=binary&size=78292&status=done&style=none&width=627" alt="image.png"></p>
<h3 id="1-gt-首次使用"><a href="#1-gt-首次使用" class="headerlink" title="1&gt;首次使用"></a>1&gt;首次使用</h3><p>选择 “如何配置项”。进入以下页面，选择    ** LOGIN WHITH GITHUB** 项，会跳转到浏览器页面，对 github 的授权页面，放心授权就行，授权成功就可以关闭页面了。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918541445-4a4deea5-e8ee-4651-9580-c939b5715caf.png#height=742&id=J6A9I&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1484&originWidth=1892&originalType=binary&size=294147&status=done&style=none&width=946" alt="image.png"></p>
<h3 id="2-gt-同步配置"><a href="#2-gt-同步配置" class="headerlink" title="2&gt;同步配置"></a>2&gt;同步配置</h3><p>按 Shift + Alt + D 同步，粘贴 gist 的 ID 同步设置。</p>
<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599918685552-42eaa667-7bd6-481b-8c40-cfe36ea3e952.png#height=700&id=lcyK5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1400&originWidth=1708&originalType=binary&size=192708&status=done&style=none&width=854" alt="image.png"></h3><h3 id="3-gt-常用的快捷方式"><a href="#3-gt-常用的快捷方式" class="headerlink" title="3&gt;常用的快捷方式"></a>3&gt;常用的快捷方式</h3><pre class=" language-powershell"><code class="language-powershell">1<span class="token punctuation">.</span>上传键：Shift <span class="token operator">+</span> Alt <span class="token operator">+</span> U
2<span class="token punctuation">.</span>下载键：Shift <span class="token operator">+</span> Alt <span class="token operator">+</span> D
（在macOS上：Shift <span class="token operator">+</span> Option <span class="token operator">+</span> U <span class="token operator">/</span> Shift <span class="token operator">+</span> Option <span class="token operator">+</span> D）</code></pre>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>sync</tag>
        <tag>settings sync</tag>
      </tags>
  </entry>
  <entry>
    <title>vuePress</title>
    <url>/leader755/33285.html</url>
    <content><![CDATA[<p>VuePress 由两部分组成：第一部分是一个<a href="https://github.com/vuejs/vuepress/tree/master/packages/%40vuepress/core" target="_blank" rel="noopener">极简静态网站生成器(opens new window)</a>，它包含由 Vue 驱动的<a href="https://vuepress.vuejs.org/zh/theme/" target="_blank" rel="noopener">主题系统</a>和<a href="https://vuepress.vuejs.org/zh/plugin/" target="_blank" rel="noopener">插件 API</a>，另一个部分是为书写技术文档而优化的<a href="https://vuepress.vuejs.org/zh/theme/default-theme-config.html" target="_blank" rel="noopener">默认主题</a>，它的诞生初衷是为了支持 Vue 及其子项目的文档需求。</p>
<h3 id="1-项目初始化"><a href="#1-项目初始化" class="headerlink" title="1.项目初始化"></a>1.项目初始化</h3><pre class=" language-javascript"><code class="language-javascript">yarn init # npm init</code></pre>
<h3 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2.安装依赖"></a>2.安装依赖</h3><p>将 VuePress 安装为本地依赖<br>我们已经不再推荐全局安装 VuePress</p>
<pre class=" language-javascript"><code class="language-javascript">yarn add <span class="token operator">-</span>D vuepress # npm install <span class="token operator">-</span>D vuepress</code></pre>
<p>###</p>
<h3 id="3-配置-package-json"><a href="#3-配置-package-json" class="headerlink" title="3.配置 package.json"></a>3.配置 package.json</h3><p>在 package.json 中添加一些 <a href="https://classic.yarnpkg.com/zh-Hans/docs/package-json#toc-scripts" target="_blank" rel="noopener">scripts(opens new window)</a>这一步骤是可选的，但我们推荐你完成它。在下文中，我们会默认这些 scripts 已经被添加。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"docs:dev"</span><span class="token punctuation">:</span> <span class="token string">"vuepress dev docs"</span><span class="token punctuation">,</span>
    <span class="token string">"docs:build"</span><span class="token punctuation">:</span> <span class="token string">"vuepress build docs"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>4.安装主题 vuepress-theme-reco</p>
<pre class=" language-javascript"><code class="language-javascript">yarn add vuepress<span class="token operator">-</span>theme<span class="token operator">-</span>reco # npm install vuepress<span class="token operator">-</span>theme<span class="token operator">-</span>reco <span class="token operator">--</span>save<span class="token operator">-</span>dev</code></pre>
<p>5.创建.vuepress 文件夹并创建 config.js 配置文件</p>
<pre class=" language-javascript"><code class="language-javascript">mkdir docs<span class="token regex">/.vuepress &amp;&amp; touch docs/</span><span class="token punctuation">.</span>vuepress<span class="token operator">/</span>config<span class="token punctuation">.</span>js</code></pre>
<ol>
<li>编辑 config.js 文件</li>
</ol>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token punctuation">:</span> <span class="token string">"Title"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//首页左上角title</span>
  theme<span class="token punctuation">:</span> <span class="token string">"reco"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 应用博客主题</span>
  themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    type<span class="token punctuation">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>
    nav<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token comment" spellcheck="true">// 首页导航栏</span>
      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">"reco-home"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> text<span class="token punctuation">:</span> <span class="token string">"TimeLine"</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">"/timeline/"</span><span class="token punctuation">,</span> icon<span class="token punctuation">:</span> <span class="token string">"reco-date"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    author<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 首页作者</span>
    authorAvatar<span class="token punctuation">:</span> <span class="token string">"https://vuepress.vuejs.org/hero.png"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 首页头像</span>
    subSidebar<span class="token punctuation">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 博客页面的目录</span>
    <span class="token comment" spellcheck="true">// 博客配置</span>
    blogConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      category<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        location<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在导航栏菜单中所占的位置，默认2</span>
        text<span class="token punctuation">:</span> <span class="token string">"Category"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认文案 “分类”</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      tag<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        location<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在导航栏菜单中所占的位置，默认3</span>
        text<span class="token punctuation">:</span> <span class="token string">"Tag"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认文案 “标签”</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      socialLinks<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token comment" spellcheck="true">// 信息栏展示社交信息</span>
        <span class="token punctuation">{</span> icon<span class="token punctuation">:</span> <span class="token string">"reco-github"</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">"https://github.com/recoluan"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> icon<span class="token punctuation">:</span> <span class="token string">"reco-npm"</span><span class="token punctuation">,</span> link<span class="token punctuation">:</span> <span class="token string">"https://www.npmjs.com/~reco_luan"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="5-创建主页"><a href="#5-创建主页" class="headerlink" title="5.创建主页"></a>5.创建主页</h3><p>新建 docs 文件夹用来存放博客文件</p>
<pre class=" language-javascript"><code class="language-javascript">mkdir docs <span class="token operator">&amp;&amp;</span> echo <span class="token string">'# Hello VuePress'</span> <span class="token operator">></span> docs<span class="token operator">/</span>README<span class="token punctuation">.</span>md</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/241787/1644926361030-95e2561c-a65e-4f2d-8e86-f6de4c2224aa.jpeg#clientId=u2912d710-93b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0f2a10cf&margin=%5Bobject%20Object%5D&originHeight=138&originWidth=812&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u39ff22a1-349b-4dad-b37d-79eeceb3cbd&title=" alt=""> 进入到 docs 里面创建一个<code>README.md</code>文件，这个文件就是我们的首页，我们在里面编辑一些内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">-</span>
home<span class="token punctuation">:</span> <span class="token boolean">true</span>
heroImage<span class="token punctuation">:</span> <span class="token operator">/</span>logo<span class="token punctuation">.</span>jpg
actionText<span class="token punctuation">:</span> 快速上手 →
actionLink<span class="token punctuation">:</span> <span class="token operator">/</span>zh<span class="token regex">/guide/</span>
features<span class="token punctuation">:</span>
<span class="token operator">-</span> title<span class="token punctuation">:</span> 简洁至上
  details<span class="token punctuation">:</span> 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。
<span class="token operator">-</span> title<span class="token punctuation">:</span> Vue驱动
  details<span class="token punctuation">:</span> 享受 Vue <span class="token operator">+</span> webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。
<span class="token operator">-</span> title<span class="token punctuation">:</span> 高性能
  details<span class="token punctuation">:</span> VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。
footer<span class="token punctuation">:</span> 页尾
<span class="token operator">--</span><span class="token operator">-</span></code></pre>
<h3 id="6-在本地启动服务器"><a href="#6-在本地启动服务器" class="headerlink" title="6.在本地启动服务器"></a>6.在本地启动服务器</h3><pre class=" language-javascript"><code class="language-javascript">yarn docs<span class="token punctuation">:</span>dev # npm run docs<span class="token punctuation">:</span>dev</code></pre>
<p>###</p>
<h3 id="7、编译"><a href="#7、编译" class="headerlink" title="7、编译"></a>7、编译</h3><p>按 ctrl+C 结束运行，执行以下命令编译</p>
<pre class=" language-javascript"><code class="language-javascript">npm run build</code></pre>
<p>编译完成以后在 docs 文件夹下多了一个.vuepress 文件夹<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/241787/1644926421476-e49326f4-78a2-4b0d-9c68-a5ff3185c1f7.jpeg#clientId=u2912d710-93b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud0f3ee0f&margin=%5Bobject%20Object%5D&originHeight=215&originWidth=814&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u62e138c9-fe57-4c4b-8352-afeff589239&title=" alt=""></p>
<p><strong>这个文件是全局重要的配置文件，包括配置网站的标题、描述、主题、导航栏等信息</strong>，内容如下：</p>
<pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token punctuation">:</span> <span class="token string">"XXX的博客"</span><span class="token punctuation">,</span>
  description<span class="token punctuation">:</span> <span class="token string">"XXX的博客"</span><span class="token punctuation">,</span>
  dest<span class="token punctuation">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>
  port<span class="token punctuation">:</span> <span class="token string">"8080"</span><span class="token punctuation">,</span>
  head<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"link"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> rel<span class="token punctuation">:</span> <span class="token string">"icon"</span><span class="token punctuation">,</span> href<span class="token punctuation">:</span> <span class="token string">"/logo.jpg"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  markdown<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    lineNumbers<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  themeConfig<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    nav<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        text<span class="token punctuation">:</span> <span class="token string">"指南"</span><span class="token punctuation">,</span>
        link<span class="token punctuation">:</span> <span class="token string">"/guide/"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    sidebar<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token string">"/guide/"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          title<span class="token punctuation">:</span> <span class="token string">"新手指南"</span><span class="token punctuation">,</span>
          collapsable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/guide/notes/one"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          title<span class="token punctuation">:</span> <span class="token string">"java"</span><span class="token punctuation">,</span>
          collapsable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/guide/notes/two"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    sidebarDepth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    lastUpdated<span class="token punctuation">:</span> <span class="token string">"Last Updated"</span><span class="token punctuation">,</span>
    searchMaxSuggestoins<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    serviceWorker<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      updatePopup<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        message<span class="token punctuation">:</span> <span class="token string">"有新的内容."</span><span class="token punctuation">,</span>
        buttonText<span class="token punctuation">:</span> <span class="token string">"更新"</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    editLinks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    editLinkText<span class="token punctuation">:</span> <span class="token string">"在 GitHub 上编辑此页 ！"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="9、写文章"><a href="#9、写文章" class="headerlink" title="9、写文章"></a>9、写文章</h3><p>完成了基础搭建后，按照 config.js 里面配置的目录结构，在 docs 目录下新增相应的.md 文件，一篇文章就是一个.md 文件<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/241787/1644926486998-300dab60-819d-4248-94b1-a1ae3f917a94.jpeg#clientId=u2912d710-93b1-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc6c99fe6&margin=%5Bobject%20Object%5D&originHeight=227&originWidth=859&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud7d47712-23b5-4f7c-8064-dd44ad4279b&title=" alt=""></p>
]]></content>
      <categories>
        <category>vuePress</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中px自动转化为rem</title>
    <url>/leader755/54576.html</url>
    <content><![CDATA[<blockquote>
<p>在项目中是不是经常使用 rem，自动设置根节点 html 的 font-size，因为 rem 单位是相对于根节点的字体大小的，所以通过设置根节点的字体大小可以动态的改变 rem 的大小。但是我们常见的是 px,那有什么好的方法能自动转化为 rem 呢。答案是有的。</p>
<ul>
<li>vue-cli：使用脚手架工具创建项目。</li>
<li>postcss-pxtorem：转换 px 为 rem 的插件。</li>
</ul>
</blockquote>
<h2 id="1-创建-rem-js-文件"><a href="#1-创建-rem-js-文件" class="headerlink" title="1.创建 rem.js 文件"></a>1.创建 rem.js 文件</h2><p>很多人写这种小工具文件会习惯性的加上闭包，这个其实是没有必要的。ES6 中每个文件都是单独的一个模块。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/***1、创建rem.js文件
 **很多人写这种小工具文件会习惯性的加上闭包，这个其实是没有必要的。ES6中每个文件都是单独的一个模块。
 **/</span>

<span class="token comment" spellcheck="true">/**一般：
 *移动端设计图为 750px，basesize=32,scale = document.documentElement.clientWidth / 750;
 *pc端设计图为 1920px，basesize=16,scale = document.documentElement.clientWidth / 1920;
 **/</span>
<span class="token comment" spellcheck="true">// 基准大小</span>
<span class="token keyword">const</span> baseSize <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 设置 rem 函数</span>
<span class="token keyword">function</span> <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 当前页面宽度相对于 750 宽的缩放比例，可根据自己需要修改。</span>
  <span class="token keyword">const</span> scale <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientWidth <span class="token operator">/</span> <span class="token number">1920</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> autoWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>baseSize <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>scale<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">// 设置页面最小字体</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>autoWidth <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    autoWidth <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 设置页面根节点字体大小</span>
  document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> autoWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 初始化</span>
<span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 改变窗口大小时重新设置 rem</span>
window<span class="token punctuation">.</span>onresize <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setRem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2 id="2-在main-js中引入rem-js"><a href="#2-在main-js中引入rem-js" class="headerlink" title="2.在main.js中引入rem.js"></a>2.在<code>main.js</code>中引入<code>rem.js</code></h2><p>rem.js 的路径是自己定的，在哪就写那个路径。引入文件后，查看页面的 html 节点，是否有被自动添加  <code>font-size</code>。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"./utils/rem"</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p><strong>注意：完成到这一步，也就是实现了 rem 布局，实际开发的时候，还是需要我们去计算对应的 rem 值去开发。</strong><br><strong>下一步我们就配置一下 webpack，自动转换 px 为对应的 rem 值。</strong></p>
</blockquote>
<h2 id="3-配置-postcss-pxtorem-自动转换-px-为-rem"><a href="#3-配置-postcss-pxtorem-自动转换-px-为-rem" class="headerlink" title="3.配置  postcss-pxtorem  自动转换 px 为 rem"></a>3.配置  <code>postcss-pxtorem</code>  自动转换 px 为 rem</h2><h3 id="1-安装-postcss-pxtorem"><a href="#1-安装-postcss-pxtorem" class="headerlink" title="1.安装 postcss-pxtorem"></a>1.安装 <code>postcss-pxtorem</code></h3><pre class=" language-javascript"><code class="language-javascript">$ npm install postcss<span class="token operator">-</span>pxtorem <span class="token operator">--</span>save<span class="token operator">-</span>dev
<span class="token comment" spellcheck="true">//npm install postcss-pxtorem -D</span></code></pre>
<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><h4 id="1-gt-vue-cli2-x-中修改根目录-postcssrc-js-文件"><a href="#1-gt-vue-cli2-x-中修改根目录-postcssrc-js-文件" class="headerlink" title="1&gt;vue-cli2.x 中修改根目录 postcssrc.js 文件"></a>1&gt;vue-cli2.x 中修改根目录 <code>postcssrc.js</code> 文件</h4><p>在根目录找到找到<code>postcssrc.js文件，并在其中找到</code> <code>plugins</code> 属性新增 pxtorem 的设置。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"plugins"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string">"postcss-pxtorem"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token string">"rootValue"</span><span class="token punctuation">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
  <span class="token string">"unitPrecision"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//保留小数位</span>
  <span class="token string">"propList"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// 注意：如果有使用第三方UI如VUX，则需要配置下忽略选择器不转换。</span>
  <span class="token comment" spellcheck="true">// 规则是class中包含的字符串，如vux中所有的class前缀都是weui-。也可以是正则。</span>
  <span class="token string">"selectorBlackList"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"weui-"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//过滤的类名</span>
  <span class="token string">"minPixelValue"</span><span class="token punctuation">:</span><span class="token number">2</span> <span class="token comment" spellcheck="true">//所有小于设置的数值都不被转换</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-gt-vue-cli3-x-和-vue-cli4-x-修改根目录-vue-config-js-文件"><a href="#2-gt-vue-cli3-x-和-vue-cli4-x-修改根目录-vue-config-js-文件" class="headerlink" title="2&gt;vue-cli3.x 和 vue-cli4.x 修改根目录 vue.config.js 文件"></a>2&gt;vue-cli3.x 和 vue-cli4.x 修改根目录 vue.config.js 文件</h4><pre class=" language-javascript"><code class="language-javascript">css<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// css预设器配置项</span>
    loaderOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      postcss<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-pxtorem'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            rootValue<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 换算的基数</span>
            unitPrecision<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//保留小数位</span>
            selectorBlackList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.wu'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 忽略转换正则匹配项</span>
            propList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            minPixelValue<span class="token punctuation">:</span> <span class="token number">2</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>####</p>
<h3 id="3-重启后正常使用-px"><a href="#3-重启后正常使用-px" class="headerlink" title="3.重启后正常使用 px"></a>3.重启后正常使用 px</h3><p>按照上述配置项目后，即可在开发中直接使用  <code>px</code>  单位开发。</p>
<p>例如设计给出的设计图是 **750 _ 1136_，那么可以直接在页面中写</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">750</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1136</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>将被转换为</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>
  <span class="token property">widht</span><span class="token punctuation">:</span> <span class="token number">23.4375</span>rem<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">35.5</span>rem<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>注意：此方法支持</strong><code>**import**</code><em>* 和 <strong>`</strong>.vue<strong>`</strong>单文件中<strong>`</strong>style<strong>`</strong>。暂不支持<strong>`</strong>style<strong>`</strong>中使用<strong>`</strong>@import url();*<em>`<br>\</em>\</em></p>
<h2 id="4-vue-中-px-动转化为-rem-插件"><a href="#4-vue-中-px-动转化为-rem-插件" class="headerlink" title="4.vue 中 px 动转化为 rem 插件"></a>4.vue 中 px 动转化为 rem 插件</h2><h3 id="1-gt-三种常用的插件对比"><a href="#1-gt-三种常用的插件对比" class="headerlink" title="1&gt;三种常用的插件对比"></a>1&gt;三种常用的插件对比</h3><blockquote>
<p><strong>postcss-plugin-px2rem 官方文档：</strong><a href="https://www.npmjs.com/package/postcss-plugin-px2rem" target="_blank" rel="noopener"><strong>https://www.npmjs.com/package/postcss-plugin-px2rem</strong></a><br><strong>postcss-pxtorem 官方文档：</strong><a href="https://www.npmjs.com/package/postcss-pxtorem" target="_blank" rel="noopener"><strong>https://www.npmjs.com/package/postcss-pxtorem</strong></a><br><strong>postcss-px2rem 官方文档：</strong><a href="https://www.npmjs.com/package/postcss-px2rem" target="_blank" rel="noopener"><strong>https://www.npmjs.com/package/postcss-px2rem</strong></a></p>
</blockquote>
<h3 id="2-gt-安装"><a href="#2-gt-安装" class="headerlink" title="2&gt;安装"></a>2&gt;安装</h3><pre class=" language-css"><code class="language-css">//安装postcss-plugin-px<span class="token number">2</span>rem
npm i postcss-plugin-px<span class="token number">2</span>rem  --save-dev

//安装postcss-pxtorem
npm i postcss-pxtorem  --save-dev

//安装 postcss-px<span class="token number">2</span>rem
npm install postcss-px<span class="token number">2</span>rem --save-dev</code></pre>
<p>####</p>
<h3 id="3-gt-配置文件"><a href="#3-gt-配置文件" class="headerlink" title="3&gt;配置文件"></a>3&gt;配置文件</h3><p>在 vue-cli3.x 中进行配置，如果个别地方不想转化 px。可以简单的使用大写的  <strong>PX</strong>  或  <strong>Px</strong> 。<br>postcss-plugin-px2rem 的配置</p>
<pre class=" language-css"><code class="language-css"> <span class="token selector">css: </span><span class="token punctuation">{</span>
   <span class="token selector">loaderOptions: </span><span class="token punctuation">{</span>
     <span class="token selector">postcss: </span><span class="token punctuation">{</span>
       <span class="token selector">plugins: [
          require('postcss-plugin-px2rem')(</span><span class="token punctuation">{</span>
             // <span class="token property">rootValue</span><span class="token punctuation">:</span> <span class="token number">100</span>, //换算基数， 默认<span class="token number">100</span>  ，这样的话把根标签的字体规定为<span class="token number">1</span>rem为<span class="token number">50</span>px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。
             // <span class="token property">unitPrecision</span><span class="token punctuation">:</span> <span class="token number">5</span>, //允许REM单位增长到的十进制数字。
             /<span class="token property">propWhiteList</span><span class="token punctuation">:</span> [],  //默认值是一个空数组，这意味着禁用白名单并启用所有属性。
             // <span class="token property">propBlackList</span><span class="token punctuation">:</span> [], //黑名单
             <span class="token property">exclude</span><span class="token punctuation">:</span> /<span class="token punctuation">(</span>node_module<span class="token punctuation">)</span>/,  //默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/<span class="token punctuation">(</span>node_module<span class="token punctuation">)</span>/ 。如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值
             <span class="token property">selectorBlackList</span><span class="token punctuation">:</span> [], //要忽略并保留为px的选择器
             // <span class="token property">ignoreIdentifier</span><span class="token punctuation">:</span> false,  //（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。
             // <span class="token property">replace</span><span class="token punctuation">:</span> true, // （布尔值）替换包含REM的规则，而不是添加回退。
             <span class="token property">mediaQuery</span><span class="token punctuation">:</span> false,  //（布尔值）允许在媒体查询中转换px。
             <span class="token property">minPixelValue</span><span class="token punctuation">:</span> <span class="token number">3</span> //设置要替换的最小像素值<span class="token punctuation">(</span><span class="token number">3</span>px会被转rem<span class="token punctuation">)</span>。 默认 <span class="token number">0</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>,
        ]
     <span class="token punctuation">}</span>
         <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>,</code></pre>
<p>postcss-pxtorem 的配置</p>
<pre class=" language-css"><code class="language-css"> <span class="token selector">css: </span><span class="token punctuation">{</span>
        <span class="token selector">loaderOptions: </span><span class="token punctuation">{</span>
            <span class="token selector">postcss: </span><span class="token punctuation">{</span>
                <span class="token selector">plugins: [
                    require('postcss-pxtorem')(</span><span class="token punctuation">{</span>//这里是配置项，详见官方文档
                        <span class="token property">rootValue</span> <span class="token punctuation">:</span> <span class="token number">1</span>, // 换算的基数
                        <span class="token property">selectorBlackList</span>  <span class="token punctuation">:</span> [<span class="token string">'weui'</span>,<span class="token string">'mu'</span>], // 忽略转换正则匹配项
                        <span class="token property">propList</span>   <span class="token punctuation">:</span> [<span class="token string">'*'</span>],
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>,
                ]
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>,</code></pre>
<p>postcss-px2rem 的配置</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">css: </span><span class="token punctuation">{</span>
        <span class="token selector">loaderOptions: </span><span class="token punctuation">{</span>
          <span class="token selector">postcss: </span><span class="token punctuation">{</span>
                <span class="token selector">plugins: [
                    require('postcss-px2rem')(</span><span class="token punctuation">{</span> //配置项，详见官方文档
                        <span class="token property">remUnit</span><span class="token punctuation">:</span> <span class="token number">30</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>, // 换算的基数
                ]
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>,</code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>rem</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>vue插槽</title>
    <url>/leader755/43144.html</url>
    <content><![CDATA[<p>##</p>
<h2 id="1-单个插槽-默认插槽-匿名插槽"><a href="#1-单个插槽-默认插槽-匿名插槽" class="headerlink" title="1.单个插槽 | 默认插槽 | 匿名插槽"></a>1.单个插槽 | 默认插槽 | 匿名插槽</h2><h4 id="匿名插槽就是可以在父组件中的子组件的标签中直接添加内容"><a href="#匿名插槽就是可以在父组件中的子组件的标签中直接添加内容" class="headerlink" title="匿名插槽就是可以在父组件中的子组件的标签中直接添加内容"></a>匿名插槽就是可以在父组件中的子组件的标签中直接添加内容</h4><p>子组件 A:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dialog"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>div<span class="token operator">></span>我是A组件中的对话框<span class="token operator">&lt;</span>div<span class="token operator">></span>
         <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"diolage"</span><span class="token punctuation">,</span>
      props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span>String
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>父组件：（在组件外, 我们可以往插槽里填入任何元素, <code>dialog-a</code>为组件的名称）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>dialogPage <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 只有子组件中使用了slot才能成功在此标签中添加内容</span>
           <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
           <span class="token comment" spellcheck="true">// ... 可以是任何元素</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dialogPage<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> dialogPage <span class="token keyword">from</span> <span class="token string">'./dialog'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span><span class="token punctuation">{</span>
            dialogPage
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          hello<span class="token punctuation">:</span><span class="token string">'我是父组件的值'</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<h2 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h2><h4 id="具名插槽就是一个拥有-name-属性的插槽，具名插槽可以在同一组件中多次使用。"><a href="#具名插槽就是一个拥有-name-属性的插槽，具名插槽可以在同一组件中多次使用。" class="headerlink" title="具名插槽就是一个拥有 name 属性的插槽，具名插槽可以在同一组件中多次使用。"></a>具名插槽就是一个拥有 name 属性的插槽，具名插槽可以在同一组件中多次使用。</h4><p>子组件 A:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dialog"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>div<span class="token operator">></span>我是A组件中的对话框<span class="token operator">&lt;</span>div<span class="token operator">></span>
         <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"slotUp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">// 具名插槽</span>
        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"slotDown"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">// 具名插槽</span>
        <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">//匿名插槽</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"diolage"</span><span class="token punctuation">,</span>
      props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span>String
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>父组件：（在组件外, 我们可以往插槽里填入任何元素, <code>dialog-a</code>为组件的名称）<br>没有 slot 属性的 html 模板默认关联匿名插槽。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>dialogPage <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"slotUp"</span><span class="token operator">></span>
           <span class="token operator">&lt;</span>button<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
         <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
        <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"slotDown"</span><span class="token operator">></span>
           <span class="token operator">&lt;</span>a<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
       <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
        <span class="token operator">&lt;</span>template<span class="token operator">></span>
           <span class="token operator">&lt;</span>a<span class="token operator">></span>按钮<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
       <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dialogPage<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> dialogPage <span class="token keyword">from</span> <span class="token string">'./dialog'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span><span class="token punctuation">{</span>
            dialogPage
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          hello<span class="token punctuation">:</span><span class="token string">'我是父组件的值'</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<h2 id="3-作用域插槽-带数据的插槽"><a href="#3-作用域插槽-带数据的插槽" class="headerlink" title="3.作用域插槽 | 带数据的插槽"></a>3.作用域插槽 | 带数据的插槽</h2><h4 id="作用域插槽就是一个可以携带数据的具名插槽，称为作用域插槽。"><a href="#作用域插槽就是一个可以携带数据的具名插槽，称为作用域插槽。" class="headerlink" title="作用域插槽就是一个可以携带数据的具名插槽，称为作用域插槽。"></a>作用域插槽就是一个可以携带数据的具名插槽，称为作用域插槽。</h4><p>子组件 A:</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dialog"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>div<span class="token operator">></span>我是A组件中的对话框<span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"slotData"</span> <span class="token punctuation">:</span>message<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">// 作用域插槽</span>
         <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"slotUp"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">// 具名插槽</span>
        <span class="token operator">&lt;</span>slot name<span class="token operator">=</span><span class="token string">"slotDown"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">// 具名插槽</span>
        <span class="token operator">&lt;</span>slot<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span> <span class="token comment" spellcheck="true">//匿名插槽</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"diolage"</span><span class="token punctuation">,</span>
      props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span>String
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          message<span class="token punctuation">:</span><span class="token string">'我是作用域插槽的数据'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>父组件：（在组件外, 我们可以往插槽里填入任何元素, <code>dialog-a</code>为组件的名称）<br>没有 slot 属性的 html 模板默认关联匿名插槽。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>dialogPage <span class="token punctuation">:</span>options<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">"slotData"</span> slot<span class="token operator">-</span>scope<span class="token operator">=</span><span class="token string">"scope"</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// 作用域插槽</span>
        <span class="token operator">&lt;</span>button<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>scope<span class="token punctuation">.</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>dialogPage<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> dialogPage <span class="token keyword">from</span> <span class="token string">'./dialog'</span>
    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      name<span class="token punctuation">:</span> <span class="token string">"Home"</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span><span class="token punctuation">{</span>
            dialogPage
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
          hello<span class="token punctuation">:</span><span class="token string">'我是父组件的值'</span>
      <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue 插槽</tag>
        <tag>slot</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的!class和!style</title>
    <url>/leader755/61512.html</url>
    <content><![CDATA[<h1 id="style-总结："><a href="#style-总结：" class="headerlink" title=":style 总结："></a>:style 总结：</h1><p>写 inline style 的方法跟 class 大同小异，一样可以使用阵列及物件语法，但在给<strong>css 属性时要注意有些以</strong><code>**-**</code><strong>连结的词，要改为驼峰式写法，或者是使用单引号括起来</strong>。</p>
<h2 id="一-对象语法"><a href="#一-对象语法" class="headerlink" title="一. 对象语法"></a>一. 对象语法</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--单个属性--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">color</span><span class="token punctuation">:</span> activeColor<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>color:{{activeColor}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--驼峰写法--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token string">'text-align'</span><span class="token punctuation">:</span>textAlign,<span class="token property">fontSize</span><span class="token punctuation">:</span> fontSize + <span class="token string">'px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    text-align:{{textAlign}},fontSize:{{fontSize}}px
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--一个对象--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">styleObject</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{styleObject}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2 id="二-数组语法"><a href="#二-数组语法" class="headerlink" title="二. 数组语法"></a>二. 数组语法</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--整个数组--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[baseStyles, overridingStyles]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    {{[baseStyles, overridingStyles]}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--数组+三元表达式--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">[</span><span class="token punctuation">{</span><span class="token property">backgroundColor</span><span class="token punctuation">:</span>isActive ? <span class="token string">'#f00'</span> <span class="token punctuation">:</span> <span class="token string">'#00f'</span><span class="token punctuation">}</span>,baseStyles]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    如果isActive==true,背景红色
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  　<span class="token comment" spellcheck="true">&lt;!--对象+数组--></span>
  　
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span></span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">[</span><span class="token punctuation">{</span> <span class="token property">baseStyles</span><span class="token punctuation">:</span> Active <span class="token punctuation">}</span>, overridingStyles]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    {{[{ baseStyles: Active }, overridingStyles]}}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>
<h2 id="三-style-动态背景"><a href="#三-style-动态背景" class="headerlink" title="三. :style 动态背景"></a>三. :style 动态背景</h2><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"istrue=!istrue"</span> <span class="token symbol">:style</span><span class="token operator">=</span>"<span class="token punctuation">{</span><span class="token string">'height'</span><span class="token punctuation">:</span><span class="token string">'200px'</span><span class="token punctuation">,</span><span class="token string">'width'</span><span class="token punctuation">:</span><span class="token string">'100px'</span><span class="token punctuation">,</span><span class="token string">'background-size'</span><span class="token punctuation">:</span>'<span class="token number">100</span><span class="token string">%,100%',</span><span class="token string">'background-repeat'</span><span class="token punctuation">:</span><span class="token string">'no-repeat'</span><span class="token punctuation">,</span><span class="token string">'background-image'</span><span class="token punctuation">:</span>`<span class="token function">url</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>istrue<span class="token operator">?</span><span class="token string">'../../../static/1.png'</span><span class="token punctuation">:</span><span class="token string">'../../../static/2.png'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>`<span class="token punctuation">}</span>"<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

data<span class="token punctuation">:</span><span class="token punctuation">{</span>
    istrue<span class="token symbol">:false</span>
<span class="token punctuation">}</span></code></pre>
<h1 id="class-总结"><a href="#class-总结" class="headerlink" title=":class 总结"></a>:class 总结</h1><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>
　　<span class="token punctuation">.</span>red<span class="token punctuation">{</span>color<span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>
　　<span class="token punctuation">.</span>blue<span class="token punctuation">{</span>background<span class="token operator">-</span>color<span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>
<h2 id="方法一：单体写法"><a href="#方法一：单体写法" class="headerlink" title="方法一：单体写法"></a>方法一：单体写法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classA"</span><span class="token operator">></span>Demo2<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  classA<span class="token punctuation">:</span> <span class="token string">'class-a'</span>  <span class="token comment" spellcheck="true">//当classA改变时将更新class</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="方法二：对象语法"><a href="#方法二：对象语法" class="headerlink" title="方法二：对象语法"></a>方法二：对象语法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.单或多对象写法</span>
    <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"{red:isred,blue:isbule}"</span>
　 data<span class="token punctuation">:</span><span class="token punctuation">{</span>
        isred<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
      isblue<span class="token punctuation">:</span><span class="token boolean">false</span>
   <span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//2.json对象</span>
 <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"json"</span>
　data<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//把属性都放在一个对象里面</span>
　　 json<span class="token punctuation">:</span><span class="token punctuation">{</span>
　　　     red<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
　　　  blue<span class="token punctuation">:</span><span class="token boolean">true</span>
　　 <span class="token punctuation">}</span>
  <span class="token punctuation">}</span></code></pre>
<h2 id="方法三：数组语法"><a href="#方法三：数组语法" class="headerlink" title="方法三：数组语法"></a>方法三：<strong>数组语法</strong></h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1.整个数组</span>
    <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[reds,blues]"</span><span class="token operator">></span>
　 data<span class="token punctuation">:</span><span class="token punctuation">{</span>
  　　reds<span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//此处的red和blue指的是style中的red类和blue类</span>
　　　blues<span class="token punctuation">:</span><span class="token string">"blue"</span>
　 <span class="token punctuation">}</span>
　
<span class="token comment" spellcheck="true">//2.对象+数组</span>
    <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[classA, classB]"</span>
　 data<span class="token punctuation">:</span><span class="token punctuation">{</span>
  　　classA<span class="token punctuation">:</span> <span class="token string">'class-a'</span><span class="token punctuation">,</span>
          objectClass<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            classB<span class="token punctuation">:</span> <span class="token string">'class-b'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// classB 的值为class-b, 则将classB的值添加到class列表</span>
                classC<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// classC值为false,将不添加classC</span>
            classD<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// classD 值为true，classC将被直接添加到class列表</span>
             <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
     <span class="token comment" spellcheck="true">//渲染后: class="class-a class-b classD"</span>

<span class="token comment" spellcheck="true">//3.数组+三元表达式</span>
<span class="token number">1</span><span class="token operator">></span>
 <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[isActive ? activeClass : '', errorClass]"</span>
 data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
   isActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
   activeClass<span class="token punctuation">:</span> <span class="token string">'active'</span><span class="token punctuation">,</span>
   errorClass<span class="token punctuation">:</span> <span class="token string">'text-danger'</span>
 <span class="token punctuation">}</span>

<span class="token number">2</span><span class="token operator">></span>
 <span class="token operator">&lt;</span>el<span class="token operator">-</span>button  <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"['uploadclass',status === 'view'? 'uploadClass-no':'uploadClass-hover']"</span> <span class="token punctuation">:</span>disabled<span class="token operator">=</span><span class="token string">"status === 'view'"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>
</code></pre>
<h2 id="方法四：利用-computed-的计算属性"><a href="#方法四：利用-computed-的计算属性" class="headerlink" title="方法四：利用 computed 的计算属性"></a>方法四：利用 computed 的计算属性</h2><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"classObject"</span>
     data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          isActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          error<span class="token punctuation">:</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
             classObject <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token punctuation">{</span>
                      active<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isActive <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>error<span class="token punctuation">,</span>
                      text<span class="token operator">-</span>danger<span class="token string">': this.error &amp;&amp; this.error.type === '</span>fatal'
                    <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
        <span class="token punctuation">}</span></code></pre>
<h1 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1><p>总体而言，:class 和:style 语法基本相似，但是需要注意的是<strong>css 属性时要注意有些以</strong><code>**-**</code><strong>连结的词，要改为驼峰式写法，或者是使用单引号括起来。</strong></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>:class</tag>
        <tag>:style</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的动态组件 !is的使用</title>
    <url>/leader755/6934.html</url>
    <content><![CDATA[<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"app-container"</span> v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">"loading"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"baseSet"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu <span class="token symbol">:default</span><span class="token operator">-</span>active<span class="token operator">=</span><span class="token string">"currentView"</span>  mode<span class="token operator">=</span><span class="token string">"horizontal"</span> <span class="token variable">@select</span><span class="token operator">=</span><span class="token string">"handleSelect"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(  Item,Index) in tabList"</span> <span class="token symbol">:key</span><span class="token operator">=</span><span class="token string">"Index"</span> <span class="token symbol">:index</span><span class="token operator">=</span><span class="token string">"Item.label"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token constant">Item</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">-</span>item<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>menu<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>动态地绑定到它的 is 特性，我们让多个组件可以使用同一个挂载点，并动态切换。<span class="token operator">--</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token symbol">:is</span><span class="token operator">=</span><span class="token string">"currentView"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token operator">/</span><span class="token operator">/</span> 导入子组件
  import basecardSet from <span class="token string">'./cardBaseSet'</span>
  import basememberSet from <span class="token string">'./memberInfoSet'</span>
  import basestoreSet from <span class="token string">'./storeCashierSet'</span>
  export default <span class="token punctuation">{</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      basecardSet<span class="token punctuation">,</span>
      basememberSet<span class="token punctuation">,</span>
      basestoreSet
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token operator">/</span><span class="token operator">/</span> <span class="token function">currentView</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token operator">/</span><span class="token operator">/</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
      <span class="token operator">/</span><span class="token operator">/</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        tabList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
          name<span class="token punctuation">:</span> <span class="token string">'基础设置'</span><span class="token punctuation">,</span>
          label<span class="token punctuation">:</span> <span class="token string">'basecardSet'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          name<span class="token punctuation">:</span> <span class="token string">'门店收银'</span><span class="token punctuation">,</span>
          label<span class="token punctuation">:</span> <span class="token string">'basestoreSet'</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
          name<span class="token punctuation">:</span> <span class="token string">'会员资料'</span><span class="token punctuation">,</span>
          label<span class="token punctuation">:</span> <span class="token string">'basememberSet'</span>
        <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        currentView<span class="token punctuation">:</span> <span class="token string">'basecardSet'</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      this<span class="token punctuation">.</span>currentView <span class="token operator">=</span> this<span class="token punctuation">.</span><span class="token variable">$route</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">'basecardSet'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">handleSelect</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> keyPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        this<span class="token punctuation">.</span>currentView <span class="token operator">=</span> key
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

<span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> scoped<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>动态组件</tag>
        <tag>:is 动态组件</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的修饰符!sync和el-dialog弹窗组件</title>
    <url>/leader755/18719.html</url>
    <content><![CDATA[<p>父组件 index.vue：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>info</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myValue<span class="token punctuation">"</span></span> <span class="token attr-name">@valueChanged</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e <span class="token punctuation">=</span><span class="token punctuation">></span> myValue <span class="token punctuation">=</span> e<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>info</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  inport info <span class="token keyword">from</span> <span class="token string">'./info.vue'</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
      components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
          info<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span>
              myValue<span class="token punctuation">:</span> <span class="token number">1234</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>子组件 info.vue：</p>
<pre class=" language-html"><code class="language-html">// info.vue组件定义了一个value 属性， 和一个valueChanged事件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onInput<span class="token punctuation">"</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      value<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">onInput</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"valueChanged"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>通过.sync 可以简化上面代码</p>
<pre class=" language-html"><code class="language-html">// index.vue组件
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>info</span> <span class="token attr-name">:value.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>info</span><span class="token punctuation">></span></span>

//..... methods: { onInput(e) { this.$emit("update:value", e.target.value) } }
//....</code></pre>
<p>实际运用：<br>父组件：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goodsQuery<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!--选取商品弹框--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goodsSelect</span>
      <span class="token attr-name">:showGoodsSelect.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>showGoodsSelect<span class="token punctuation">"</span></span>
      <span class="token attr-name">:dialogWidth</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>860<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goodsSelect</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">import</span> goodsSelect <span class="token keyword">from</span> <span class="token string">"./goodsSelect"</span><span class="token punctuation">;</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"goodsQuery"</span><span class="token punctuation">,</span>
    components<span class="token punctuation">:</span> <span class="token punctuation">{</span> goodsSelect <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        showGoodsSelect<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 选择商品弹窗</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>子组件：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pull-goods<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-dialog</span>
      <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>选择商品<span class="token punctuation">"</span></span>
      <span class="token attr-name">:visible.sync</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShowGoodsSelect<span class="token punctuation">"</span></span>
      <span class="token attr-name">:width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialogWidth + <span class="token punctuation">'</span>px<span class="token punctuation">'</span><span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span> <span class="token attr-name">label-width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>80px;<span class="token punctuation">"</span></span> <span class="token attr-name">inline</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inlineBlock<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span>
              <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectedName<span class="token punctuation">"</span></span>
              <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeSelect<span class="token punctuation">"</span></span>
              <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
              <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">12</span>px</span><span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>
                <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in tradename<span class="token punctuation">"</span></span>
                <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>
                <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>
                <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.key<span class="token punctuation">"</span></span>
              <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
          <span class="token comment" spellcheck="true">&lt;!-- &lt;el-form-item v-if="selectedName == '1'" class="marginleft">
          &lt;el-input v-model="params.condition" placeholder="请输入不超过30个字符" style="width:200px;font-size:12px">&lt;/el-input>
        &lt;/el-form-item>
        &lt;el-form-item v-if="selectedName == '2'" class="marginleft">
          &lt;el-input v-model="params.condition" placeholder="请输入不超过30个数字" style="width:200px;font-size:12px">&lt;/el-input>
        &lt;/el-form-item>
        &lt;el-form-item v-if="selectedName == '3'" class="marginleft">
          &lt;el-input v-model="params.condition" placeholder="请输入" style="width:200px;font-size:12px">&lt;/el-input>
        &lt;/el-form-item>
        &lt;el-form-item v-if="selectedName == '4'" class="marginleft">
          &lt;el-input v-model="params.condition" placeholder="请输入" style="width:200px;font-size:12px">&lt;/el-input>
        &lt;/el-form-item> --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>marginleft<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tkQueryBtn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>查询<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>
        <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>
        <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listLoading<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">@selection-change</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSelectionChange<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
          <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
          <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span>
        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goodsimg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>
                <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.mainImageUrl<span class="token punctuation">"</span></span>
                <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.mainImageUrl + <span class="token punctuation">'</span>?x-oss-process<span class="token punctuation">=</span>image/resize,m_fixed,h_32,w_32<span class="token punctuation">'</span><span class="token punctuation">"</span></span>
              <span class="token punctuation">/></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-else</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~&amp;&amp;/assets/images/logo.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lineStandard<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{scope.row | getGoodsStr}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upc<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品条码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
          <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shopBrandName<span class="token punctuation">"</span></span>
          <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品品牌<span class="token punctuation">"</span></span>
        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>
      <span class="token comment" spellcheck="true">&lt;!-- &lt;pagination position="right" v-show="total>0" :total="total" :page.sync="params.page" :limit.sync="params.rows" @pagination="tkQueryBtn" /> --></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>isShowGoodsSelect<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>取 消<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>confirmBtn(isShowGoodsSelect<span class="token punctuation">=</span>false)<span class="token punctuation">"</span></span>
          <span class="token punctuation">></span></span>确 定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span>
        <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-dialog</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"showGoodsSelect"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      isShowGoodsSelect<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>showGoodsSelect<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update:showGoodsSelect"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>element</tag>
        <tag>el-dialog 弹窗</tag>
      </tags>
  </entry>
  <entry>
    <title>vue的混入mixins</title>
    <url>/leader755/63393.html</url>
    <content><![CDATA[<h2 id="1-gt-使用"><a href="#1-gt-使用" class="headerlink" title="1&gt;使用"></a>1&gt;使用</h2><p>1、在您的 Vue 应用程序内部，我们将创建一个名为 mixins 的文件夹，并且新建文件命名为 nomeMixins.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    hello<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello from mixin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>2、在.vue 组件中引入 Mixin 的 js 文件 nomeMixins.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
  <span class="token keyword">import</span> nomeMixins <span class="token keyword">from</span> <span class="token string">'&amp;&amp;/mixins/nomeMixins'</span>

  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>nomeMixins<span class="token punctuation">]</span><span class="token punctuation">,</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    created <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">// => "hello from mixin!"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<h2 id="2-gt-同名选项合并规则"><a href="#2-gt-同名选项合并规则" class="headerlink" title="2&gt;同名选项合并规则"></a>2&gt;同名选项合并规则</h2><blockquote>
<p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”。</p>
</blockquote>
<h3 id="1-gt-数据-data-对象合并，组件优先"><a href="#1-gt-数据-data-对象合并，组件优先" class="headerlink" title="1&gt;数据 data 对象合并，组件优先"></a>1&gt;数据 data 对象合并，组件优先</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
      foo<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      message<span class="token punctuation">:</span> <span class="token string">"goodbye"</span><span class="token punctuation">,</span>
      bar<span class="token punctuation">:</span> <span class="token string">"def"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// => { message: "goodbye", foo: "abc", bar: "def" }</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2-gt-同名钩子函数合并，混入对象先执行，组件对象后执行"><a href="#2-gt-同名钩子函数合并，混入对象先执行，组件对象后执行" class="headerlink" title="2&gt;同名钩子函数合并，混入对象先执行，组件对象后执行"></a>2&gt;同名钩子函数合并，混入对象先执行，组件对象后执行</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"混入对象的钩子被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"组件钩子被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// => "混入对象的钩子被调用"</span>
<span class="token comment" spellcheck="true">// => "组件钩子被调用"</span></code></pre>
<h3 id="3-gt-为-methods、components-和-directives-的同名函数或者组件时，组件覆盖混入值"><a href="#3-gt-为-methods、components-和-directives-的同名函数或者组件时，组件覆盖混入值" class="headerlink" title="3&gt;为 methods、components  和  directives 的同名函数或者组件时，组件覆盖混入值"></a>3&gt;为 methods、components  和  directives 的同名函数或者组件时，组件覆盖混入值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mixin <span class="token operator">=</span> <span class="token punctuation">{</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    foo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    conflicting<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"from mixin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>mixin<span class="token punctuation">]</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    bar<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    conflicting<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"from self"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

vm<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "foo"</span>
vm<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "bar"</span>
vm<span class="token punctuation">.</span><span class="token function">conflicting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => "from self"</span></code></pre>
<h2 id="3-gt-全局混入"><a href="#3-gt-全局混入" class="headerlink" title="3&gt;全局混入"></a>3&gt;全局混入</h2><blockquote>
<p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响<strong>每一个</strong>之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。<br>请谨慎使用全局混入，因为它会影响每个单独创建的 Vue 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，就像上面示例一样。推荐将其作为<a href="https://cn.vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">插件</a>发布，以避免重复应用混入。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 为自定义的选项 'myOption' 注入一个处理器。</span>
Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> myOption <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>myOption<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>myOption<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myOption<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  myOption<span class="token punctuation">:</span> <span class="token string">"hello!"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// => "hello!"</span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue 混入</tag>
        <tag>mixinx</tag>
      </tags>
  </entry>
  <entry>
    <title>win安装Nodejs报2503、2502错误解决方案</title>
    <url>/leader755/36022.html</url>
    <content><![CDATA[<blockquote>
<p><strong>出现 error 2502 和 error2503 是因为 win8 的权限问题所导致的，具体说就是要以管理员身份进行安装就可以解决，下面详细来说一下。</strong></p>
</blockquote>
<h2 id="1-创建-nodejs-文件夹"><a href="#1-创建-nodejs-文件夹" class="headerlink" title="1.创建 nodejs 文件夹"></a>1.创建 nodejs 文件夹</h2><p>在 C 盘根目录下创建 ndejs 文件夹，并将 nodejs 安装包放入新创建的文件夹。</p>
<blockquote>
<p>注意此步骤是保持 nodejs 的安装包目录和安装目录在同一目录</p>
</blockquote>
<h2 id="2-以管理员身份运行-cmd-命令"><a href="#2-以管理员身份运行-cmd-命令" class="headerlink" title="2.以管理员身份运行 cmd 命令"></a><strong>2.</strong>以管理员身份运行 cmd 命令</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1599533265573-89e2d57d-38de-4829-a750-ceac318ba3f9.webp#height=618&id=geZpU&originHeight=618&originWidth=388&originalType=binary&size=0&status=done&style=none&width=388" alt=""><br>以管理员身份运行 cmd</p>
<h2 id="3-cd-到新创建的-nodejs-文件夹"><a href="#3-cd-到新创建的-nodejs-文件夹" class="headerlink" title="3.cd 到新创建的 nodejs 文件夹"></a>3.cd 到新创建的 nodejs 文件夹</h2><pre class=" language-powershell"><code class="language-powershell">cd <span class="token operator">/</span>nodejs</code></pre>
<h2 id="4-用-msiexec-安装"><a href="#4-用-msiexec-安装" class="headerlink" title="4.用 msiexec 安装"></a>4.用 msiexec 安装</h2><p>文件名为安装包的 node 文件名（根据实际的路径来安装）</p>
<pre class=" language-powershell"><code class="language-powershell">msiexec <span class="token operator">/</span>package D:\软件\nodejs\node<span class="token operator">-</span>v12<span class="token punctuation">.</span>18<span class="token punctuation">.</span>3<span class="token operator">-</span>x64<span class="token punctuation">.</span>msi</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599900205862-629859d4-69c3-42fe-ad47-fb4e4a345e11.png#height=653&id=fkkAf&margin=%5Bobject%20Object%5D&name=image.png&originHeight=653&originWidth=1003&originalType=binary&size=56220&status=done&style=none&width=1003" alt="image.png"></p>
<p>至此，安装完成！<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1599533265538-1f35581b-43c0-417e-a6d9-37765f47a9c4.webp#height=187&id=BSia0&originHeight=187&originWidth=605&originalType=binary&size=0&status=done&style=none&width=605" alt=""><br>查看 nodejs 版本</p>
<h2 id="5-查看-node-和-npm-版本"><a href="#5-查看-node-和-npm-版本" class="headerlink" title="5.查看 node 和 npm 版本"></a>5.查看 node 和 npm 版本</h2><pre class=" language-powershell"><code class="language-powershell">node <span class="token operator">-</span>v
npm <span class="token operator">-</span>v</code></pre>
<h2 id="6-配置环境变量"><a href="#6-配置环境变量" class="headerlink" title="6.配置环境变量"></a>6.配置环境变量</h2><blockquote>
<p>一般情况下，系统默认会设置好环境变量，但是偶尔会出现问题。需要自己去配置环境变量</p>
</blockquote>
<h3 id="6-1-配置-npm-的全局模块的存放路径以及-cache-的路径"><a href="#6-1-配置-npm-的全局模块的存放路径以及-cache-的路径" class="headerlink" title="6.1.配置 npm 的全局模块的存放路径以及 cache 的路径"></a>6.1.配置 npm 的全局模块的存放路径以及 cache 的路径</h3><p>在 nodejs 文件夹 下建立 “node_global”及”node_cache” 两个文件夹<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599900234284-c483126a-bf49-40b0-8bad-caba75217516.png#height=352&id=BaWee&margin=%5Bobject%20Object%5D&name=image.png&originHeight=352&originWidth=630&originalType=binary&size=35229&status=done&style=none&width=630" alt="image.png"></p>
<h3 id="6-2-启动-cmd，输入"><a href="#6-2-启动-cmd，输入" class="headerlink" title="6.2 启动 cmd，输入"></a>6.2 启动 cmd，输入</h3><blockquote>
<p>路径需要符合自己的实际情况</p>
</blockquote>
<pre class=" language-powershell"><code class="language-powershell">npm config <span class="token function">set</span> prefix <span class="token string">"D:\软件\nodejs\node_global"</span>
npm config <span class="token function">set</span> cache <span class="token string">"D:\软件\nodejs\node_cache"</span></code></pre>
<h3 id="6-3-设置系统变量"><a href="#6-3-设置系统变量" class="headerlink" title="6.3 设置系统变量"></a>6.3 设置系统变量</h3><p>关闭 cmd，打开系统对话框，“我的电脑” 右键 “属性”-“高级系统设置”-“高级”-“环境变量”。如下图</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599626616271-4293e33c-c83e-4d41-abe5-a47001c0bc3a.png#height=636&id=HCGc5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=636&originWidth=1072&originalType=binary&size=68307&status=done&style=none&width=1072" alt="image.png"></p>
<blockquote>
<ul>
<li>*<em>1&gt; 用户变量 *</em><ul>
<li>*<em>在 用户变量 Path 中添加  *</em></li>
<li>D:\软件<strong>\nodejs;</strong></li>
<li>D:\软件<strong>\nodejs\node_modules\npm;</strong></li>
<li>D:\软件*<em>\nodejs\node_global;    *</em></li>
<li>** 前面的分号不能少**</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>2&gt;环境变量</strong><ul>
<li><strong>在系统变量下新建 “NODE_PATH”，</strong></li>
<li><strong>输入”</strong>D:\软件<strong>\nodejs\node_global\node_modules“。</strong></li>
<li><strong>以后安装安装的 加上 -g 都会下载这个下面</strong></li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>如何绕开referrer防盗链</title>
    <url>/leader755/49766.html</url>
    <content><![CDATA[<h2 id="什么是-referrer"><a href="#什么是-referrer" class="headerlink" title="什么是 referrer"></a>什么是 referrer</h2><p>当一用户点击当前页面中的一个链接，然后跳转到目标页面时，目标页面会收到一个信息，即用户是从哪个源链接跳转过来的。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595703140078-870fec1d-0742-4dea-828a-1f32819af187.png#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1086&originWidth=1184&size=153142&status=done&style=none&width=592" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1595702418075-1743cd6e-ed7c-4b5b-9f96-7f89fff17373.webp#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&originHeight=543&originWidth=896&size=0&status=done&style=none&width=896" alt=""><br>也就是说，当你发起一个 http 请求，请求头中的<code>referrer</code>字段就说明了你是从哪个页面发起该请求的。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有时候我们需要控制这个<code>referrer</code>字段的值，即是否让其显示在请求头中，或者是否显示完整路径等。尤其是在以下两个使用场景：</p>
<h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><p>在社交网站的个人中心页面，也许会存在一些外链，这时候社交网站肯定不希望用户在点击这些链接跳转到其他第三方网站时会将自己个人中心的 URL 信息显示在<code>referrer</code>字段中传过去，尤其是个人中心页面的 URL 往往会带着用户数据和一些敏感信息。这时候可以选择不显示来源页面 URL 信息或者只显示一个网站根地址 hostname。</p>
<h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>有些使用了 https 的网站，可能在 URL 中使用一个参数（sid）来作为用户身份凭证，而又需要引入其他 https 网站的资源，这种情况，网站肯定不希望泄露用户的身份凭证信息。当 https 网站需要引入不安全的 http 网站的资源或者有链接要跳转到 http 网站时，这时候将 https 源网站的 URL 信息传过去也是不太安全的。<br>当然还有其他情况下需要<code>referrer</code>的值，比如最近公司所做的项目中，有一个请求由于请求头过大导致响应是 400，我们的<code>Referrer Policy</code>是默认的情况，显示的<code>referrer</code>是完整的 URL 信息，该 URL 带了很多敏感数据比如加密后的 token，sessionID 等，长度特别长，请求头中的 cookie 和请求的 URL 也带着很大块的信息，最终我们决定让<code>referrer</code>只携带网站根地址的信息而不是其完整路径，由此减小了 header 的大小。</p>
<h2 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h2><p><code>Referrer-Policy</code>的作用就是为了控制请求头中<code>referrer</code>的内容，目前<code>Referrer-Policy</code>只包含以下几种值：</p>
<table>
<thead>
<tr>
<th align="left">策略名称</th>
<th align="left">属性值（新）</th>
<th align="left">属性值（旧）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">No Referrer</td>
<td align="left">no-referrer</td>
<td align="left">never</td>
</tr>
<tr>
<td align="left">No Referrer When Downgrade</td>
<td align="left">no-referrer-when-downgrade</td>
<td align="left">default</td>
</tr>
<tr>
<td align="left">Origin Only</td>
<td align="left">origin</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Origin When Cross-origin</td>
<td align="left">origin-when-crossorigin</td>
<td align="left">-</td>
</tr>
<tr>
<td align="left">Unsafe URL</td>
<td align="left">unsafe-url</td>
<td align="left">always</td>
</tr>
</tbody></table>
<p>简单介绍下这五种类型的具体含义：</p>
<ul>
<li><strong>No Referrer</strong>：任何情况下都不发送 Referrer 信息；</li>
<li><strong>No Referrer When Downgrade</strong>：仅当发生协议降级（如 HTTPS 页面引入 HTTP 资源，从 HTTPS 页面跳到 HTTP 等）时不发送 Referrer 信息。这个规则是现在大部分浏览器默认所采用的；</li>
<li><strong>Origin Only</strong>：发送只包含 host 部分的 Referrer。启用这个规则，无论是否发生协议降级，无论是本站链接还是站外链接，都会发送 Referrer 信息，但是只包含协议 + host 部分（不包含具体的路径及参数等信息）；</li>
<li><strong>Origin When Cross-origin</strong>：仅在发生跨域访问时发送只包含 host 的 Referrer，同域下还是完整的。它与 <code>Origin Only</code> 的区别是多判断了是否 <code>Cross-origin</code>。需要注意的是协议、域名和端口都一致，才会被浏览器认为是同域；</li>
<li><strong>Unsafe URL</strong>：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息。正如其名，这是最宽松而最不安全的策略；</li>
</ul>
<h2 id="Referrer-Policy-更改方法"><a href="#Referrer-Policy-更改方法" class="headerlink" title="Referrer-Policy 更改方法"></a>Referrer-Policy 更改方法</h2><p>可以有以下 4 种方法：</p>
<p><strong>1.</strong> <code>Referrer-Policy</code> HTTP <code>header</code>设置：</p>
<pre class=" language-javascript"><code class="language-javascript">Referrer<span class="token operator">-</span>Policy<span class="token punctuation">:</span> origin</code></pre>
<p><strong>2.</strong> 通过<code>&lt;meta&gt;</code>元素改变<code>Referrer Policy</code>，直接修改名为<code>referrer</code>的内容</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre>
<p><strong>3.</strong> 给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener"><code>&lt;img&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"><code>&lt;iframe&gt;</code></a>, 或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>referrerpolicy</code>属性</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre>
<p><strong>4.</strong> 如需设置不显示<code>referrer</code>信息时，也可以给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>rel</code>的链接关系。</p>
<pre><code>&lt;a href=&quot;http://example.com&quot; rel=&quot;noreferrer&quot;&gt;复制代码</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用何种<code>Referrer Policy</code>取决于网站的需求，但是一般来说，<code>unsafe-url</code>是不太建议用的，同样，如果是只想显示网站的根地址，那么建议用<code>strict-origin</code>和 s<code>trict-origin-when-cross-origin</code>。如果 URL 中没有什么敏感信息，那就默认使用<code>no-referrer-when-downgrade</code>。</p>
<p>特别声明，文章转载自：<a href="https://juejin.im/post/5cd81b59518825686a06fd05" target="_blank" rel="noopener">https://juejin.im/post/5cd81b59518825686a06fd05</a> 。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>referrer</tag>
        <tag>防盗链</tag>
      </tags>
  </entry>
  <entry>
    <title>字体图标iconfont的使用</title>
    <url>/leader755/48604.html</url>
    <content><![CDATA[<h2 id="1-将从阿里矢量图标库中图标并下载到本地"><a href="#1-将从阿里矢量图标库中图标并下载到本地" class="headerlink" title="1.将从阿里矢量图标库中图标并下载到本地"></a>1.将从阿里矢量图标库中图标并下载到本地</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/241787/1559198368032-244dd1df-98ee-42a7-a886-6c7a2b4c421e.gif#height=563&id=pF2gQ&name=icon.gif&originHeight=669&originWidth=788&originalType=binary&ratio=1&size=74443&status=done&style=none&width=663" alt="icon.gif"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/241787/1559199586713-8b5878ab-a7d9-4d2b-96a1-29002857e6dc.png#height=276&id=QpKKp&name=image.png&originHeight=276&originWidth=949&originalType=binary&ratio=1&size=35462&status=done&style=none&width=949" alt="image.png"></p>
<h2 id="2-使用图标（三种使用方式）"><a href="#2-使用图标（三种使用方式）" class="headerlink" title="2.使用图标（三种使用方式）"></a>2.使用图标（三种使用方式）</h2><h3 id="1-使用-FontClass（最简单方式，支持字体样式定义但不支持多色字体）"><a href="#1-使用-FontClass（最简单方式，支持字体样式定义但不支持多色字体）" class="headerlink" title="1.使用 FontClass（最简单方式，支持字体样式定义但不支持多色字体）"></a>1.使用 FontClass（最简单方式，支持字体样式定义但不支持多色字体）</h3><p>fontClass 支持字体的样式定义，但不支持多色字体，兼容性良好，当要替换图标时，只需要修改 class 里面的 Unicode 引用。只需要 html 和 csss。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/241787/1559199879455-edc92070-a34e-4694-95bf-b265f4e41391.png#height=258&id=Kakij&name=image.png&originHeight=258&originWidth=888&originalType=binary&ratio=1&size=15700&status=done&style=none&width=888" alt="image.png"></p>
<h4 id="第一步：引入项目下面生成的-fontclass-代码："><a href="#第一步：引入项目下面生成的-fontclass-代码：" class="headerlink" title="第一步：引入项目下面生成的 fontclass 代码："></a>第一步：引入项目下面生成的 fontclass 代码：</h4><pre class=" language-css"><code class="language-css">&lt;link rel=<span class="token string">"stylesheet"</span> href=<span class="token string">"./iconfont.css"</span>></code></pre>
<h4 id="第二步：挑选相应图标并获取类名，应用于页面："><a href="#第二步：挑选相应图标并获取类名，应用于页面：" class="headerlink" title="第二步：挑选相应图标并获取类名，应用于页面："></a>第二步：挑选相应图标并获取类名，应用于页面：</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 示例 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>FontClass使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-shouye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-ziyuan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-gerenzhongxin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--使用css定义样式--></span>
.iconfont { font-size: 30px; color: red; font-family: myFirstFont; font-weight:
bold; }</code></pre>
<h3 id="2-使用-Unicoded-兼容性最好，支持字体的样式定义但不支持多色字体"><a href="#2-使用-Unicoded-兼容性最好，支持字体的样式定义但不支持多色字体" class="headerlink" title="2.使用 Unicoded(兼容性最好，支持字体的样式定义但不支持多色字体)"></a>2.使用 Unicoded(兼容性最好，支持字体的样式定义但不支持多色字体)</h3><p>支持字体的样式定义，但不支持多色字体，兼容性最好，支持 IE6+，及所有现代浏览器。支持按字体的方式去动态调整图标大小，颜色等等。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/241787/1559200324546-d9c3e6ba-e781-4dc6-a363-a3fe5316a3e9.png#height=253&id=tMrLp&name=image.png&originHeight=253&originWidth=738&originalType=binary&ratio=1&size=15813&status=done&style=none&width=738" alt="image.png"></p>
<h4 id="第一步：拷贝项目下面生成的-font-face"><a href="#第一步：拷贝项目下面生成的-font-face" class="headerlink" title="第一步：拷贝项目下面生成的  @font-face"></a>第一步：拷贝项目下面生成的  @font-face</h4><p>引入以下文件：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1624328192244-4a5614f2-6b56-4ed0-9632-d782f2a91347.png#clientId=ue35b2874-ddcc-4&from=paste&height=134&id=ua8b9fd1f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=134&originWidth=646&originalType=binary&ratio=1&size=13112&status=done&style=none&taskId=u2337edce-fd88-4729-8725-a8b0dfcb7cb&width=646" alt="image.png"><br>注意需要将对应的文件引入，和注意修改引入文件时的路径。</p>
<pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"iconfont"</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("iconfont.eot")</span><span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url">url("iconfont.eot?#iefix")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"embedded-opentype"</span><span class="token punctuation">)</span>, <span class="token url">url("iconfont.woff2")</span>
      <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff2"</span><span class="token punctuation">)</span>, <span class="token url">url("iconfont.woff")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"woff"</span><span class="token punctuation">)</span>, <span class="token url">url("iconfont.ttf")</span>
      <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"truetype"</span><span class="token punctuation">)</span>, <span class="token url">url("iconfont.svg#iconfont")</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="第二步：定义使用-iconfont-的样式"><a href="#第二步：定义使用-iconfont-的样式" class="headerlink" title="第二步：定义使用 iconfont 的样式"></a>第二步：定义使用 iconfont 的样式</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.iconfont</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"iconfont"</span> <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>
  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="第三步：挑选相应图标并获取字体编码，应用于页面"><a href="#第三步：挑选相应图标并获取字体编码，应用于页面" class="headerlink" title="第三步：挑选相应图标并获取字体编码，应用于页面"></a>第三步：挑选相应图标并获取字体编码，应用于页面</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#x33;">&amp;#x33;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 示例 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Unicoded的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe61f;">&amp;#xe61f;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe615;">&amp;#xe615;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&#xe60d;">&amp;#xe60d;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 示例 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Unicoded的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-shouye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-shouye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iconfont icon-personal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3-使用-Symbol（兼容性最差，支持字体的样式定义且支持多色字体）"><a href="#3-使用-Symbol（兼容性最差，支持字体的样式定义且支持多色字体）" class="headerlink" title="3.使用 Symbol（兼容性最差，支持字体的样式定义且支持多色字体）"></a>3.使用 Symbol（兼容性最差，支持字体的样式定义且支持多色字体）</h3><p>支持多色图标了，通过一些技巧，支持像字体那样，通过 font-size, color 来调整样式。兼容性较差，支持 IE9+，及现代浏览器。浏览器渲染 SVG 的性能一般，还不如 png。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/241787/1559201626750-eaf83fe2-e8dc-4847-afec-6d8cb6d1a108.png#height=234&id=aANBN&name=image.png&originHeight=234&originWidth=761&originalType=binary&ratio=1&size=15752&status=done&style=none&width=761" alt="image.png"></p>
<h4 id="第一步：引入项目下面生成的-symbol-代码："><a href="#第一步：引入项目下面生成的-symbol-代码：" class="headerlink" title="第一步：引入项目下面生成的 symbol 代码："></a>第一步：引入项目下面生成的 symbol 代码：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"./iconfont.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h4 id="第二步：加入通用-CSS-代码（引入一次就行）：设置图标的宽高"><a href="#第二步：加入通用-CSS-代码（引入一次就行）：设置图标的宽高" class="headerlink" title="第二步：加入通用 CSS 代码（引入一次就行）：设置图标的宽高"></a>第二步：加入通用 CSS 代码（引入一次就行）：设置图标的宽高</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;style>
<span class="token class">.icon</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1</span>em<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> -<span class="token number">0.15</span>em<span class="token punctuation">;</span>
  <span class="token property">fill</span><span class="token punctuation">:</span> currentColor<span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
&lt;/style></code></pre>
<h4 id="第三步：挑选相应图标并获取类名，应用于页面："><a href="#第三步：挑选相应图标并获取类名，应用于页面：" class="headerlink" title="第三步：挑选相应图标并获取类名，应用于页面："></a>第三步：挑选相应图标并获取类名，应用于页面：</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-xxx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!-- 示例--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Symbol的使用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-shouye<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-ziyuan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>购物车<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>use</span> <span class="token attr-name"><span class="token namespace">xlink:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#icon-gerenzhongxin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>use</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>个人中心<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>

<span class="token comment" spellcheck="true">&lt;!--定义样式--></span>
.icon { width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor;
overflow: hidden; font-size: 50px; color: red;<span class="token comment" spellcheck="true">&lt;!--不生效--></span>
}</code></pre>
<h4 id="注意：iconfont-图标-symbol-引用方式，有的图标不能通过设置-color-样式来修改颜色的解决办法"><a href="#注意：iconfont-图标-symbol-引用方式，有的图标不能通过设置-color-样式来修改颜色的解决办法" class="headerlink" title="注意：iconfont 图标 symbol 引用方式，有的图标不能通过设置 color 样式来修改颜色的解决办法"></a>注意：<a href="https://www.cnblogs.com/jopny/p/9454785.html" target="_blank" rel="noopener">iconfont 图标 symbol 引用方式，有的图标不能通过设置 color 样式来修改颜色的解决办法</a></h4><p>原因：<br>当从阿里图库中图标被添加至项目，如果编辑过项目图标的颜色或者图标本身是有颜色的，那么在通过 symbol 获取图标时会在 svg 的 path 中增加 fill 属性，导致无法更改颜色，如果需要动态修改颜色，需要从新添加该图标(本身图标无色)，获取在 symbol 的 js 文件中程序删除 fill 属性。</p>
<p>解决办法：</p>
<ol>
<li>下载 Js 文件后，用 Notepad++打开，然后用正则表达式查找：*<em>fill=”#……” *</em>，替换。</li>
<li>iconfont.cn 上，全选项目中的文件，应用批量操作–&gt;批量去色<br><img src="https://cdn.nlark.com/yuque/0/2019/gif/241787/1559203331693-32eaceda-a122-4c6c-8838-fb0a8ce3eba6.gif#height=557&id=DUTVp&name=icon1.gif&originHeight=669&originWidth=788&originalType=binary&ratio=1&size=268422&status=done&style=none&width=656" alt="icon1.gif"></li>
</ol>
<h4 id="成果展示："><a href="#成果展示：" class="headerlink" title="成果展示："></a>成果展示：</h4><p><img src="https://cdn.nlark.com/yuque/0/2019/png/241787/1559202962166-d0b96c4c-50fb-4e49-aece-3fc7e0346aa4.png#height=631&id=n460r&name=image.png&originHeight=631&originWidth=705&originalType=binary&ratio=1&size=35616&status=done&style=none&width=705" alt="image.png"></p>
<h2 id="3-before-after-里-iconfont-的使用方法"><a href="#3-before-after-里-iconfont-的使用方法" class="headerlink" title="3.:before/:after 里 iconfont 的使用方法"></a>3.:before/:after 里 iconfont 的使用方法</h2><p>:before/:after 是伪元素，fontawesome 是在伪元素的 content 加入不同的 Unicode 来渲染不同的图标的。<br>可以放在 content 里啊，直接放在 html 里的那是字符实体编码，比如<code>&amp;#xe7bb;</code>  其中<code>&amp;#</code>是开头用以标明这是字符实体，<code>x</code>表示这是十六进制，而 CSS 的 content 接受的也是 16 进制的 Unicode 编码，所以可以直接写  <code>content: &quot;\e7bb&quot;;</code><br>unicode：&#e61f; ====&gt;  伪类   content :’\e61f’;</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span><span class="token pseudo-element">:before</span> </span><span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"iconfont"</span> <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>
  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e61f"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>css3</category>
      </categories>
      <tags>
        <tag>iconfont</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序中setData修改属性值</title>
    <url>/leader755/16589.html</url>
    <content><![CDATA[<h2 id="1-修改对象属性"><a href="#1-修改对象属性" class="headerlink" title="1.修改对象属性"></a>1.修改对象属性</h2><p>##</p>
<h3 id="1-gt-第一种"><a href="#1-gt-第一种" class="headerlink" title="1&gt;第一种"></a>1&gt;第一种</h3><pre class=" language-javascript"><code class="language-javascript"> changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'person.name'</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>###</p>
<h3 id="2-gt-第二种"><a href="#2-gt-第二种" class="headerlink" title="2&gt;第二种"></a>2&gt;第二种</h3><pre class=" language-javascript"><code class="language-javascript">changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string">'person.name'</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>#</p>
<h2 id="2-修改数组属性"><a href="#2-修改数组属性" class="headerlink" title="2.修改数组属性"></a>2.修改数组属性</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span><span class="token string">"array["</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"].amount"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> amount<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>setData</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序之间互相跳转</title>
    <url>/leader755/62737.html</url>
    <content><![CDATA[<h2 id="一-背景："><a href="#一-背景：" class="headerlink" title="一.背景："></a>一.背景：</h2><blockquote>
<p>在小程序里可以打开另一个小程序，让小程序之间可以互相连接跳转，类似于网页之间通过 URL 链接互相跳转。不仅可以打开另一个小程序的首页，还可以打开另一个小程序的任何一个页面，这让小程序之间的功能连接更自由。</p>
</blockquote>
<h2 id="二-解决方案："><a href="#二-解决方案：" class="headerlink" title="二.解决方案："></a>二.解决方案：</h2><p>小程序之间互相跳转，使用 *<em>wx.navigateToMiniProgram *</em>来实现。<br>不同主体的小程序可以相互跳转，不需要关联小程序（重点）。<br>官方文档：<a href="https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/navigate/wx.navigateToMiniProgram.html</a></p>
<h2 id="三-使用限制"><a href="#三-使用限制" class="headerlink" title="三.使用限制"></a>三.使用限制</h2><h5 id="1-需要用户触发跳转"><a href="#1-需要用户触发跳转" class="headerlink" title="1.需要用户触发跳转"></a>1.需要用户触发跳转</h5><p>从 2.3.0 版本开始，若用户未点击小程序页面任意位置，则开发者将无法调用此接口自动跳转至其他小程序。</p>
<h5 id="2-需要用户确认跳转"><a href="#2-需要用户确认跳转" class="headerlink" title="2.需要用户确认跳转"></a>2.需要用户确认跳转</h5><p>从 2.3.0 版本开始，在跳转至其他小程序前，将统一增加弹窗，询问是否跳转，用户确认后才可以跳转其他小程序。如果用户点击取消，则回调 fail cancel。</p>
<h5 id="3-无需声明跳转名单，不限跳转数量（众测中）"><a href="#3-无需声明跳转名单，不限跳转数量（众测中）" class="headerlink" title="3.无需声明跳转名单，不限跳转数量（众测中）"></a>3.无需声明跳转名单，不限跳转数量（众测中）</h5><ol>
<li>从 2020 年 4 月 24 日起，使用跳转其他小程序功能将无需在全局配置中声明跳转名单，调用此接口时将不再校验所跳转的 AppID 是否在 navigateToMiniProgramAppIdList 中。</li>
<li>从 2020 年 4 月 24 日起，跳转其他小程序将不再受数量限制，使用此功能时请注意遵守运营规范。</li>
</ol>
<h2 id="四-运营规范"><a href="#四-运营规范" class="headerlink" title="四.运营规范"></a>四.运营规范</h2><p>平台将坚决打击小程序盒子等互推行为，使用此功能时请严格遵守<a href="https://developers.weixin.qq.com/miniprogram/product/#_5-10-%E4%BA%92%E6%8E%A8%E8%A1%8C%E4%B8%BA" target="_blank" rel="noopener">《微信小程序平台运营规范》</a>，若发现小程序违反运营规范将被下架处理。</p>
<h2 id="五-关于调试"><a href="#五-关于调试" class="headerlink" title="五.关于调试"></a>五.关于调试</h2><ul>
<li>在开发者工具上调用此 API 并不会真实的跳转到另外的小程序，但是开发者工具会校验本次调用跳转是否成功。<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">详情</a></li>
<li>开发者工具上支持被跳转的小程序处理接收参数的调试。<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/different.html#%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95%E6%94%AF%E6%8C%81" target="_blank" rel="noopener">详情</a></li>
</ul>
<h2 id="六-代码示例"><a href="#六-代码示例" class="headerlink" title="六.代码示例"></a>六.代码示例</h2><table>
<thead>
<tr>
<th>envVersion 的 合法值</th>
<th>说明（要打开的小程序版本。仅在当前小程序为开发版或体验版时此参数有效。如果当前小程序是正式版，则打开的小程序必定是正式版。）</th>
</tr>
</thead>
<tbody><tr>
<td>develop</td>
<td>开发版</td>
</tr>
<tr>
<td>trial</td>
<td>体验版</td>
</tr>
<tr>
<td>release</td>
<td>正式版（默认值）</td>
</tr>
</tbody></table>
<p><strong>示例代码：</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 方法一 事件跳转<span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>button bindtap<span class="token operator">=</span><span class="token string">"toNavigate"</span><span class="token operator">></span>Leader755博客<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>

<span class="token function">toNavigate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    wx<span class="token punctuation">.</span><span class="token function">navigateToMiniProgram</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    appId<span class="token punctuation">:</span> <span class="token string">'wx106ee470bb6fff70'</span><span class="token punctuation">,</span>
    path<span class="token punctuation">:</span> <span class="token string">'pages/index/index'</span><span class="token punctuation">,</span>
    extraData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      foo<span class="token punctuation">:</span> <span class="token string">'bar'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    envVersion<span class="token punctuation">:</span> <span class="token string">'develop'</span><span class="token punctuation">,</span>
    <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳转小程序成功'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">fail</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'跳转小程序失败'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>


<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 方法二 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>navigator target<span class="token operator">=</span><span class="token string">"miniProgram"</span> open<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">'navigate'</span> app<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"wx106ee470bb6fff70"</span> version<span class="token operator">=</span><span class="token string">"release"</span><span class="token operator">></span>Leader755博客<span class="token operator">&lt;</span><span class="token operator">/</span>navigator<span class="token operator">></span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/241787/1644405432217-b5562973-3873-45e6-936c-212000a13f4a.jpeg#clientId=ue1231a42-0dea-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=582&id=u598fb0e4&margin=%5Bobject%20Object%5D&name=be2ee931cba2b28c321e1881cfa0478.jpg&originHeight=2532&originWidth=1170&originalType=binary&ratio=1&rotation=0&showTitle=false&size=120730&status=done&style=none&taskId=uafad4d95-e19f-4ce6-b099-88b28ae296b&title=&width=269" alt="be2ee931cba2b28c321e1881cfa0478.jpg"></p>
]]></content>
      <categories>
        <category>微信</category>
      </categories>
      <tags>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序轮播图片高度自适应</title>
    <url>/leader755/23959.html</url>
    <content><![CDATA[<blockquote>
<p>微信小程序中使用 swiper 组件可以实现图片轮播效果，但是默认 swiper 高度是固定的 150px，如果项目中图片大于固定高度就会被隐藏，所以本篇文章要实现轮播图片的高度自适应。</p>
</blockquote>
<h2 id="1-以最高的图片为基准（需要考虑图片全部一样的大小）"><a href="#1-以最高的图片为基准（需要考虑图片全部一样的大小）" class="headerlink" title="1.以最高的图片为基准（需要考虑图片全部一样的大小）"></a>1.以最高的图片为基准（需要考虑图片全部一样的大小）</h2><blockquote>
<p>关于小程序轮播图自适应的问题，目前网上的资料不少，但是都是目前这种，不会随着图片的高度去变化。会以最高的一张图片高度为基准。正常的需求应该都能满足，但是现在的需求是需要随着图片的高度去改变。所以有了<a href="#VetWA">第二点</a>。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/gif/241787/1611053205896-f04f684a-51cb-46f0-bcd8-5b8409af5d6c.gif#height=557&id=fTs86&margin=%5Bobject%20Object%5D&name=%E5%8A%A8%E6%80%81%E8%BD%AE%E6%92%AD%E5%9B%BE%E9%AB%98%E5%BA%A61.gif&originHeight=557&originWidth=406&originalType=binary&size=5746409&status=done&style=none&width=406" alt="动态轮播图高度1.gif"></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token style-attr language-css"><span class="token attr-name">
  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">height:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>swiperHeight<span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>t-swiper<span class="token punctuation">"</span></span>
  <span class="token attr-name">indicator-dots</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{indicatordots}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">indicator-active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{color}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{autoplay}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{interval}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{duration}}<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{imgUrls}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span> <span class="token attr-name">bindload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>goheight<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    imgUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"img/1.jpg"</span><span class="token punctuation">,</span> <span class="token string">"img/2.jpg"</span><span class="token punctuation">,</span> <span class="token string">"img/3.jpg"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    indicatordots<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否显示面板指示点</span>
    autoplay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否自动切换</span>
    interval<span class="token punctuation">:</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//自动切换时间间隔</span>
    duration<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//滑动动画时长</span>
    color<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前选中的指示点颜色</span>
    swiperHeight<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//swiper高度</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  goheight<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> width <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>windowWidth<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取可使用窗口宽度</span>
    <span class="token keyword">var</span> imgheight <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取图片实际高度</span>
    <span class="token keyword">var</span> imgwidth <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取图片实际宽度</span>
    <span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token punctuation">(</span>width <span class="token operator">*</span> imgheight<span class="token punctuation">)</span> <span class="token operator">/</span> imgwidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//计算等比swiper高度</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      swiperHeight<span class="token punctuation">:</span> height<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="2-以当前图片的高度为基准（完美实现）"><a href="#2-以当前图片的高度为基准（完美实现）" class="headerlink" title="2.以当前图片的高度为基准（完美实现）"></a>2.以当前图片的高度为基准（完美实现）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/gif/241787/1611052736261-729a3762-5f29-42b6-b88c-7c1c91f04ba1.gif#height=557&id=fBWOl&margin=%5Bobject%20Object%5D&name=%E5%8A%A8%E6%80%81%E8%BD%AE%E6%92%AD%E5%9B%BE%E9%AB%98%E5%BA%A6.gif&originHeight=557&originWidth=406&originalType=binary&size=4959894&status=done&style=none&width=406" alt="动态轮播图高度.gif"></p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper</span><span class="token style-attr language-css"><span class="token attr-name">
  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">height:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>imgheights[swiperCurrent]<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>
  <span class="token attr-name">indicator-dots</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{indicatorDots}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">autoplay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{autoplay}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">interval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{interval}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">duration</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{duration}}<span class="token punctuation">"</span></span>
  <span class="token attr-name">indicator-active-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{bg}}<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{imgUrls}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>swiper-item</span><span class="token punctuation">></span></span>
      //bindload是绑定图片加载的事件,记得给image加上mode=“widthFix”这个属性哦，
      //还有就是设置这个image 100%宽度 //getswiperImgH
      中打印的图片的src发现顺序有时和图片真实的顺序是不一致,故加了一个参数index保证顺序一致。
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span><span class="token style-attr language-css"><span class="token attr-name">
        <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token selector">height:</span><span class="token punctuation">{</span><span class="token punctuation">{</span>imgheights[swiperCurrent]<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span>
        <span class="token attr-name">bindload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getswiperImgH<span class="token punctuation">"</span></span>
        <span class="token attr-name">data-idnex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{idx}}<span class="token punctuation">"</span></span>
        <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>widthFix<span class="token punctuation">"</span></span>
        <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item}}<span class="token punctuation">"</span></span>
        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slide-image<span class="token punctuation">"</span></span>
      <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper-item</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>swiper</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    imgUrls<span class="token punctuation">:</span> <span class="token punctuation">[</span>
      <span class="token string">"https://img3.doubanio.com/view/photo/l/public/p2494946035.webp"</span><span class="token punctuation">,</span>
      <span class="token string">"http://img02.tooopen.com/images/20150928/tooopen_sy_143912755726.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"http://img06.tooopen.com/images/20160818/tooopen_sy_175866434296.jpg"</span><span class="token punctuation">,</span>
      <span class="token string">"http://img06.tooopen.com/images/20160818/tooopen_sy_175833047715.jpg"</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    imgheights<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    swiperCurrent<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  bindchange<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      swiperCurrent<span class="token punctuation">:</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>current<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">getswiperImgH</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//获取当前屏幕的宽度</span>
    <span class="token keyword">let</span> winWid <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getSystemInfoSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>windowWidth<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//图片高度</span>
    <span class="token keyword">let</span> imgh <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//图片宽度</span>
    <span class="token keyword">let</span> imgw <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//计算的高度值</span>
    <span class="token keyword">let</span> swiperH <span class="token operator">=</span> <span class="token punctuation">(</span>winWid <span class="token operator">*</span> imgh<span class="token punctuation">)</span> <span class="token operator">/</span> imgw <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> imgheights <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>imgheights<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//把每一张图片的高度记录到数组里</span>
    imgheights<span class="token punctuation">[</span>e<span class="token punctuation">.</span>currentTarget<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> swiperH<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      imgheights<span class="token punctuation">:</span> imgheights<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>swiper</tag>
        <tag>图片自适应</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的git命令</title>
    <url>/leader755/22649.html</url>
    <content><![CDATA[<blockquote>
</blockquote>
<h2 id="主要目的"><a href="#主要目的" class="headerlink" title="主要目的"></a>主要目的</h2><blockquote>
<ul>
<li>实现 git 项目管理，本地开发与提交。</li>
</ul>
</blockquote>
<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1.查看分支"></a>1.查看分支</h3><ol>
<li>查看所有分支（远程和本地）</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -a</code></pre>
<ol start="2">
<li>查看本地所有的分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch</code></pre>
<ol start="3">
<li>列出所有的远程分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -r</code></pre>
<ol start="4">
<li>查看本地分支与远程分支的映射关系</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -vv</code></pre>
<ol start="5">
<li>撤销本地分支与远程分支的关系</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --unset-upstream</code></pre>
<ol start="6">
<li>将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -u origin/分支名       //其中origin/分支名 中分支名 为远程分支名</code></pre>
<p>或使用下面命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to origin/分支名</code></pre>
<p>###</p>
<h3 id="2-拉取远程分支并更新本地分支"><a href="#2-拉取远程分支并更新本地分支" class="headerlink" title="2.拉取远程分支并更新本地分支"></a>2.拉取远程分支并更新本地分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> fetch origin（不指定分支名就是远程全部分支<span class="token punctuation">)</span>
<span class="token function">git</span> fetch origin XXX <span class="token punctuation">(</span>拉下远程指定的分支<span class="token punctuation">)</span>

<span class="token function">git</span> pull origin master</code></pre>
<h3 id="3-新建分支"><a href="#3-新建分支" class="headerlink" title="3.新建分支"></a>3.新建分支</h3><ol>
<li>从远程拉取分支到本地</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b 本地分支名 origin/远程分支名</code></pre>
<ol start="2">
<li>新建一个本地分支并切换到该分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b 本地分支名</code></pre>
<ol start="3">
<li>新建一个本地分支（仍停留在当前分支）</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch 本地分支名</code></pre>
<h3 id="4-切换分支"><a href="#4-切换分支" class="headerlink" title="4.切换分支"></a>4.切换分支</h3><ol>
<li>切换到另一个分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout 分支名</code></pre>
<ol start="2">
<li>切换到上一个分支</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -</code></pre>
<h3 id="5-提交分支"><a href="#5-提交分支" class="headerlink" title="5. 提交分支"></a>5. 提交分支</h3><ol>
<li>添加当前目录的所有文件到暂存区</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span></code></pre>
<ol start="2">
<li>提交暂存区到仓库区</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'submit-新功能开发完成'</span></code></pre>
<ol start="3">
<li>直接来提交到仓库 （不需要执行 git add 命令）相当于 一二步的合并</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -a -m  <span class="token string">'submit-新功能开发完成'</span></code></pre>
<ol start="4">
<li>直接来提交到仓库 （不需要执行 git add 命令）相当于 一二步的合并，但是只能提交已经追踪过且修改了的文件，如果是新增文件就必须使用 git add 的命令；</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -am  <span class="token string">'submit-功能完成'</span></code></pre>
<ol start="5">
<li>提交时显示所有 diff 信息</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -v</code></pre>
<ol start="6">
<li>分次提交 (添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交)</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add -p</code></pre>
<h3 id="6-删除分支"><a href="#6-删除分支" class="headerlink" title="6.删除分支"></a>6.删除分支</h3><ol>
<li>删除本地的分支</li>
</ol>
<pre class=" language-java"><code class="language-java">git branch <span class="token operator">-</span>d XXX</code></pre>
<ol start="2">
<li>删除远程仓库的 分支.</li>
</ol>
<pre class=" language-java"><code class="language-java">git push origin <span class="token operator">--</span>delete XXX</code></pre>
<p>###</p>
<h3 id="7-查看信息"><a href="#7-查看信息" class="headerlink" title="7.查看信息"></a>7.查看信息</h3><ol>
<li>显示有变更的文件</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status</code></pre>
<ol start="2">
<li>显示当前分支的版本历史</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log</code></pre>
<ol start="3">
<li>显示暂存区和工作区的差异</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span></code></pre>
<hr>
<ol>
<li>显示某次提交的元数据和内容变化</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span></code></pre>
<ol start="2">
<li>显示 commit 历史，以及每次 commit 发生变更的文件</li>
</ol>
<pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> log --stat</code></pre>
<ol start="3">
<li>显示当前分支的最近几次提交</li>
</ol>
<pre class=" language-bash"><code class="language-bash"> <span class="token function">git</span> reflog</code></pre>
<ol start="4">
<li>显示过去 5 次提交</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log -5 --pretty --oneline</code></pre>
<hr>
<ol>
<li>显示某次提交发生变化的文件</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit<span class="token punctuation">]</span></code></pre>
<ol start="2">
<li>显示指定文件相关的每一次 diff</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log -p <span class="token punctuation">[</span>file<span class="token punctuation">]</span></code></pre>
<ol start="3">
<li>显示指定文件是什么人在什么时间修改过</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span></code></pre>
<hr>
<ol>
<li>搜索提交历史，根据关键词</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword<span class="token punctuation">]</span></code></pre>
<ol start="2">
<li>显示所有提交过的用户，按提交次数排序</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> shortlog -sn</code></pre>
<ol start="3">
<li>显示某次提交时，某个文件的内容</li>
</ol>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span></code></pre>
<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><h3 id="1-新建本地分支并推送到远程分支"><a href="#1-新建本地分支并推送到远程分支" class="headerlink" title="1. 新建本地分支并推送到远程分支"></a>1. 新建本地分支并推送到远程分支</h3><pre class=" language-bash"><code class="language-bash">//远程先开好分支然后拉到本地
<span class="token function">git</span> checkout -b feature origin/feature //检出远程的feature分支到本地

//本地先开好分支然后推送到远程
<span class="token function">git</span> checkout -b feature    //创建并切换到分支feature
<span class="token function">git</span> push origin feature:feature  //推送本地的feature<span class="token punctuation">(</span>冒号前面的<span class="token punctuation">)</span>分支到远程origin的feature<span class="token punctuation">(</span>冒号后面的<span class="token punctuation">)</span>分支<span class="token punctuation">(</span>没有会自动创建<span class="token punctuation">)</span></code></pre>
<h3 id="2-分支提交"><a href="#2-分支提交" class="headerlink" title="2.分支提交:"></a>2.分支提交:</h3><p>//提交 feature-goods-3.1.2 代码，操作如下</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span>
<span class="token function">git</span> commit -m <span class="token string">'submit- 商品图片上传功能完成'</span>
// <span class="token function">git</span> commit -a -m <span class="token string">'submit- 商品图片上传功能完成'</span> //将 1，2 步合并
<span class="token function">git</span> push</code></pre>
<h3 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3.切换分支"></a>3.切换分支</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b feature-goods-3.1.3 //新建一个本地分支并切换到该分支
<span class="token function">git</span> checkout feature-goods-3.1.3 //切换到当前分支
<span class="token function">git</span> checkout - //切换到上一个分支</code></pre>
<h3 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4.合并分支"></a>4.合并分支</h3><p>例如：想将 dev 分支合并到 master 分支，操作如下：</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span>  checkout master    //切换到master分支上
<span class="token function">git</span> pull origin master  //把远程分支pull下去，及时更新
<span class="token function">git</span>  merge dev          //把dev分支的代码合并到master上
<span class="token function">git</span> branch --merged     //只是为了确认所有内容都已合并，请运行以下命令：
<span class="token function">git</span> status              // 查看状态
<span class="token function">git</span> push origin master  //push到远程分支</code></pre>
<h3 id="5-回滚代码版本（慎用）"><a href="#5-回滚代码版本（慎用）" class="headerlink" title="5.回滚代码版本（慎用）"></a>5.回滚代码版本（慎用）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> fetch --all
<span class="token function">git</span> reset HEAD //需要回滚的版本号
<span class="token function">git</span> push origin --force //然后本地分支覆盖远程分支</code></pre>
<h3 id="6-代码撤销"><a href="#6-代码撤销" class="headerlink" title="6.代码撤销"></a>6.代码撤销</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token keyword">.</span> // 恢复暂存区的所有文件到工作区
<span class="token function">git</span> reset --hard  //重置暂存区与工作区，与上一次commit保持一致</code></pre>
<h3 id="7-本地分支覆盖远程分支（慎用）"><a href="#7-本地分支覆盖远程分支（慎用）" class="headerlink" title="7.本地分支覆盖远程分支（慎用）"></a>7.本地分支覆盖远程分支（慎用）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout 分支名
<span class="token function">git</span> push origin 分支名 --force       <span class="token punctuation">(</span>远程分支名<span class="token punctuation">)</span></code></pre>
<h3 id="8-远程分支覆盖本地分支（慎用）"><a href="#8-远程分支覆盖本地分支（慎用）" class="headerlink" title="8.远程分支覆盖本地分支（慎用）"></a>8.远程分支覆盖本地分支（慎用）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> fetch --all  <span class="token punctuation">(</span>拉取所有分支<span class="token punctuation">)</span>
<span class="token function">git</span> reset --hard origin/master <span class="token punctuation">(</span>master指定远程的分支<span class="token punctuation">)</span>
<span class="token function">git</span> pull</code></pre>
<h3 id="9-删除分支"><a href="#9-删除分支" class="headerlink" title="9.删除分支"></a>9.删除分支</h3><pre class=" language-bash"><code class="language-bash">//查看所有分支
<span class="token function">git</span> branch -a

//删除本地分支
<span class="token function">git</span> branch -d  XXXX

//删除远程分支
<span class="token function">git</span> push origin --delete XXX</code></pre>
<h3 id="10-保存当前工作进度"><a href="#10-保存当前工作进度" class="headerlink" title="10.保存当前工作进度"></a>10.保存当前工作进度</h3><pre class=" language-bash"><code class="language-bash">保存当前工作进度
<span class="token function">git</span> stash

添加一些注释
<span class="token function">git</span> stash save <span class="token string">'message...'</span>

恢复最新的进度到工作区
<span class="token function">git</span> stash pop</code></pre>
<h3 id="11-将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）"><a href="#11-将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）" class="headerlink" title="11.将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）"></a>11.将本地新建的分支与远程分支相关联（在当前分支下输入以下命令）</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch -u origin/分支名       //其中origin/分支名 中分支名 为远程分支名</code></pre>
<p>或使用下面命令</p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --set-upstream-to origin/分支名</code></pre>
<h3 id="12-撤销本地分支与远程分支的关系"><a href="#12-撤销本地分支与远程分支的关系" class="headerlink" title="12.撤销本地分支与远程分支的关系"></a>12.撤销本地分支与远程分支的关系</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> branch --unset-upstream</code></pre>
<h3 id="13-分支打标签"><a href="#13-分支打标签" class="headerlink" title="13. 分支打标签"></a>13. 分支打标签</h3><pre class=" language-bash"><code class="language-bash">列出当前分支所有标签
<span class="token function">git</span> tag

打标签（轻量标签和附注标签）
<span class="token function">git</span> tag v0.1.2  （标签版本）
<span class="token function">git</span> tag -a v0.1.2 -m <span class="token string">'0.1.2版本'</span>  <span class="token punctuation">(</span>带标注的标签<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 补打标签</span>
<span class="token function">git</span> tag -a v0.1.2 9fbc3d0  （为之前的版本补打标签）

标签发布（git push 不会将标签对象提交到git服务器）
<span class="token function">git</span> push origin v0.1.2    <span class="token comment" spellcheck="true"># 将v0.1.2标签提交到git服务器</span>
<span class="token function">git</span> push origin –-tags     <span class="token comment" spellcheck="true"># 将本地所有标签一次性提交到git服务器</span>

查看标签版本信息
<span class="token function">git</span> show v0.1.2

删除标签
<span class="token function">git</span> tag -d v0.1.2   删除标签</code></pre>
<p>###</p>
<h3 id="14-用于比较两次修改的差异"><a href="#14-用于比较两次修改的差异" class="headerlink" title="14.用于比较两次修改的差异"></a>14.用于比较两次修改的差异</h3><pre class=" language-bash"><code class="language-bash">工作区与暂存区<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>
<span class="token function">git</span> <span class="token function">diff</span>

Git仓库 vs Git仓库
<span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">&lt;</span>commit<span class="token operator">></span> <span class="token operator">&lt;</span>commit<span class="token operator">></span>

暂存区 vs Git仓库
<span class="token function">git</span> <span class="token function">diff</span> --cached <span class="token operator">&lt;</span>filename<span class="token operator">></span></code></pre>
<h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><p><a href="https://blog.csdn.net/litongqiang/article/details/107388918" target="_blank" rel="noopener">https://blog.csdn.net/litongqiang/article/details/107388918</a><br><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git 分支</tag>
        <tag>git 远程分支</tag>
        <tag>git 命令</tag>
      </tags>
  </entry>
  <entry>
    <title>开源的git 服务器</title>
    <url>/leader755/61705.html</url>
    <content><![CDATA[<h2 id="1、GitLab-开源版本"><a href="#1、GitLab-开源版本" class="headerlink" title="1、GitLab 开源版本"></a>1、GitLab 开源版本</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1624201546221-ba9ce11f-955a-487a-8f27-2285d44e0a12.png#clientId=u741f1d1d-08bf-4&from=paste&id=ub8a25e67&margin=%5Bobject%20Object%5D&name=image.png&originHeight=333&originWidth=800&originalType=url&ratio=2&size=77530&status=done&style=none&taskId=u660572a7-e7f0-4b81-927e-2902516765f" alt="image.png"><br><strong>简介：</strong>GitLab 是一个利用 <a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/p/ruby%2Bon%2Brails">Ruby on Rails</a> 开发的开源应用程序，实现一个自托管的<a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/p/git">Git</a>项目仓库，可通过 Web 界面进行访问公开的或者私人项目。<br>它拥有与<a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/p/github">Github</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。它还提供一个代码片段收集功能可以轻松实现代码复用，便于日后有需要的时候进行查找。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//gitee.com/mirrors/gitlab">https://gitee.com/mirrors/gitlab</a></p>
<h2 id="2、Gogs-开源版本"><a href="#2、Gogs-开源版本" class="headerlink" title="2、Gogs 开源版本"></a>2、Gogs 开源版本</h2><p><strong>简介：</strong>Gogs 是一款极易搭建的自助 Git 服务，其目标是打造一个最简单、最快速和最轻松的方式搭建自助 Git 服务。使用 Go 语言开发使得 Gogs 能够通过独立的二进制分发，并且支持 Go 语言支持的 <strong>所有平台</strong>，包括 Linux、Mac OS X、Windows 以及 ARM 平台。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//gitee.com/Unknown/gogs">https://gitee.com/Unknown/gogs</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1624201547011-3ba01a6d-7798-494e-b529-9cd9784ea4f4.png#clientId=u741f1d1d-08bf-4&from=paste&id=u4af37ad6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=588&originWidth=1146&originalType=url&ratio=2&size=446184&status=done&style=none&taskId=ub6b63586-7394-486c-8459-68c655436eb" alt="image.png"><br><a href="https://link.zhihu.com/?target=https%3A//gitee.com/Unknown/gogs">
</a></p>
<h2 id="3、Gitea-开源版本"><a href="#3、Gitea-开源版本" class="headerlink" title="3、Gitea 开源版本"></a>3、Gitea 开源版本</h2><p><strong>简介：</strong>Gitea 的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。我们采用 Go 作为后端语言，这使我们只要生成一个可执行程序即可。并且他还支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构，除了 x86，amd64，还包括 ARM 和 PowerPC。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//gitee.com/gitea/gitea">https://gitee.com/gitea/gitea</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1624201547571-641758ab-f020-453f-ac90-53f587872b5d.png#clientId=u741f1d1d-08bf-4&from=paste&id=u7f7306f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2614&originWidth=1440&originalType=url&ratio=2&size=790746&status=done&style=none&taskId=uf821bce4-9144-446f-bf02-e0310a9d086" alt="image.png"></p>
<h2 id="4、Gitosis-开源版本"><a href="#4、Gitosis-开源版本" class="headerlink" title="4、Gitosis 开源版本"></a>4、Gitosis 开源版本</h2><p><strong>简介：</strong><a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/p/git">Git</a> 是非常著名的分布式版本控制系统。Gitosis 则是方便通过 Git 与 ssh 架设中央服务器的软件。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//www.oschina.net/p/gitosis">https://www.oschina.net/p/gitosis</a></p>
<h2 id="5、GitStack-开源版本"><a href="#5、GitStack-开源版本" class="headerlink" title="5、GitStack 开源版本"></a>5、GitStack 开源版本</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1624201547611-8ef2728f-2c8b-4a26-b6f4-7c0c1edd8a24.png#clientId=u741f1d1d-08bf-4&from=paste&id=ud1a85389&margin=%5Bobject%20Object%5D&name=image.png&originHeight=912&originWidth=1440&originalType=url&ratio=2&size=798657&status=done&style=none&taskId=u8cc546fd-3391-48bc-bf2a-55dc5f6e7b5" alt="image.png"><br><strong>简介：</strong>gitstack 是 Windows 下的 <a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/p/git">Git</a> 版本控制软件。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//www.oschina.net/p/gitstack">https://www.oschina.net/p/gitstack</a></p>
<h2 id="6、Gitolite-开源版本"><a href="#6、Gitolite-开源版本" class="headerlink" title="6、Gitolite 开源版本"></a>6、Gitolite 开源版本</h2><p><strong>简介：</strong>Git 是非常著名的分布式版本控制系统。gitolite 则是方便通过 Git 与 ssh 架设中央服务器的软件。<br><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//www.oschina.net/p/gitolite">https://www.oschina.net/p/gitolite</a></p>
<h2 id="7、Gidder-开源版本"><a href="#7、Gidder-开源版本" class="headerlink" title="7、Gidder 开源版本"></a>7、Gidder 开源版本</h2><p><strong>简介：</strong>Gidder 是通过 SSH 访问的 Andriod Git 服务器！</p>
<ul>
<li>支持 push pull fetch clone</li>
<li>支持用户管理</li>
<li>支持仓库管理</li>
<li>支持动态 dns</li>
</ul>
<p><strong>项目地址：</strong><a href="https://link.zhihu.com/?target=https%3A//www.oschina.net/p/gidder">https://www.oschina.net/p/gidder</a></p>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://www.zhihu.com/question/283143882/answer/434872781" target="_blank" rel="noopener">https://www.zhihu.com/question/283143882/answer/434872781</a></p>
]]></content>
      <categories>
        <category>git 工具</category>
      </categories>
      <tags>
        <tag>git 服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>微前端乾坤</title>
    <url>/leader755/39615.html</url>
    <content><![CDATA[<p>1.什么是微前端？<br>微前端（Micro-Frontends）是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。<strong>微前端不是单纯的前端框架或者工具，而是一套架构体系</strong>，</p>
<p>qiankun 是一个基于 <a href="https://github.com/CanopyTax/single-spa" target="_blank" rel="noopener">single-spa</a> 的<a href="https://micro-frontends.org/" target="_blank" rel="noopener">微前端</a>实现库，旨在帮助大家能更简单、无痛的构建一个生产可用微前端架构系统。qiankun 孵化自蚂蚁金融科技基于微前端架构的云产品统一接入平台。</p>
<blockquote>
<ul>
<li>📦 *<em>基于 *</em><a href="https://github.com/CanopyTax/single-spa" target="_blank" rel="noopener">single-spa</a> 封装，提供了更加开箱即用的 API。</li>
<li>📱 <strong>技术栈无关</strong>，任意技术栈的应用均可 使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</li>
<li>💪 <strong>HTML Entry 接入方式</strong>，让你接入微应用像使用 iframe 一样简单。</li>
<li>🛡 <strong>样式隔离</strong>，确保微应用之间样式互相不干扰。</li>
<li>🧳 <strong>JS 沙箱</strong>，确保微应用之间 全局变量/事件 不冲突。</li>
<li>⚡️ <strong>资源预加载</strong>，在浏览器空闲时间预加载未打开的微应用资源，加速微应用打开速度。</li>
<li>🔌 <strong>umi 插件</strong>，提供了 <a href="https://github.com/umijs/plugins/tree/master/packages/plugin-qiankun" target="_blank" rel="noopener">@umijs/plugin-qiankun</a> 供 umi 应用一键切换成微前端架构系统。</li>
</ul>
</blockquote>
<h2 id="2-qiankun-框架的应用"><a href="#2-qiankun-框架的应用" class="headerlink" title="2.qiankun 框架的应用"></a>2.qiankun 框架的应用</h2><h3 id="主应用中操作"><a href="#主应用中操作" class="headerlink" title="主应用中操作"></a>主应用中操作</h3><h4 id="1-在主应用中安装-qiankun"><a href="#1-在主应用中安装-qiankun" class="headerlink" title="1. 在主应用中安装 qiankun"></a>1. 在主应用中安装 qiankun</h4><pre class=" language-javascript"><code class="language-javascript">npm i qiankun <span class="token operator">-</span>S
<span class="token comment" spellcheck="true">//yarn add qiankun</span></code></pre>
<h4 id="2-在主应用中注册微应用"><a href="#2-在主应用中注册微应用" class="headerlink" title="2. 在主应用中注册微应用"></a>2. 在主应用中注册微应用</h4><blockquote>
<p>当微应用信息注册完之后，一旦浏览器的 url 发生变化，便会自动触发 qiankun 的匹配逻辑，所有 activeRule 规则匹配上的微应用就会被插入到指定的 container 中，同时依次调用微应用暴露出的生命周期钩子。如果微应用不是直接跟路由关联的时候，你也可以选择手动加载微应用的方式：</p>
</blockquote>
<p>a.自动加载微应用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//自动加载</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> registerMicroApps<span class="token punctuation">,</span> start <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"qiankun"</span><span class="token punctuation">;</span>

<span class="token function">registerMicroApps</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"react app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// app name registered</span>
    entry<span class="token punctuation">:</span> <span class="token string">"//localhost:7100"</span><span class="token punctuation">,</span>
    container<span class="token punctuation">:</span> <span class="token string">"#yourContainer"</span><span class="token punctuation">,</span>
    activeRule<span class="token punctuation">:</span> <span class="token string">"/yourActiveRule"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"vue app"</span><span class="token punctuation">,</span>
    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span> scripts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"//localhost:7100/main.js"</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    container<span class="token punctuation">:</span> <span class="token string">"#yourContainer2"</span><span class="token punctuation">,</span>
    activeRule<span class="token punctuation">:</span> <span class="token string">"/yourActiveRule2"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>b.手动加载微应用：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//手动加载</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loadMicroApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"qiankun"</span><span class="token punctuation">;</span>

<span class="token function">loadMicroApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"app"</span><span class="token punctuation">,</span>
  entry<span class="token punctuation">:</span> <span class="token string">"//localhost:7100"</span><span class="token punctuation">,</span>
  container<span class="token punctuation">:</span> <span class="token string">"#yourContainer"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="微应用中操作"><a href="#微应用中操作" class="headerlink" title="微应用中操作"></a>微应用中操作</h3><blockquote>
<p>微应用不需要额外安装任何其他依赖即可接入 qiankun 主应用。</p>
</blockquote>
<h4 id="1-导出相应的生命周期钩子"><a href="#1-导出相应的生命周期钩子" class="headerlink" title="1. 导出相应的生命周期钩子"></a>1. 导出相应的生命周期钩子</h4><blockquote>
<p>微应用需要在自己的入口 js (通常就是你配置的 webpack 的 entry js) 导出 bootstrap、mount、unmount 三个生命周期钩子，以供主应用在适当的时机调用。Vue，react 中在 main.js 中写入。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**
 * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。
 * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"react app bootstraped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span>
    props<span class="token punctuation">.</span>container
      <span class="token operator">?</span> props<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>
    props<span class="token punctuation">.</span>container
      <span class="token operator">?</span> props<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span>
      <span class="token punctuation">:</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/**
 * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update props"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="2-配置微应用的打包工具"><a href="#2-配置微应用的打包工具" class="headerlink" title="2. 配置微应用的打包工具"></a>2. 配置微应用的打包工具</h3><blockquote>
<p>除了代码中暴露出相应的生命周期钩子之外，为了让主应用能正确识别微应用暴露出来的一些信息，微应用的打包工具需要增加如下配置：</p>
</blockquote>
<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack:"></a>webpack:</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> packageName <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./package.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    library<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>packageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-[name]`</span></span><span class="token punctuation">,</span>
    libraryTarget<span class="token punctuation">:</span> <span class="token string">"umd"</span><span class="token punctuation">,</span>
    jsonpFunction<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>packageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-乾坤框架的两种通信方式："><a href="#3-乾坤框架的两种通信方式：" class="headerlink" title="3.乾坤框架的两种通信方式："></a>3.乾坤框架的两种通信方式：</h3><blockquote>
<ol>
<li>第一种是 qiankun 官方提供的通信方式 - Actions 通信，适合业务划分清晰，比较简单的微前端应用，一般来说使用第一种方案就可以满足大部分的应用场景需求。</li>
<li>第二种是基于 redux 实现的通信方式 - Shared 通信，适合需要跟踪通信状态，子应用具备独立运行能力，较为复杂的微前端应用。</li>
</ol>
</blockquote>
<h2 id="3-项目实战"><a href="#3-项目实战" class="headerlink" title="3.项目实战"></a>3.项目实战</h2>]]></content>
      <categories>
        <category>微前端</category>
      </categories>
      <tags>
        <tag>qiankun</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器的安全组策略</title>
    <url>/leader755/56219.html</url>
    <content><![CDATA[<p>##</p>
<h2 id="开放全部安全组-不安全"><a href="#开放全部安全组-不安全" class="headerlink" title="开放全部安全组:(不安全)"></a>开放全部安全组:(不安全)</h2><p>主要是添加 2 条规则，</p>
<h3 id="1-入方向开放全部端口"><a href="#1-入方向开放全部端口" class="headerlink" title="1.入方向开放全部端口"></a>1.入方向开放全部端口</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/241787/1604406998028-50fa445c-4bc8-439a-97d0-427e1faf83ae.jpeg#height=411&id=mj74k&originHeight=411&originWidth=578&originalType=binary&size=0&status=done&style=none&width=578" alt=""></p>
<h3 id="2-出方向开放全部端口"><a href="#2-出方向开放全部端口" class="headerlink" title="2.出方向开放全部端口"></a>2.出方向开放全部端口</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/241787/1604406998000-0cff5cad-f416-409d-a695-2a5554998bb2.jpeg#height=357&id=lvbkX&originHeight=357&originWidth=546&originalType=binary&size=0&status=done&style=none&width=546" alt=""><br>添加上面 2 条规则后，安全组就全部放开了，这个时候你就不会再收到任何影响了</p>
<h2 id="开放特定端口"><a href="#开放特定端口" class="headerlink" title="开放特定端口"></a>开放特定端口</h2><blockquote>
<p>有的朋友觉得安全组挺好用，那么你就可以将其作为自己默认的防火墙，下面说下如何开放特定某个范围内的端口</p>
</blockquote>
<h3 id="1-开放区之间的端口"><a href="#1-开放区之间的端口" class="headerlink" title="1.开放区之间的端口"></a>1.开放区之间的端口</h3><blockquote>
<p>比如我们有时会用到 20-25 之间的端口，我们将其开放，端口范围就是你需要开启的端口，比如 20/25 就表示 20、21、22、23、24、25 这几个端口</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/241787/1604407069564-49670d30-f7cd-4f78-8cd3-3696e3410d93.jpeg#height=344&id=RgUCA&originHeight=344&originWidth=575&originalType=binary&size=0&status=done&style=none&width=575" alt=""></p>
<h3 id="2-开启特定的端口"><a href="#2-开启特定的端口" class="headerlink" title="2.开启特定的端口"></a>2.开启特定的端口</h3><blockquote>
<p>如果你只想开启一个端口比如 22 端口，就可以使用 22/22</p>
</blockquote>
<h3 id="3-授权对象"><a href="#3-授权对象" class="headerlink" title="3.授权对象"></a>3.授权对象</h3><blockquote>
<p>授权对象，一般情况下都是选择 0.0.0.0/0，表示 IP 都可以访问</p>
</blockquote>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>安全组策略</tag>
        <tag>开放端口</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎使用 MWeb</title>
    <url>/leader755/18674.html</url>
    <content><![CDATA[<p>MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件，目前已支持 Mac，iPad 和 iPhone。MWeb 有以下特色：</p>
<h2 id="软件本身："><a href="#软件本身：" class="headerlink" title="软件本身："></a>软件本身：</h2><ul>
<li>使用原生的 macOS 技术打造，追求与系统的完美结合。</li>
<li>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</li>
</ul>
<h2 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h2><ul>
<li>使用 GitHub Flavored Markdown 语法，简称 GFM 语法。</li>
<li>支持表格、TOC、LaTeX、代码块、任务列表、脚注等。</li>
<li>画图库支持 mermaid, viz, ECharts, PlantUML, Sequence, Flow。</li>
</ul>
<h2 id="Markdown-辅助："><a href="#Markdown-辅助：" class="headerlink" title="Markdown 辅助："></a>Markdown 辅助：</h2><ul>
<li>支持截图并粘贴、复制并粘贴、拖拽等方式插入图片并直接显示在编辑器内。</li>
<li>在兼容 Markdown 语法的情况下支持设置图片宽度。</li>
<li>好用的表格插入和 LaTeX 书写辅助。</li>
</ul>
<h2 id="Markdown-输出："><a href="#Markdown-输出：" class="headerlink" title="Markdown 输出："></a>Markdown 输出：</h2><ul>
<li>支持导出为图片、HTML、Epub、PDF、RTF、Docx。</li>
<li>支持发布到 WordPress、支持 Metaweblog API 协议的服务、Wordpress.com、印象笔记（Evernote）、Blogger、Medium、Tumblr、语雀、Ghost、少数派 Matrix。</li>
<li>图片上传服务（图床）支持 Imgur、七牛云、又拍云、腾讯云 COS、阿里云 OSS、SM.MS 和自定义的图床服务。</li>
</ul>
<h2 id="Markdown-笔记："><a href="#Markdown-笔记：" class="headerlink" title="Markdown 笔记："></a>Markdown 笔记：</h2><ul>
<li>强大的文档库支持分类树和标签管理文档，文档可归类于多个分类，可以把分类整个导出为 Epub、PDF 和生成静态网站。非常合适用于笔记、个人知识收集、管理和输出。</li>
<li>快速笔记：随意增加笔记及图片等素材，支持以天为单位把增加的素材组合在一个文档内，方便整理及记录历史收集情况。</li>
<li>快速搜索：目前已支持全局快捷键调出搜索。</li>
</ul>
<h2 id="外部-Markdown-文档："><a href="#外部-Markdown-文档：" class="headerlink" title="外部 Markdown 文档："></a>外部 Markdown 文档：</h2><ul>
<li>外部 Markdown 文档使用外部模式管理。外部模式使用目录树的方式编辑和管理你的 Markdown 文档，还能很好的支持 GitBook、Jekyll、Hexo 等等编辑和图片插入。</li>
</ul>
<h2 id="MWeb-文档："><a href="#MWeb-文档：" class="headerlink" title="MWeb 文档："></a>MWeb 文档：</h2><p>如果要更详细了解 MWeb，建议你一定要去看一下官网的帮助文档，网址为：<a href="https://zh.mweb.im/help.html" target="_blank" rel="noopener">https://zh.mweb.im/help.html</a>。我们建议在使用文档库之前，一定要阅读一下 <a href="https://zh.mweb.im/mweb-library.html" target="_blank" rel="noopener">MWeb 文档库详细介绍</a> 这篇文章，以便更好的使用文档库。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>MWeb</tag>
      </tags>
  </entry>
  <entry>
    <title>生成SSH秘钥</title>
    <url>/leader755/14076.html</url>
    <content><![CDATA[<h2 id="一-配置单个-ssh"><a href="#一-配置单个-ssh" class="headerlink" title="一.配置单个 ssh"></a>一.配置单个 ssh</h2><p>单个 ssh key 是指一台 git 服务器只有一个 git 账号。也就是说，如果你不仅在 github 有账号，在 coding 也有账号，甚至团队内部自己搭建了私有的 git 服务器等，这些服务器都可以公用同一个 ssh key 的，绝对没有必要创建多个 ssh key。你只需要将相同的 ssh 公钥添加到相应的服务器的账号设置里即可。如果自己不能添加，可以将公钥发给服务器管理人员，让他帮忙添加也行。</p>
<blockquote>
<p>ssh key 不仅仅用于 git 服务器，它还支持远程加密登录和相应的操作。比如，登录云服务器，添加 ssh key 后，可以免密登录<br>免密登陆的 ssh key 存放在文件<code>.ssh/authorized_keys</code>里,如果.ssh 目录下没有 authorized_keys 文件可以自己创建该文件，多个授权的 ssh key 换行即可</p>
</blockquote>
<ul>
<li>生成 SSH key(默认)除了秘钥文件之外，<strong>known_hosts</strong>文件是后续自动生产的，<strong>config</strong>文件(用于多个 ssh)是后面的步骤中手动生产的</li>
<li>三次回车即可生成 ssh key, 这里的邮箱最好填和刚才一样的。然后将公钥分别配置到 github，coding，Gitee 就可以了。（可以参照后面的配置多个 ssh 时，coding，github，gittee 的 ssh key 的配置方法）</li>
</ul>
<pre class=" language-bash"><code class="language-bash">//生公钥私钥
ssh-keygen -t rsa -C <span class="token string">"1181012791@qq.com"</span>

//复制公钥（win10上默认的 公钥文件名称默认是 id_rsa.pub）可自定义名称
<span class="token function">cd</span> ~/.ssh
<span class="token function">cat</span> id_rsa.pub</code></pre>
<h2 id="二-配置多个-ssh"><a href="#二-配置多个-ssh" class="headerlink" title="二.配置多个 ssh"></a>二.配置多个 ssh</h2><h3 id="1-配置-github-com-的-ssh"><a href="#1-配置-github-com-的-ssh" class="headerlink" title="1.配置 github.com 的 ssh"></a>1.配置 github.com 的 ssh</h3><h4 id="1-gt-生成-github-com-的私钥公钥"><a href="#1-gt-生成-github-com-的私钥公钥" class="headerlink" title="1&gt;生成 github.com 的私钥公钥"></a>1&gt;生成 github.com 的私钥公钥</h4><blockquote>
<p>建 github 对应的 sshkey，命名为 id_rsa_github，密码 *123456 **（自行设置）</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C 1181012791@qq.com</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608198518773-9aaba593-af5e-4848-880f-64cf0e7d3a9e.png#crop=0&crop=0&crop=1&crop=1&height=357&id=OIznt&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30820&status=done&style=none&title=&width=684" alt="image.png"></p>
<h4 id="2-gt-查看复制-id-rsa-github-pub-公钥"><a href="#2-gt-查看复制-id-rsa-github-pub-公钥" class="headerlink" title="2&gt;查看复制 id_rsa.github.pub 公钥"></a>2&gt;查看复制 id_rsa.github.pub 公钥</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608205775573-1d92d41d-8a26-477a-849a-db1bb704719c.png#crop=0&crop=0&crop=1&crop=1&height=111&id=vOEao&margin=%5Bobject%20Object%5D&name=image.png&originHeight=111&originWidth=688&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63658&status=done&style=none&title=&width=688" alt="image.png"></p>
<h4 id="3-gt-github-上传公钥"><a href="#3-gt-github-上传公钥" class="headerlink" title="3&gt;github 上传公钥"></a>3&gt;github 上传公钥</h4><p>公钥是以 .pub 结尾的文件，私钥在本地。GitHub 添加 SSH key 的方式如下图所示，将公钥复制到 value，name 自己随意填就行。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608205258621-7259fa21-2f4c-4408-ad38-4f346e567b89.png#crop=0&crop=0&crop=1&crop=1&height=798&id=nLQtY&margin=%5Bobject%20Object%5D&name=image.png&originHeight=798&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81081&status=done&style=none&title=&width=1278" alt="image.png"></p>
<h4 id="4-gt-测试"><a href="#4-gt-测试" class="headerlink" title="4&gt;测试"></a>4&gt;测试</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608552705239-36321810-bc84-440e-b467-f6d7f20ba6b5.png#crop=0&crop=0&crop=1&crop=1&height=115&id=wNeyA&margin=%5Bobject%20Object%5D&name=image.png&originHeight=115&originWidth=803&originalType=binary&ratio=1&rotation=0&showTitle=false&size=13994&status=done&style=none&title=&width=803" alt="image.png"><br>验证结果消息是否包含您的用户名。如果收到“权限被拒绝”消息，请参阅<a href="https://help.github.com/articles/error-permission-denied-publickey" target="_blank" rel="noopener">“错误：权限被拒绝（公钥）”</a>。</p>
<h3 id="2-配置-gitee-com-的-ssh"><a href="#2-配置-gitee-com-的-ssh" class="headerlink" title="2.配置 gitee.com 的 ssh"></a>2.配置 gitee.com 的 ssh</h3><h4 id="1-gt-生成-gitee-com-的私钥公钥"><a href="#1-gt-生成-gitee-com-的私钥公钥" class="headerlink" title="1&gt;生成 gitee.com 的私钥公钥"></a>1&gt;生成 gitee.com 的私钥公钥</h4><blockquote>
<p><strong>创建 gitee 对应的 sshkey，命名为</strong>id_rsa_gitee，密码 *123456 **（自行设置）。<br>(邮箱地址可以相同或者不同，本文相同)</p>
</blockquote>
<pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C 1181012791@qq.com</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608199525357-d7f7367c-6e47-4786-a74c-d528e0cb4cd2.png#crop=0&crop=0&crop=1&crop=1&height=327&id=PzYbL&margin=%5Bobject%20Object%5D&name=image.png&originHeight=327&originWidth=677&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28208&status=done&style=none&title=&width=677" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608205596390-3321816d-316a-4c36-bf96-8b43fa45bc09.png#crop=0&crop=0&crop=1&crop=1&height=412&id=h7B4W&margin=%5Bobject%20Object%5D&name=image.png&originHeight=412&originWidth=688&originalType=binary&ratio=1&rotation=0&showTitle=false&size=245271&status=done&style=none&title=&width=688" alt="image.png"></p>
<h2 id="三-查看、复制-key"><a href="#三-查看、复制-key" class="headerlink" title="三.查看、复制 key"></a>三.查看、复制 key</h2><h3 id="1-查看-ssh-目录下的所有的文件"><a href="#1-查看-ssh-目录下的所有的文件" class="headerlink" title="1.查看~/.ssh/目录下的所有的文件"></a>1.查看~/.ssh/目录下的所有的文件</h3><pre class=" language-bash"><code class="language-bash">//切换到 ~/.ssh 目录
<span class="token function">cd</span> ~/.shh

//查看
ll
<span class="token function">ls</span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608204813131-8bf028e5-dfc8-4bd5-b68a-bb767275139f.png#crop=0&crop=0&crop=1&crop=1&height=215&id=PKbHm&margin=%5Bobject%20Object%5D&name=image.png&originHeight=215&originWidth=683&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24276&status=done&style=none&title=&width=683" alt="image.png"></p>
<h3 id="2-文本编辑工具查看"><a href="#2-文本编辑工具查看" class="headerlink" title="2.文本编辑工具查看"></a>2.文本编辑工具查看</h3><blockquote>
<p>切换到 ~/.shh 文件夹，选择使用文本编辑器 打开，id_rsa_pub(上面自定义的文件名称，默认为 id_rsa_pub)文件，全部复制。</p>
</blockquote>
<h3 id="3-命令行查看-vim-cat"><a href="#3-命令行查看-vim-cat" class="headerlink" title="3.命令行查看 vim/cat"></a>3.命令行查看 vim/cat</h3><pre class=" language-bash"><code class="language-bash">//切换到~/.ssh目录
<span class="token function">cd</span> ~/.ssh

//打开id_rsa.pub文件，复制
<span class="token function">cat</span> id_rsa.pub</code></pre>
<h3 id="4-在-ssh-目录创建-config-text-文本文件并完成相关配置-最核心的地方"><a href="#4-在-ssh-目录创建-config-text-文本文件并完成相关配置-最核心的地方" class="headerlink" title="4. 在.ssh 目录创建 config.text 文本文件并完成相关配置(最核心的地方)"></a>4. 在.ssh 目录创建 config.text 文本文件并完成相关配置(最核心的地方)</h3><pre class=" language-javascript"><code class="language-javascript"># 配置github<span class="token punctuation">.</span>com
Host github<span class="token punctuation">.</span>com                       #<span class="token function">域名地址的别名</span><span class="token punctuation">(</span>尽量配置一样<span class="token punctuation">)</span>
    HostName git@github<span class="token punctuation">.</span>com                     #真实的域名地址
    User <span class="token number">1181012791</span>@qq<span class="token punctuation">.</span>com                            #配置使用用户名
    IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_github  #id_rsa的地址
    PreferredAuthentications publickey  # publickey<span class="token punctuation">,</span>password publickey<span class="token punctuation">,</span>keyboard<span class="token operator">-</span>interactive

# 配置gitee<span class="token punctuation">.</span>com
Host gitee<span class="token punctuation">.</span>com                       #<span class="token function">域名地址的别名</span><span class="token punctuation">(</span>尽量配置一样<span class="token punctuation">)</span>
    HostName gitee<span class="token punctuation">.</span>com                     #真实的域名地址
    User username2                            #配置使用用户名
    IdentityFile <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_gitee  #id_rsa的地址
    PreferredAuthentications publickey</code></pre>
<h2 id="四-删除原有-ssh-公钥方法"><a href="#四-删除原有-ssh-公钥方法" class="headerlink" title="四.删除原有 ssh 公钥方法"></a>四.删除原有 ssh 公钥方法</h2><p>ssh 登录过的服务器的 RSA 公钥保存在.ssh/known_hosts 中。当下次访问相同计算机时，SSH 会核对公钥。如果公钥不同，OpenSSH 会发出警告。</p>
<h3 id="1-文本编辑工具或-vi-vim-编辑删除"><a href="#1-文本编辑工具或-vi-vim-编辑删除" class="headerlink" title="1.文本编辑工具或 vi/vim 编辑删除"></a>1.文本编辑工具或 vi/vim 编辑删除</h3><blockquote>
<ul>
<li>在 win10 的用户目录（画重点），进入 .ssh 目录（win10 默认目录），可以找到 known_hosts 文件。</li>
<li>用文本编辑工具或 vi/vim 打开 known_hosts 文件中后，找到对应的 IP 所在行的公钥整行删除。</li>
</ul>
</blockquote>
<pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.ssh</code></pre>
<h3 id="2-命令行清除"><a href="#2-命令行清除" class="headerlink" title="2.命令行清除"></a>2.命令行清除</h3><pre class=" language-bash"><code class="language-bash">ssh-keygen -f <span class="token string">"~/.ssh/known_hosts"</span> -R 192.168.1.254</code></pre>
<h2 id="五-切换-ssh-和-http-协议："><a href="#五-切换-ssh-和-http-协议：" class="headerlink" title="五.切换 ssh 和 http 协议："></a>五.切换 ssh 和 http 协议：</h2><h3 id="1-查看当前-remote"><a href="#1-查看当前-remote" class="headerlink" title="1.查看当前 remote"></a>1.查看当前 remote</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote -v</code></pre>
<h3 id="2-切换到-http："><a href="#2-切换到-http：" class="headerlink" title="2.切换到 http："></a>2.切换到 http：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url https://github.com/username/repository.git</code></pre>
<h3 id="3-切换到-ssh："><a href="#3-切换到-ssh：" class="headerlink" title="3.切换到 ssh："></a>3.切换到 ssh：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote set-url git@github.com:username/repository.git</code></pre>
<h2 id="六-测试连接"><a href="#六-测试连接" class="headerlink" title="六.测试连接"></a>六.测试连接</h2><pre class=" language-javascript"><code class="language-javascript">$ ssh <span class="token operator">-</span>T git@github<span class="token punctuation">.</span>com
Hi yourname<span class="token operator">!</span> You've successfully authenticated<span class="token punctuation">,</span> but GitHub does not provide shell access<span class="token punctuation">.</span>

$ ssh <span class="token operator">-</span>T git@git<span class="token punctuation">.</span>coding<span class="token punctuation">.</span>net
Hi yourname<span class="token operator">!</span> You've successfully authenticated<span class="token punctuation">,</span> but GITEE<span class="token punctuation">.</span>COM does not provide shell access<span class="token punctuation">.</span>

$ ssh <span class="token operator">-</span>T git@gitee<span class="token punctuation">.</span>com
Hi yourname<span class="token operator">!</span> You've successfully authenticated<span class="token punctuation">,</span> but GITEE<span class="token punctuation">.</span>COM does not provide shell access<span class="token punctuation">.</span></code></pre>
]]></content>
      <categories>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>给文件添加一个.gitignore</title>
    <url>/leader755/54468.html</url>
    <content><![CDATA[<h2 id="1-WHY"><a href="#1-WHY" class="headerlink" title="1.WHY?"></a>1.WHY?</h2><p>.gitignore 文件只要在这个文件中申明那些文件你不希望添加到 git 中去，这样当你使用<code>git add .</code>这些文件就会被自动忽略掉</p>
<h2 id="2-忽略文件的原则"><a href="#2-忽略文件的原则" class="headerlink" title="2.忽略文件的原则"></a>2.忽略文件的原则</h2><ul>
<li>忽略操作系统自动生成的文件，比如缩略图等；</li>
<li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的.class 文件；</li>
<li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li>
</ul>
<h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><p>首先，在你的工作区新建一个名称为<code>.gitignore</code>的文件。<br>然后，把要忽略的文件名填进去，Git 就会自动忽略这些文件。<br>不需要从头写.gitignore 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://link.jianshu.com?t=https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p>
<h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><p>比如你的项目是 java 项目，<code>.java</code>文件编译后会生成<code>.class</code>文件，这些文件多数情况下是不想被传到仓库中的文件。这时候你可以直接适用 github 的.gitignore 文件模板。<a href="https://link.jianshu.com?t=https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore/blob/master/Java.gitignore</a> 将这些忽略文件信息复制到你的.gitignore 文件中去：</p>
<pre><code>*.class
# Mobile Tools for Java (J2ME)
.mtj.tmp/
# Package Files #
*.jar
*.war
*.ear
# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*</code></pre><p>可以看到 github 为我们提供了最流行的.gitignore 文件配置。<br>保存.ignore 文件后我们查看下 git status，检查下是否还有我们不需要的文件会被添加到 git 中去：</p>
<pre><code>$ git status
On branch master
Initial commit
Changes to be committed:
  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)
        new file:   .gitignore
        new file:   HelloWorld.java
Untracked files:
  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
        Config.ini</code></pre><p>比如我的项目目录下有一个 Config.ini 文件，这个是个本地配置文件我不希望上传到 git 中去，我们可以在 gitignore 文件中添加这样的配置：</p>
<pre class=" language-javascript"><code class="language-javascript">Config<span class="token punctuation">.</span>ini<span class="token punctuation">;</span></code></pre>
<p>或者你想忽略所有的.ini 文件你可以这样写：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span>ini</code></pre>
<p>如果有些文件已经被你忽略了，当你使用<code>git add</code>时是无法添加的，比如我忽略了<code>*.class</code>，现在我想把<code>HelloWorld.class</code>添加到 git 中去：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git add HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">The</span> following paths are ignored by one <span class="token keyword">of</span> your <span class="token punctuation">.</span>gitignore files<span class="token punctuation">:</span>
HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name">Use</span> <span class="token operator">-</span>f <span class="token keyword">if</span> you really want to add them<span class="token punctuation">.</span></code></pre>
<p>git 会提示我们这个文件已经被我们忽略了，需要加上<code>-f</code>参数才能强制添加到 git 中去：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git status
On branch master
Initial commit
Changes to be committed<span class="token punctuation">:</span>
  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>
        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span>gitignore
        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
        <span class="token class-name">new</span> file<span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span>java</code></pre>
<p>这样就能强制添加到缓存中去了。<br>如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用<code>rm</code>命令将其从中移除：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git rm HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">--</span>cached
rm <span class="token string">'HelloWorld.class'</span></code></pre>
<p>如果你已经把不想上传的文件上传到了 git 仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后 pull 代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore 文件中添加这些你想忽略的文件，然后再 push 到远程仓库。</p>
<h2 id="5-查看-gitignore-规则"><a href="#5-查看-gitignore-规则" class="headerlink" title="5.查看 gitignore 规则"></a>5.查看 gitignore 规则</h2><p>如果你发下<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p>
<pre class=" language-javascript"><code class="language-javascript">$ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>
<span class="token class-name"><span class="token punctuation">.</span>gitignore</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token class-name">HelloWorld<span class="token punctuation">.</span>class</span></code></pre>
<p>可以看到<code>HelloWorld.class</code>匹配到了我们的第一条<code>*.class</code>的忽略规则所以文件被忽略了。</p>
<h2 id="6-忽略规则文件语法"><a href="#6-忽略规则文件语法" class="headerlink" title="6.忽略规则文件语法"></a>6.忽略规则文件语法</h2><h3 id="a-忽略指定文件-目录"><a href="#a-忽略指定文件-目录" class="headerlink" title="a.忽略指定文件/目录"></a>a.忽略指定文件/目录</h3><pre class=" language-javascript"><code class="language-javascript"># 忽略指定文件
HelloWrold<span class="token punctuation">.</span><span class="token keyword">class</span>
# 忽略指定文件夹
bin<span class="token operator">/</span>
bin<span class="token regex">/gen/</span></code></pre>
<h3 id="b-通配符忽略规则"><a href="#b-通配符忽略规则" class="headerlink" title="b.通配符忽略规则"></a>b.通配符忽略规则</h3><p>通配符规则如下：</p>
<pre class=" language-javascript"><code class="language-javascript"># 忽略<span class="token punctuation">.</span><span class="token keyword">class</span>的所有文件
<span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>
# 忽略名称中末尾为ignore的文件夹
<span class="token operator">*</span>ignore<span class="token operator">/</span>
# 忽略名称中间包含ignore的文件夹
<span class="token operator">*</span>ignore<span class="token operator">*</span><span class="token operator">/</span></code></pre>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>gitignore</tag>
      </tags>
  </entry>
  <entry>
    <title>网站一键置灰</title>
    <url>/leader755/65405.html</url>
    <content><![CDATA[<blockquote>
<p>背景：<br>某些时候，需要让网站一键变灰。只需要短短几行代码就能做到。</p>
</blockquote>
<h3 id="1-直接上代码"><a href="#1-直接上代码" class="headerlink" title="1.直接上代码"></a>1.直接上代码</h3><p>直接在 html 上加上此样式，搞定。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
  <span class="token selector">html </span><span class="token punctuation">{</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-moz-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-ms-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-o-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url("data:image/svg+xml;utf8,#grayscale")</span><span class="token punctuation">;</span>
    <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform<span class="token number">.</span>Microsoft<span class="token number">.</span><span class="token function">BasicImage</span><span class="token punctuation">(</span>grayscale=<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>###</p>
<h3 id="2-hexo-博客一键置灰（按博主的实际情况来）"><a href="#2-hexo-博客一键置灰（按博主的实际情况来）" class="headerlink" title="2.hexo 博客一键置灰（按博主的实际情况来）"></a>2.hexo 博客一键置灰（按博主的实际情况来）</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1621655472918-661679ee-41e5-40e6-8310-f16f0adc9bb3.png#align=left&display=inline&height=292&id=u993ff9b5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=584&originWidth=2312&size=261964&status=done&style=none&width=1156" alt="image.png"></p>
<h4 id="1-gt-找到-head-ejs"><a href="#1-gt-找到-head-ejs" class="headerlink" title="1&gt;找到 head.ejs"></a>1&gt;找到 head.ejs</h4><p>首先找到 hexo 博客 theme 下当前使用的主题文件，/themes/halo/layout/_partial/head.ejs(针对自己的)，加入以下</p>
<pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 网站置灰,做成可配置的文件 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.graywebsite.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>
  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span>
  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %<span class="token punctuation">></span>/css/gray.css<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span></code></pre>
<h4 id="2-gt-新建-gray-css"><a href="#2-gt-新建-gray-css" class="headerlink" title="2&gt;新建 gray.css"></a>2&gt;新建 gray.css</h4><p>在 /themes/halo/source/css/ 下新建 gray.css 文件，并写入以下代码:</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">html </span><span class="token punctuation">{</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-moz-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-ms-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-o-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token url">url("data:image/svg+xml;utf8,#grayscale")</span><span class="token punctuation">;</span>
  <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token property">progid</span><span class="token punctuation">:</span>DXImageTransform<span class="token number">.</span>Microsoft<span class="token number">.</span><span class="token function">BasicImage</span><span class="token punctuation">(</span>grayscale=<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-filter</span><span class="token punctuation">:</span> <span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-gt-配置-config-yml"><a href="#3-gt-配置-config-yml" class="headerlink" title="3&gt;.配置 _config.yml"></a>3&gt;.配置 _config.yml</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1621655913775-d70764c7-0bff-4dd3-ba13-efc32d748723.png#align=left&display=inline&height=352&id=ud5cc4627&margin=%5Bobject%20Object%5D&name=image.png&originHeight=704&originWidth=1534&size=118340&status=done&style=none&width=767" alt="image.png"></p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 网站一键置灰</span>
<span class="token key atrule">graywebsite</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span></code></pre>
<h4 id="4-gt-大工告成"><a href="#4-gt-大工告成" class="headerlink" title="4&gt;大工告成"></a>4&gt;大工告成</h4><p>访问网站<a href=""> http://www.leader755.com</a>， 只会在特定的时间开启哦。</p>
]]></content>
      <categories>
        <category>一键置灰</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>节流和防抖</title>
    <url>/leader755/7973.html</url>
    <content><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖：动作绑定事件，动作发生一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一段时间后再触发事件。（触发会重新等待一段时间再触发事件）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>节流：动作绑定事件，动作发生后一段时间后触发事件，在这段时间内，如果该动作又发生，则无视该动作，直到事件执行完后，才能重新触发。（等待一定的时间后才会重新触发）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throtte</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> activeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">-</span> activeTime <span class="token operator">></span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      activeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>节流</tag>
        <tag>防抖</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 hexo 博客的图片链接失效问题</title>
    <url>/leader755/3275.html</url>
    <content><![CDATA[<h2 id="1-首先找到-hexo-博客的主题文件夹目录"><a href="#1-首先找到-hexo-博客的主题文件夹目录" class="headerlink" title="1.首先找到 hexo 博客的主题文件夹目录"></a>1.首先找到 hexo 博客的主题文件夹目录</h2><pre class=" language-javascript"><code class="language-javascript">D<span class="token punctuation">:</span>\Blog_leader755\themes\halo\layout\_partial\head<span class="token punctuation">.</span>ejs</code></pre>
<p>修改上述路径的文件 head.ejs ，因为每个页面都会包含 head 这个文件，在里面加上一行代码就能解决。</p>
<h2 id="2-加入此行代码到页面"><a href="#2-加入此行代码到页面" class="headerlink" title="2.加入此行代码到页面"></a>2.加入此行代码到页面<head><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head></h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"no-referrer"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre>
<h2 id="3-暂时解决载了外链限制的问题"><a href="#3-暂时解决载了外链限制的问题" class="headerlink" title="3.暂时解决载了外链限制的问题"></a>3.暂时解决载了外链限制的问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595671131433-aced588a-b41e-406a-acf6-6133df722701.png#height=195&id=fJoeB&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1288&originalType=binary&size=105257&status=done&style=none&width=644" alt="image.png"></p>
<h2 id="4-随之而来的问题出现了"><a href="#4-随之而来的问题出现了" class="headerlink" title="4.随之而来的问题出现了"></a>4.随之而来的问题出现了</h2><p>如果你同时使用了 <a href="https://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子 (https://busuanzi.ibruce.info/)</a>统计，你会发现问题，查看控制台会出现不蒜子出现跨域的请求。这是为什么呢。由于使用了 no-referrer。</p>
<p>关于 no-refferrer 的相关问题可以自行搜索，在这里就不一一解释，直接给出解决方案。</p>
<h2 id="5-目前的解决方案"><a href="#5-目前的解决方案" class="headerlink" title="5.目前的解决方案"></a>5.目前的解决方案</h2><h3 id="1-gt-方案-："><a href="#1-gt-方案-：" class="headerlink" title="1&gt;方案-："></a>1&gt;方案-：</h3><p>按照网友的说法是，meta 是可以放在 <code>&lt;body&gt;</code> 里的吧。<br>所以把 <code>&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</code> 放到 <strong>archive-book.ejs</strong> 的最前面。<br>然后在网页结构里就会是这个样子：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span>
<span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
<span class="token operator">&lt;</span>body <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main-center no-sidebar okayNav-loaded"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>aside <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidebar"</span> <span class="token operator">...</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span> role<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"never"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>article <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article article-links article-type-list"</span> <span class="token operator">...</span><span class="token operator">></span>
<span class="token operator">...</span><span class="token operator">...</span></code></pre>
<p>在它之上的所有链接都会带来源信息，之后的就是 no-referrer 了。所以理论上也就规避了图片的防盗链了。<br>划重点，但是并没有如愿解决不蒜子的跨域问题。</p>
<h3 id="2-gt-方案二：终极解决方案"><a href="#2-gt-方案二：终极解决方案" class="headerlink" title="2&gt;方案二：终极解决方案"></a>2&gt;方案二：终极解决方案</h3><p>由于可以给  <code>[&lt;a&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a)</code>, <code>[&lt;area&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area)</code>, <code>[&lt;img&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img)</code>, <code>[&lt;iframe&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe)</code>, 或者<code>[&lt;link&gt;](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link)</code>元素设置<code>referrerpolicy</code>属性。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"no-referrer"</span><span class="token operator">></span></code></pre>
<p>所以，可以为所有文章内的图片动态添加 referrerpolicy 属性，通过查看控制台找到图片 img 的类名<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702030353-1e6505c0-c918-4e4a-864b-12077c39bc66.png#height=275&id=Iksv5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=2056&originalType=binary&size=252165&status=done&style=none&width=1028" alt="image.png"></p>
<p>在文件夹中全局搜索类名，找到如下代码：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702163492-a013ed03-25f0-4474-a3d1-39aa2753081c.png#height=387&id=Yk8Tw&margin=%5Bobject%20Object%5D&name=image.png&originHeight=774&originWidth=1204&originalType=binary&size=160420&status=done&style=none&width=602" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//为文章内的图片添加no-referrer来隐藏referer（解决第三方图片外链不显示问题）</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"referrerPolicy"</span><span class="token punctuation">,</span> <span class="token string">"no-referrer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>注意每个主题中的文章下的图片类名应该都不一致，所以类名需要根据实际情况，在控制台中查找文章中的图片类名，再去找相应的代码，为其动态添加 referrerPolicy 属性。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>图片链接失效</tag>
        <tag>第三方链接</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈你不知道的gist</title>
    <url>/leader755/1491.html</url>
    <content><![CDATA[<p>1.Gist 是什么<br>关于 Gist 的详细介绍，请阅读官方文档<a href="https://help.github.com/en/articles/about-gists" target="_blank" rel="noopener">About gists</a>，下面只简略介绍部分功能：</p>
<blockquote>
<ul>
<li>Gist 是一种与其他人共享代码片段和粘贴的简单方法。 当您需要与同事或朋友共享示例代码或技术时，可以使用它。</li>
<li>GitHub 提供了一个平台，可以作为团队（私人仓库）或整个世界（公共仓库）的回购共享整个项目。</li>
<li>Gist 就是小型代码片段的分享. 类似的服务还有如 <a href="http://pastebin.com/" target="_blank" rel="noopener">Pastebin</a> 和 <a href="http://pastie.org/" target="_blank" rel="noopener">Pastie</a>, 但明显出生于 Github 的 Gist 更有优势了。</li>
<li>Gist 可以用来写一些东西，然后可以分享，类似笔记软件</li>
<li>每个 Gist 都是一个 Git 库，有版本历史，可以被 fork 或 clone</li>
<li>Gist 有两种：公开的和私有的，私有的不会在你的 Gist 主页显示，也无法用搜索引擎搜索到，但这个链接是人人都能访问的</li>
<li>Gist 可以搜索、下载、嵌入到网页</li>
</ul>
</blockquote>
<h2 id="2-创建新-Gist-编辑修改-Gist"><a href="#2-创建新-Gist-编辑修改-Gist" class="headerlink" title="2.创建新 Gist, 编辑修改 Gist"></a>2.创建新 Gist, 编辑修改 Gist</h2><blockquote>
<ul>
<li><a href="https://gist.github.com/" target="_blank" rel="noopener">https://gist.github.com/</a> , 直接填写内容或者在自己的 Gist 右上角上点击 New gist 即可</li>
<li>可以一个 Gist 多个文件, 使用 Add file 添加即可.</li>
<li>可以设置 indent 为空格 space 还是 tab, tab 长度, 是否行缩进.</li>
<li>点 Create secret gist 创建私有代码, Create public gist 创建开放的 gist. 前者可以不被搜索到.</li>
<li>创建 Gist 后,点选自己的某个 Gist, 进去后右上角可进行网上的编辑/修改: Edit, 编辑; Delete, 删除; Star, 标星. 旁边还有举报 . 修改后下方的 Update public/secret gist 即可保存修改.</li>
<li>编辑时上方的 Make Secret 可以转为私有库.</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609763853304-4c4752b4-9249-450e-9194-99d2f469b688.png#height=799&id=vqgFb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=799&originWidth=1902&originalType=binary&size=78557&status=done&style=none&width=1902" alt="image.png"></p>
<h2 id="3-浏览-Gist"><a href="#3-浏览-Gist" class="headerlink" title="3.浏览 Gist"></a>3.浏览 Gist</h2><blockquote>
<ul>
<li>左上角可以看到列出自己最近的 gist, 右上角 See all of your gists 可以查看所有自己的 Gist.私有 gist 会显示 SECRET 标签.</li>
<li>搜索框可以进行代码搜索(开放 gist), 可能搜出相关的代码片段</li>
<li>点 All Gists 可以到 Discover gists 模式, 查看最近发布或被 fork 的 gists(或者别的排序方式). 参考意义不大.</li>
<li>在浏览 Gist 时点击右上 GithubGist 图标或者左上头像选 Your Gists 即可返回</li>
<li>在浏览 Gist 文件时, 点 Raw 可以看文字的纯代码.</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609764783415-9360e86d-2b00-4a87-ad62-c5c18adf8a40.png#height=920&id=htKGa&margin=%5Bobject%20Object%5D&name=image.png&originHeight=920&originWidth=1905&originalType=binary&size=113902&status=done&style=none&width=1905" alt="image.png"></p>
<h2 id="4-分享"><a href="#4-分享" class="headerlink" title="4.分享"></a>4.分享</h2><blockquote>
<p>点击一个 gist 进去, , 在 Edit 菜单下方有几个选项:</p>
<ul>
<li>分享 (可选方式框,代码/地址, 复制到黏贴板),<ul>
<li>Embed 是 HTML 嵌入代码,</li>
<li>Share 是分享链接,</li>
<li>Clone via HTTPS 是 https 克隆</li>
<li>Clone via SSH 是 ssh 克隆</li>
</ul>
</li>
<li>下载下来使用 Github Desktop 打开管理,</li>
<li>Download Zip(下载全部内容并打包).</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609764289629-71d68f1e-b8a3-41a5-86c5-38bb1de621e8.png#height=924&id=iB4C3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=924&originWidth=1905&originalType=binary&size=139893&status=done&style=none&width=1905" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://gist.github.com/Leader755/93a14d335e6650edbb7fe17e6aedb51d.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h2 id="5-创建-vscode-的-gist-的代码片段分享"><a href="#5-创建-vscode-的-gist-的代码片段分享" class="headerlink" title="5.创建 vscode 的 gist 的代码片段分享"></a>5.创建 vscode 的 gist 的代码片段分享</h2><h3 id="1-首先在-github-中创建-Personal-access-tokens，创建成功将获取到秘钥保存-只会展示一次-。"><a href="#1-首先在-github-中创建-Personal-access-tokens，创建成功将获取到秘钥保存-只会展示一次-。" class="headerlink" title="1.首先在 github 中创建 Personal access tokens，创建成功将获取到秘钥保存(只会展示一次)。"></a>1.首先在 github 中创建 Personal access tokens，创建成功将获取到秘钥保存(只会展示一次)。</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609766189892-d932cfab-6169-4c42-8f81-f98011ff28ae.png#height=1055&id=V7wIz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1055&originWidth=1333&originalType=binary&size=109198&status=done&style=none&width=1333" alt="image.png"></p>
<h3 id="2-vscode-中插件中搜索-share-code-并安装"><a href="#2-vscode-中插件中搜索-share-code-并安装" class="headerlink" title="2.vscode 中插件中搜索 share code 并安装"></a>2.vscode 中插件中搜索 share code 并安装</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609766300298-333db3e2-047a-4c62-9543-dcef5a12d9f0.png#height=783&id=j7DY3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=783&originWidth=1856&originalType=binary&size=179994&status=done&style=none&width=1856" alt="image.png"></p>
<h3 id="3-设置快捷键并在-setting-json-中配置-github-等相关的信息。"><a href="#3-设置快捷键并在-setting-json-中配置-github-等相关的信息。" class="headerlink" title="3.设置快捷键并在 setting.json 中配置 github 等相关的信息。"></a>3.设置快捷键并在 setting.json 中配置 github 等相关的信息。</h3><h4 id="1-gt-ctrl-shift-p-打开搜索，输入-share-code，并点击设置配置快捷方式"><a href="#1-gt-ctrl-shift-p-打开搜索，输入-share-code，并点击设置配置快捷方式" class="headerlink" title="1&gt;ctrl+shift+p 打开搜索，输入 share code，并点击设置配置快捷方式"></a>1&gt;ctrl+shift+p 打开搜索，输入 share code，并点击设置配置快捷方式</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609766482073-5b67a170-7b1b-4cdd-aaef-1c7002fa0276.png#height=119&id=C4hI4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=119&originWidth=1156&originalType=binary&size=16597&status=done&style=none&width=1156" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609766507674-b9797660-1da9-4d42-a545-520a1bbeb853.png#height=98&id=lptKy&margin=%5Bobject%20Object%5D&name=image.png&originHeight=98&originWidth=1446&originalType=binary&size=7978&status=done&style=none&width=1446" alt="image.png"></p>
<h4 id="2-gt-在-setting-json-中配置以下"><a href="#2-gt-在-setting-json-中配置以下" class="headerlink" title="2&gt;在 setting.json 中配置以下:"></a>2&gt;在 setting.json 中配置以下:</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">//vscode的gist的分享</span>
  <span class="token string">"shareCode.github.username"</span><span class="token punctuation">:</span> <span class="token string">"Leader755"</span><span class="token punctuation">,</span>
  <span class="token string">"shareCode.github.authtoken"</span><span class="token punctuation">:</span> <span class="token string">"3751ef6lkgds4e0befkhdwe82f1bccf907b3a6038a22"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//填写自己的</span>
  <span class="token string">"shareCode.pastebin.username"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>
  <span class="token string">"shareCode.pastebin.authtoken"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>
  <span class="token string">"shareCode.gitlab.baseurl"</span><span class="token punctuation">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>
  <span class="token string">"shareCode.gitlab.authtoken"</span><span class="token punctuation">:</span> <span class="token string">"..."</span>
 <span class="token comment" spellcheck="true">//vscode的gist的分享</span></code></pre>
<h3 id="4-vscode-中分享代码片段到-github"><a href="#4-vscode-中分享代码片段到-github" class="headerlink" title="4.vscode 中分享代码片段到 github"></a>4.vscode 中分享代码片段到 github</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1609766797275-3f9b9ca2-19f2-4204-bde1-2586290dd498.png#height=535&id=LntVT&margin=%5Bobject%20Object%5D&name=image.png&originHeight=535&originWidth=1317&originalType=binary&size=131759&status=done&style=none&width=1317" alt="image.png"></p>
]]></content>
      <categories>
        <category>share code</category>
      </categories>
      <tags>
        <tag>gist</tag>
      </tags>
  </entry>
  <entry>
    <title>Element表单验证</title>
    <url>/leader755/35753.html</url>
    <content><![CDATA[<h2 id="1-gt-常规验证和自定义验证"><a href="#1-gt-常规验证和自定义验证" class="headerlink" title="1&gt;常规验证和自定义验证"></a>1&gt;常规验证和自定义验证</h2><h3 id="1-element-ui-中的表单校验"><a href="#1-element-ui-中的表单校验" class="headerlink" title="1.element-ui 中的表单校验"></a>1.element-ui 中的表单校验</h3><p>要加验证之前一定要确保已经写了 prop 属性，该属性是跟 rule 绑定在一起的，也可以在行内单独制定 rules。</p>
<blockquote>
<ul>
<li>方式一：<ul>
<li>常规写法</li>
<li>el-from :rules=“rules”</li>
<li>el-from-item 中 prop 与 rules 中属性名对应</li>
</ul>
</li>
<li>方式二：<ul>
<li>行内校验</li>
<li>直接 el-from-item 中写 prop 和:rules 需求</li>
</ul>
</li>
<li>方式三：<ul>
<li>自定义校验 同方式一 只是将其抽取出来 写成函数</li>
<li>rule 为校验规则对象</li>
<li>value 为 输入值</li>
<li>callback 为回调函数 用于返回</li>
</ul>
</li>
</ul>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>dialog title<span class="token operator">=</span><span class="token string">"新增学生"</span> <span class="token punctuation">:</span>visible<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"addStudent"</span> width<span class="token operator">=</span><span class="token string">"400px"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span>el<span class="token operator">-</span>form  <span class="token punctuation">:</span>model<span class="token operator">=</span><span class="token string">"addDate"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"addRules"</span> ref<span class="token operator">=</span><span class="token string">"addForm"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"账号"</span> <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"formLabelWidth"</span> prop<span class="token operator">=</span><span class="token string">"codeName"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"addDate.codeName"</span> auto<span class="token operator">-</span>complete<span class="token operator">=</span><span class="token string">"off"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"姓名"</span> <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"formLabelWidth"</span> prop<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"addDate.name"</span> auto<span class="token operator">-</span>complete<span class="token operator">=</span><span class="token string">"off"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>

        <span class="token operator">&lt;</span><span class="token operator">--</span> <span class="token number">1</span><span class="token punctuation">.</span>单独对行内效验规则（prop<span class="token punctuation">,</span><span class="token punctuation">:</span>rules）<span class="token operator">--</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"学号"</span> <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"formLabelWidth"</span> prop<span class="token operator">=</span><span class="token string">"code"</span>  <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"[{ required: true, message: '不能为空',trigger:'blur'}]"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"addDate.code"</span>  auto<span class="token operator">-</span>complete<span class="token operator">=</span><span class="token string">"off"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>

    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"专业"</span> <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"formLabelWidth"</span> prop<span class="token operator">=</span><span class="token string">"major_name"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>select v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"addDate.major_name"</span> placeholder<span class="token operator">=</span><span class="token string">"请选择专业"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>el<span class="token operator">-</span>option v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(major,index) in majorList"</span> <span class="token punctuation">:</span>label<span class="token operator">=</span><span class="token string">"major.name"</span> <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"major.name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>option<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>select<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>

        <span class="token operator">&lt;</span><span class="token operator">--</span> 行内效验的三元表达式形式 <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item prop<span class="token operator">=</span><span class="token string">"money"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"ruleForm.isGiveMoney?[{ required: true, message: '请输入1-1000000之间的正整数', trigger: 'blur' }]:[{ required: false}]"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"ruleForm.money"</span> <span class="token punctuation">:</span>disabled<span class="token operator">=</span><span class="token string">"ruleForm.isGiveMoney==0"</span> oninput<span class="token operator">=</span><span class="token string">"value=value.replace(/[^\d]/g,'')"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
     <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span>
  <span class="token operator">&lt;</span>div slot<span class="token operator">=</span><span class="token string">"footer"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"dialog-footer"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>button @click<span class="token operator">=</span><span class="token string">"addStudent = false"</span><span class="token operator">></span>取 消<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>button type<span class="token operator">=</span><span class="token string">"primary"</span> @click<span class="token operator">=</span><span class="token string">"addStudentData('addForm')"</span><span class="token operator">></span>确 定<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>dialog<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/**3.自定义效验规则**/</span>
    <span class="token comment" spellcheck="true">// 添加学生账号的正则</span>
    <span class="token keyword">let</span> validcodeName<span class="token operator">=</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span>value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token regex">/[0-9a-zA-Z]{4,9}/</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'账号必须是由4-9位数字和字母组合'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> validCode<span class="token operator">=</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span>value<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> reg<span class="token operator">=</span><span class="token regex">/[0-9a-zA-Z]{4,9}/</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'学号必须是由4-9位数字和字母组合'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">/***1.常规效验规则（prop需要与rules中属性名对应）***/</span>
      addRules<span class="token punctuation">:</span><span class="token punctuation">{</span>
          codeName<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//多种效验</span>
            <span class="token punctuation">{</span>required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span><span class="token string">'请输入账号'</span><span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'blur'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>validator<span class="token punctuation">:</span>validcodeName<span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'blur'</span><span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          name<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//常规效验input</span>
            <span class="token punctuation">{</span>required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span><span class="token string">'请输入姓名'</span><span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'blur'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//非空效验</span>
            <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>max<span class="token punctuation">:</span><span class="token number">5</span> message<span class="token punctuation">:</span> <span class="token string">'请输入2至5个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//长度效验</span>
            <span class="token punctuation">{</span> pattern<span class="token punctuation">:</span> <span class="token regex">/^[A-Za-z0-9\u4e00-\u9fa5]+$/</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'不允许输入空格等特殊符号'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//正则效验</span>
              <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'number'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'年龄必须为数字值'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//数字效验</span>
            <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'array'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请至少选择一个活动性质'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'change'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//数组长度效验</span>
            <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'date'</span><span class="token punctuation">,</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请选择时间'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'change'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//时间效验</span>
              <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'email'</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请输入正确的邮箱地址'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'blur'</span><span class="token punctuation">,</span> <span class="token string">'change'</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//email效验</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          major_name<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//常规效验 select</span>
            <span class="token punctuation">{</span>required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span><span class="token string">'请选择专业'</span><span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'change'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          mobile<span class="token punctuation">:</span><span class="token punctuation">[</span> <span class="token comment" spellcheck="true">//自定义效验</span>
            <span class="token punctuation">{</span>validator<span class="token punctuation">:</span>validMobile<span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'blur'</span><span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
          email<span class="token punctuation">:</span><span class="token punctuation">[</span>
            <span class="token punctuation">{</span>type<span class="token punctuation">:</span><span class="token string">'email'</span><span class="token punctuation">,</span>message<span class="token punctuation">:</span><span class="token string">'格式不对'</span><span class="token punctuation">,</span>trigger<span class="token punctuation">:</span><span class="token string">'blur'</span><span class="token punctuation">}</span>
          <span class="token punctuation">]</span><span class="token punctuation">,</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//添加学生的正则</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">// 但是有时候需要移除其中的某一项校验</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*条件*/</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>addForm<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>addForm<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>valid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'submit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error submit!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h3 id="2-validateField-和-validate-效验表单的区别"><a href="#2-validateField-和-validate-效验表单的区别" class="headerlink" title="2.validateField()和 validate()效验表单的区别"></a>2.validateField()和 validate()效验表单的区别</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"120"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"formRules"</span> <span class="token punctuation">:</span>model<span class="token operator">=</span><span class="token string">"form"</span> ref<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"活动名称"</span> prop<span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"form.name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
      form：<span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 校验规则</span>
      formRules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请输入活动名称'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在 3 到 5 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
    save（） <span class="token punctuation">{</span>
         <span class="token comment" spellcheck="true">//1>对部分表单字段进行验证</span>
         <span class="token comment" spellcheck="true">//三个参数：是否校验成功Boolean和回调函数（是否校验成功Boolean）</span>
         <span class="token comment" spellcheck="true">//validateField(props: array | string, callback: Function(errorMessage: string))</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">validateField</span><span class="token punctuation">(</span><span class="token string">"phone"</span><span class="token punctuation">,</span> errMsg <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"手机号校验未通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"校验通过"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//2>对全部表单字进行验证</span>
            <span class="token comment" spellcheck="true">//两个参数：是否校验成功Boolean和未通过校验的字段Object。</span>
      <span class="token comment" spellcheck="true">//validate(callback: Function(boolean, object))</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>form<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span>isvalid<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>isvalid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'submit!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'error submit!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment" spellcheck="true">//有可能this.$refs[form].validate() 方式不识别。需要使用: this.$refs.form.validate();</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="3-clearValidate-和-resetFields-清除表单校验的区别"><a href="#3-clearValidate-和-resetFields-清除表单校验的区别" class="headerlink" title="3.clearValidate()和 resetFields()清除表单校验的区别"></a>3.clearValidate()和 resetFields()清除表单校验的区别</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form <span class="token punctuation">:</span>label<span class="token operator">-</span>width<span class="token operator">=</span><span class="token string">"120"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"formRules"</span> <span class="token punctuation">:</span>model<span class="token operator">=</span><span class="token string">"form"</span> ref<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"活动名称"</span> prop<span class="token operator">=</span><span class="token string">"name"</span> ref<span class="token operator">=</span><span class="token string">"formName"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"form.name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> validateDepart <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>formRules<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'请填写'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
      form：<span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span>
        <span class="token comment" spellcheck="true">// 校验规则</span>
      formRules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span><span class="token punctuation">,</span> validator<span class="token punctuation">:</span> validateDepart<span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'请输入活动名称'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> min<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> max<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string">'长度在 3 到 5 个字符'</span><span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> <span class="token string">'blur'</span> <span class="token punctuation">}</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
    empty（） <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//重置</span>

        <span class="token comment" spellcheck="true">//1>移除所有的效验</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//重置表单和移除校验结果</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>form<span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//移除校验结果</span>

            <span class="token comment" spellcheck="true">//2>移除部分效验</span>
      <span class="token comment" spellcheck="true">// Function(props: array | string)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'form'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span><span class="token string">'formName'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clearValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

             <span class="token keyword">this</span><span class="token punctuation">.</span>formRules<span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>validator <span class="token operator">=</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
              <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">}</span>

      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>// 二者都能清除验证，但是 resetFields（）会重置字段值，而在 vue 中大量用到的数据的绑定，很可能出现<br>// 同一个数据绑定在多处的情况，如果滥用 resetFields 很可能造成界面上出现莫名的 bug</p>
</blockquote>
<h2 id="3-gt-动态验证"><a href="#3-gt-动态验证" class="headerlink" title="3&gt;动态验证"></a>3&gt;动态验证</h2><h3 id="单循环和双循环"><a href="#单循环和双循环" class="headerlink" title="单循环和双循环"></a>单循环和双循环</h3><p>Element 的表单验证要注意的就是 v-model 和 prop 的值要对应上，不然无法触发验证。</p>
<blockquote>
<ol>
<li>循环的数组和其他表单项在同一个 form 表单中</li>
<li>prop 改为：prop，形式为’Item.’+index+’.name’，String 类型。</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>每一个循环中的都需要加：rules</li>
</ol>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>form <span class="token punctuation">:</span>model<span class="token operator">=</span><span class="token string">"formData"</span> <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"rules"</span> ref<span class="token operator">=</span><span class="token string">"ruleForm"</span> <span class="token operator">></span>
   <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(Item, Index) in formData.Parent"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"姓名"</span> <span class="token punctuation">:</span>prop<span class="token operator">=</span><span class="token string">"'Parent.' + Index + '.name'"</span>
                                <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"{required: true, message: '请输入姓名',trigger: 'blur'}"</span><span class="token operator">></span>
       <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"Item.name"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>
    <span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item, index) in Item.children"</span><span class="token operator">></span>
      <span class="token operator">&lt;</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item label<span class="token operator">=</span><span class="token string">"性别"</span> <span class="token punctuation">:</span>prop<span class="token operator">=</span><span class="token string">"'Parent.' + Index + '.children.' + index + '.sex'"</span>
                                  <span class="token punctuation">:</span>rules<span class="token operator">=</span><span class="token string">"{required: true, message: '请输入性别',trigger: 'blur'}"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>el<span class="token operator">-</span>input v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"item.sex"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>input<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">-</span>item<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>form<span class="token operator">></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
         formData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        Parent<span class="token punctuation">:</span> <span class="token punctuation">[</span>
          <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>sex<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>sex<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>children<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>sex<span class="token punctuation">:</span> <span class="token string">''</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>sex<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span> <span class="token punctuation">]</span><span class="token punctuation">}</span>
        <span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
            rules<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>element-ui</tag>
      </tags>
  </entry>
  <entry>
    <title>YAML</title>
    <url>/leader755/11638.html</url>
    <content><![CDATA[<p>现代编程中，少不了编写配置文件，常用的配置文件编写格式有：<code>xml</code>，<code>json</code>，在前端工程化开发中，甚至还有使用 <code>js</code> 作为配置文件的。<br>本文将介绍一种更适合编写配置的语言 <code>YAML（Yet Another Markup Language）</code>。并记录其标准语法。</p>
<p><strong>YAML</strong> 的语法和其他高级语言类似，并且可以简单表达 <code>清单（数组）、散列表（对象），标量（纯量）</code> 等数据形态。它使用 <strong>空白符号</strong> 缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲（例如：许多电子邮件标题格式和 <strong>YAML</strong> 非常接近）。</p>
<p><strong>YAML</strong> 的配置文件后缀为 <code>.yml</code>，如：<code>_config.yml</code> 。</p>
<pre class=" language-html"><code class="language-html">1. 大小写敏感。 2. 使用缩进表示层级关系。 3. 缩进时不允许使用 Tab
键，只允许使用空格。 4. 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可。
5. 键值对之间，一定要存在空格。</code></pre>
<p>在 <code>YAML</code> 中，使用 <code>#</code> 进行注释标识。以 <code>#</code> 开头的行都会被解析器忽略。</p>
<pre class=" language-yml"><code class="language-yml"># 我是一行注释</code></pre>
<p><code>YAML</code> 支持的数据结构有 <strong>3</strong> 种。</p>
<pre class=" language-html"><code class="language-html">对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）
数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）
纯量（scalars）：单个的、不可再分的值</code></pre>
<p>接下来，介绍他们各自的书写语法。并以 <a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener">js-yaml</a> 的实现为例进行讲解。</p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>YAML 语言（发音 /ˈjæməl/ ）的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。<br>它的基本语法规则如下。</p>
<blockquote>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
</ul>
</blockquote>
<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。<br>YAML 支持的数据结构有三种。</p>
<blockquote>
<ul>
<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>
<li>纯量（scalars）：单个的、不可再分的值</li>
</ul>
</blockquote>
<p>以下分别介绍这三种数据结构。</p>
<h2 id="二、对象"><a href="#二、对象" class="headerlink" title="二、对象"></a>二、对象</h2><p>对象的一组键值对，使用冒号结构表示。</p>
<pre><code>1.
2.
3. animal: pets
4.</code></pre><p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token string">'pets'</span> <span class="token punctuation">}</span></code></pre>
<p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p>
<pre class=" language-ruby"><code class="language-ruby">hash<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token constant">Steve</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> bar <span class="token punctuation">}</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> hash<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> foo<span class="token punctuation">:</span> <span class="token string">'bar'</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre>
<h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><p>一组连词线开头的行，构成一个数组。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token operator">-</span> <span class="token constant">Cat</span>
 <span class="token operator">-</span> <span class="token constant">Dog</span>
 <span class="token operator">-</span> <span class="token constant">Goldfish</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">[</span> <span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token string">'Dog'</span><span class="token punctuation">,</span> <span class="token string">'Goldfish'</span> <span class="token punctuation">]</span></code></pre>
<p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token operator">-</span>
 <span class="token operator">-</span> <span class="token constant">Cat</span>
 <span class="token operator">-</span> <span class="token constant">Dog</span>
 <span class="token operator">-</span> <span class="token constant">Goldfish</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">[</span> <span class="token punctuation">[</span> <span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token string">'Dog'</span><span class="token punctuation">,</span> <span class="token string">'Goldfish'</span> <span class="token punctuation">]</span> <span class="token punctuation">]</span></code></pre>
<p>数组也可以采用行内表示法。</p>
<pre class=" language-ruby"><code class="language-ruby">animal<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token constant">Cat</span><span class="token punctuation">,</span> <span class="token constant">Dog</span><span class="token punctuation">]</span></code></pre>
<p>转为 JavaScript 如下</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> animal<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token string">'Dog'</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre>
<h2 id="四、复合结构"><a href="#四、复合结构" class="headerlink" title="四、复合结构"></a>四、复合结构</h2><p>对象和数组可以结合使用，形成复合结构。</p>
<pre class=" language-ruby"><code class="language-ruby"> languages<span class="token punctuation">:</span>
 <span class="token operator">-</span> <span class="token constant">Ruby</span>
 <span class="token operator">-</span> <span class="token constant">Perl</span>
 <span class="token operator">-</span> <span class="token constant">Python</span>
websites<span class="token punctuation">:</span>
 <span class="token constant">YAML</span><span class="token punctuation">:</span> yaml<span class="token punctuation">.</span>org
 <span class="token constant">Ruby</span><span class="token punctuation">:</span> ruby<span class="token operator">-</span>lang<span class="token punctuation">.</span>org
 <span class="token constant">Python</span><span class="token punctuation">:</span> python<span class="token punctuation">.</span>org
 <span class="token constant">Perl</span><span class="token punctuation">:</span> use<span class="token punctuation">.</span>perl<span class="token punctuation">.</span>org</code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> languages<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">'Ruby'</span><span class="token punctuation">,</span> <span class="token string">'Perl'</span><span class="token punctuation">,</span> <span class="token string">'Python'</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
websites<span class="token punctuation">:</span>
 <span class="token punctuation">{</span> <span class="token constant">YAML</span><span class="token punctuation">:</span> <span class="token string">'yaml.org'</span><span class="token punctuation">,</span>
   <span class="token constant">Ruby</span><span class="token punctuation">:</span> <span class="token string">'ruby-lang.org'</span><span class="token punctuation">,</span>
     <span class="token constant">Python</span><span class="token punctuation">:</span> <span class="token string">'python.org'</span><span class="token punctuation">,</span>
   <span class="token constant">Perl</span><span class="token punctuation">:</span> <span class="token string">'use.perl.org'</span>
  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>
<h2 id="五、纯量"><a href="#五、纯量" class="headerlink" title="五、纯量"></a>五、纯量</h2><p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>
<blockquote>
<ul>
<li>字符串</li>
<li>布尔值</li>
<li>整数</li>
<li>浮点数</li>
<li>Null</li>
<li>时间</li>
<li>日期</li>
</ul>
</blockquote>
<p>数值直接以字面量的形式表示。</p>
<pre class=" language-ruby"><code class="language-ruby"> number<span class="token punctuation">:</span> <span class="token number">12.30</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> number<span class="token punctuation">:</span> <span class="token number">12.30</span> <span class="token punctuation">}</span></code></pre>
<p>布尔值用<code>true</code>和<code>false</code>表示。</p>
<pre class=" language-ruby"><code class="language-ruby"> isSet<span class="token punctuation">:</span> <span class="token keyword">true</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> isSet<span class="token punctuation">:</span> <span class="token keyword">true</span> <span class="token punctuation">}</span></code></pre>
<p><code>null</code>用<code>~</code>表示。</p>
<pre class=" language-ruby"><code class="language-ruby"> parent<span class="token punctuation">:</span> <span class="token operator">~</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> parent<span class="token punctuation">:</span> null <span class="token punctuation">}</span></code></pre>
<p>时间采用 ISO8601 格式。</p>
<pre><code> iso8601: 2001-12-14t21:59:43.10-05:00</code></pre><p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> iso8601<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2001-12-14t21:59:43.10-05:00'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre>
<p>日期采用复合 iso8601 格式的年、月、日表示。</p>
<pre class=" language-ruby"><code class="language-ruby"> date<span class="token punctuation">:</span> <span class="token number">1976</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">31</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'1976-07-31'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre>
<p>YAML 允许使用两个感叹号，强制转换数据类型。</p>
<pre class=" language-ruby"><code class="language-ruby"> e<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>str <span class="token number">123</span>
 f<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>str <span class="token keyword">true</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> e<span class="token punctuation">:</span> <span class="token string">'123'</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token string">'true'</span> <span class="token punctuation">}</span></code></pre>
<h2 id="六、字符串"><a href="#六、字符串" class="headerlink" title="六、字符串"></a>六、字符串</h2><p>字符串是最常见，也是最复杂的一种数据类型。<br>字符串默认不使用引号表示。</p>
<pre class=" language-ruby"><code class="language-ruby">str<span class="token punctuation">:</span> 这是一行字符串</code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> str<span class="token punctuation">:</span> <span class="token string">'这是一行字符串'</span> <span class="token punctuation">}</span></code></pre>
<p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>
<pre class=" language-ruby"><code class="language-ruby">str<span class="token punctuation">:</span> <span class="token string">'内容： 字符串'</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> str<span class="token punctuation">:</span> <span class="token string">'内容: 字符串'</span> <span class="token punctuation">}</span></code></pre>
<p>单引号和双引号都可以使用，双引号不会对特殊字符转义。</p>
<pre class=" language-ruby"><code class="language-ruby"> s1<span class="token punctuation">:</span> <span class="token string">'内容\n字符串'</span>
 s2<span class="token punctuation">:</span> <span class="token string">"内容\n字符串"</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> s1<span class="token punctuation">:</span> <span class="token string">'内容\\n字符串'</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token string">'内容\n字符串'</span> <span class="token punctuation">}</span></code></pre>
<p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>
<pre class=" language-ruby"><code class="language-ruby"> str<span class="token punctuation">:</span> <span class="token string">'labor'</span><span class="token string">'s day'</span></code></pre>
<p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">{</span> str<span class="token punctuation">:</span> <span class="token string">'labor\'s day'</span> <span class="token punctuation">}</span></code></pre>
<p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>
<pre><code> str: 这是一段
       多行
      字符串</code></pre><p>转为 JavaScript 如下。</p>
<pre><code> { str: &#39;这是一段 多行 字符串&#39; }</code></pre><p>多行字符串可以使用<code>|</code>保留换行符，也可以使用<code>&gt;</code>折叠换行。</p>
<pre><code> this: |
         Foo
       Bar
        that: &gt;
      Foo
      Bar</code></pre><p>转为 JavaScript 代码如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> this<span class="token punctuation">:</span> <span class="token string">'Foo\nBar\n'</span><span class="token punctuation">,</span> that<span class="token punctuation">:</span> <span class="token string">'Foo Bar\n'</span> <span class="token punctuation">}</span></code></pre>
<p><code>+</code>表示保留文字块末尾的换行，<code>-</code>表示删除字符串末尾的换行。</p>
<pre><code>         s1: |
       Foo

         s2: |+
         Foo


         s3: |-
         Foo</code></pre><p>转为 JavaScript 代码如下。</p>
<pre class=" language-ruby"><code class="language-ruby">  <span class="token punctuation">{</span> s1<span class="token punctuation">:</span> <span class="token string">'Foo\n'</span><span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token string">'Foo\n\n\n'</span><span class="token punctuation">,</span> s3<span class="token punctuation">:</span> <span class="token string">'Foo'</span> <span class="token punctuation">}</span>
</code></pre>
<p>字符串之中可以插入 HTML 标记。</p>
<pre><code> message: |

        &lt;p style=&quot;color: red&quot;&gt;
     段落
       &lt;/p&gt;
</code></pre><p>转为 JavaScript 如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">{</span> message<span class="token punctuation">:</span> <span class="token string">'\n&lt;p style="color: red">\n  段落\n&lt;/p>\n'</span> <span class="token punctuation">}</span></code></pre>
<h2 id="七、引用"><a href="#七、引用" class="headerlink" title="七、引用"></a>七、引用</h2><p>锚点<code>&amp;</code>和别名<code>*</code>，可以用来引用。</p>
<pre class=" language-ruby"><code class="language-ruby">defaults<span class="token punctuation">:</span> <span class="token operator">&amp;</span>defaults
   adapter<span class="token punctuation">:</span>  postgres
   host<span class="token punctuation">:</span>     localhost

     development<span class="token punctuation">:</span>
  database<span class="token punctuation">:</span> myapp_development
  <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token punctuation">:</span> <span class="token operator">*</span>defaults

     test<span class="token punctuation">:</span>
   database<span class="token punctuation">:</span> myapp_test
   <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token punctuation">:</span> <span class="token operator">*</span>defaults
</code></pre>
<p>等同于下面的代码。</p>
<pre class=" language-ruby"><code class="language-ruby">
    defaults<span class="token punctuation">:</span>
       adapter<span class="token punctuation">:</span>  postgres
       host<span class="token punctuation">:</span>      localhost

  development<span class="token punctuation">:</span>
   database<span class="token punctuation">:</span> myapp_development
   adapter<span class="token punctuation">:</span>  postgres
   host<span class="token punctuation">:</span>     localhost

  test<span class="token punctuation">:</span>
   database<span class="token punctuation">:</span> myapp_test
     adapter<span class="token punctuation">:</span>  postgres
   host<span class="token punctuation">:</span>     localhost
</code></pre>
<p><code>&amp;</code>用来建立锚点（<code>defaults</code>），<code>&lt;&lt;</code>表示合并到当前数据，<code>*</code>用来引用锚点。<br>下面是另一个例子。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">-</span> <span class="token operator">&amp;</span>showell <span class="token constant">Steve</span>
 <span class="token operator">-</span> <span class="token constant">Clark</span>
 <span class="token operator">-</span> <span class="token constant">Brian</span>
 <span class="token operator">-</span> <span class="token constant">Oren</span>
 <span class="token operator">-</span> <span class="token operator">*</span>showell</code></pre>
<p>转为 JavaScript 代码如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token punctuation">[</span> <span class="token string">'Steve'</span><span class="token punctuation">,</span> <span class="token string">'Clark'</span><span class="token punctuation">,</span> <span class="token string">'Brian'</span><span class="token punctuation">,</span> <span class="token string">'Oren'</span><span class="token punctuation">,</span> <span class="token string">'Steve'</span> <span class="token punctuation">]</span></code></pre>
<h2 id="八、函数和正则表达式的转换"><a href="#八、函数和正则表达式的转换" class="headerlink" title="八、函数和正则表达式的转换"></a>八、函数和正则表达式的转换</h2><p>这是 <a href="https://github.com/nodeca/js-yaml" target="_blank" rel="noopener">JS-YAML</a> 库特有的功能，可以把函数和正则表达式转为字符串。</p>
<pre class=" language-ruby"><code class="language-ruby"> <span class="token comment" spellcheck="true"># example.yml</span>
 fn<span class="token punctuation">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span>
 reg<span class="token punctuation">:</span> <span class="token regex">/test/</span>
</code></pre>
<p>解析上面的 yml 文件的代码如下。</p>
<pre class=" language-ruby"><code class="language-ruby"> var yaml <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'js-yaml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 var fs   <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 try <span class="token punctuation">{</span>
   var doc <span class="token operator">=</span> yaml<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>
     fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./example.yml'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
<p>从 JavaScript 对象还原到 yaml 文件的代码如下。</p>
<pre class=" language-ruby"><code class="language-ruby">var yaml <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'js-yaml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
var fs   <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 var obj <span class="token operator">=</span> <span class="token punctuation">{</span>
   fn<span class="token punctuation">:</span> <span class="token function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
   reg<span class="token punctuation">:</span> <span class="token regex">/test/</span>
 <span class="token punctuation">}</span><span class="token punctuation">;</span>

 try <span class="token punctuation">{</span>
   fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>
     <span class="token string">'./example.yml'</span><span class="token punctuation">,</span>
     yaml<span class="token punctuation">.</span><span class="token function">dump</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token string">'utf8'</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token function">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span></code></pre>
<h2 id="九、参考链接"><a href="#九、参考链接" class="headerlink" title="九、参考链接"></a>九、参考链接</h2><ul>
<li><a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="noopener">YAML 1.2 规格</a></li>
<li><a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">YAML from Wikipedia</a></li>
<li><a href="http://yaml.org/YAML_for_ruby.html" target="_blank" rel="noopener">YAML for Ruby</a></li>
</ul>
<p>（完）</p>
<p>原文地址：<a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p>
]]></content>
      <categories>
        <category>YAML</category>
      </categories>
      <tags>
        <tag>.yml</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装jdk ,maven，tomcat，nginx</title>
    <url>/leader755/50783.html</url>
    <content><![CDATA[<p>##</p>
<h2 id="1-centos7-安装-tomcat"><a href="#1-centos7-安装-tomcat" class="headerlink" title="1.centos7 安装 tomcat"></a>1.centos7 安装 tomcat</h2><h3 id="1-gt-JDK-安装"><a href="#1-gt-JDK-安装" class="headerlink" title="1&gt;JDK 安装"></a>1&gt;JDK 安装</h3><p>1、查看系统版本命令</p>
<pre class=" language-ruby"><code class="language-ruby">cat <span class="token operator">/</span>etc<span class="token operator">/</span>issue</code></pre>
<p>2、查看 yum 包含的 jdk 版本</p>
<pre class=" language-ruby"><code class="language-ruby">yum search java 或者 yum list java<span class="token operator">*</span></code></pre>
<table>
<thead>
<tr>
<th>版本</th>
<th>jre</th>
<th>jdk</th>
</tr>
</thead>
<tbody><tr>
<td>1.8</td>
<td>java-1.8.0-openjdk.x86_64</td>
<td>java-1.8.0-openjdk-devel.x86_64</td>
</tr>
<tr>
<td>1.7</td>
<td>java-1.7.0-openjdk.x86_64</td>
<td>java-1.7.0-openjdk-devel.x86_64</td>
</tr>
<tr>
<td>1.6</td>
<td>java-1.6.0-openjdk.x86_64</td>
<td>java-1.6.0-openjdk-devel.x86_64</td>
</tr>
</tbody></table>
<p>3、安装 jdk</p>
<blockquote>
<p>此次选择 java-1.8.0-openjdk-devel.x86_64 : OpenJDK Development Environment</p>
</blockquote>
<pre class=" language-ruby"><code class="language-ruby">yum install java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>devel<span class="token punctuation">.</span>x86_64</code></pre>
<p>4、配置全局变量<br>打开配置文件,按 insert 进入编辑模式</p>
<pre class=" language-ruby"><code class="language-ruby">vi <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre>
<p>复制以下三行到文件最后一行中，按 esc 退出编辑模式，输入:wq 保存退出（这里的 JAVA_HOME 以自己实际的目录为准）</p>
<pre class=" language-ruby"><code class="language-ruby">export <span class="token constant">JAVA_HOME</span><span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0.171</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">.</span>b10<span class="token punctuation">.</span>el6_9<span class="token punctuation">.</span>x86_64
export <span class="token constant">CLASSPATH</span><span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>jre<span class="token operator">/</span>lib<span class="token operator">/</span>rt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib<span class="token operator">/</span>dt<span class="token punctuation">.</span>jar<span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>lib<span class="token operator">/</span>tools<span class="token punctuation">.</span>jar
export <span class="token constant">PATH</span><span class="token operator">=</span><span class="token variable">$PATH</span><span class="token punctuation">:</span><span class="token variable">$JAVA_HOME</span><span class="token operator">/</span>bin</code></pre>
<p>全局变量立即生效</p>
<pre class=" language-ruby"><code class="language-ruby">source <span class="token operator">/</span>etc<span class="token operator">/</span>profile</code></pre>
<p>5、查看安装 jdk 是否成功</p>
<pre class=" language-ruby"><code class="language-ruby">java <span class="token operator">-</span>version</code></pre>
<h3 id="2-gt-maven-安装-非必须"><a href="#2-gt-maven-安装-非必须" class="headerlink" title="2&gt;maven 安装(非必须)"></a>2&gt;maven 安装(非必须)</h3><h4 id="1-gt-下载-maven-安装包资源"><a href="#1-gt-下载-maven-安装包资源" class="headerlink" title="1&gt;下载 maven 安装包资源"></a>1&gt;下载 maven 安装包资源</h4><pre class=" language-bash"><code class="language-bash">1<span class="token operator">></span> //进入指定目录
<span class="token function">cd</span> /usr/local/

2<span class="token operator">></span>//创建目录
<span class="token function">mkdir</span> maven

3<span class="token operator">></span> //进入maven目录
<span class="token function">cd</span> maven/

4<span class="token operator">></span>//下载远程
<span class="token function">wget</span> http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo</code></pre>
<h4 id="2-gt-安装-maven"><a href="#2-gt-安装-maven" class="headerlink" title="2&gt;安装 maven"></a>2&gt;安装 maven</h4><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> apache-maven</code></pre>
<h4 id="3-gt-配置环境变量"><a href="#3-gt-配置环境变量" class="headerlink" title="3&gt;配置环境变量"></a>3&gt;配置环境变量</h4><pre class=" language-bash"><code class="language-bash">1<span class="token operator">></span>编辑
<span class="token function">vi</span> /etc/profile

2<span class="token operator">></span>末尾添加：
<span class="token function">export</span> MAVEN_HOME<span class="token operator">=</span>/maven_path
<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$MAVEN_HOME</span>/bin

3<span class="token operator">></span>使配置生效：
<span class="token function">source</span> /etc/profile
</code></pre>
<h4 id="4-gt-验证是否安装成功"><a href="#4-gt-验证是否安装成功" class="headerlink" title="4&gt;验证是否安装成功"></a>4&gt;验证是否安装成功</h4><pre class=" language-bash"><code class="language-bash">mvn -v</code></pre>
<h3 id="3-gt-Tomcat-安装"><a href="#3-gt-Tomcat-安装" class="headerlink" title="3&gt;Tomcat 安装"></a>3&gt;Tomcat 安装</h3><blockquote>
<p>注意安装 Tomcat 前必须要先安装 JDK，JDK 属于基本环境配置，Maven 选择性的装</p>
</blockquote>
<h4 id="1-gt-安装-tomcat"><a href="#1-gt-安装-tomcat" class="headerlink" title="1&gt;安装 tomcat"></a>1&gt;安装 tomcat</h4><p>1.yum 安装 tomcat (tomcat 的基础服务)</p>
<pre class=" language-ruby"><code class="language-ruby">yum <span class="token operator">-</span>y install tomcat</code></pre>
<p>2.进入 webapps 文件夹</p>
<pre class=" language-ruby"><code class="language-ruby">cd <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>tomcat<span class="token operator">/</span>webapps</code></pre>
<p>3.安装默认浏览器管理界面(否则访问 ip：端口会显示找不到网页)</p>
<pre class=" language-ruby"><code class="language-ruby">yum install tomcat<span class="token operator">-</span>webapps tomcat<span class="token operator">-</span>admin<span class="token operator">-</span>webapps</code></pre>
<p>4.安装在线文档（以便默认 Tomcat 页面上的所有链接都可以运行）可选</p>
<pre class=" language-ruby"><code class="language-ruby">sudo yum install tomcat<span class="token operator">-</span>docs<span class="token operator">-</span>webapp tomcat<span class="token operator">-</span>javadoc</code></pre>
<p>####</p>
<p>5.初始化环境的服务器上执行如下命令进行安装（可替代上面的命令）</p>
<pre class=" language-ruby"><code class="language-ruby">yum install <span class="token operator">-</span>y java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>devel tomcat tomcat<span class="token operator">-</span>admin<span class="token operator">-</span>webapps tomcat<span class="token operator">-</span>docs<span class="token operator">-</span>webapp tomcat<span class="token operator">-</span>lib tomcat<span class="token operator">-</span>webapps</code></pre>
<h4 id="2-gt-查看服务器-tomcat-状态"><a href="#2-gt-查看服务器-tomcat-状态" class="headerlink" title="2&gt;查看服务器 tomcat 状态"></a>2&gt;查看服务器 tomcat 状态</h4><pre class=" language-ruby"><code class="language-ruby">systemctl status tomcat</code></pre>
<blockquote>
<p>dead 为死亡，未运行状态，running（绿色）则是运行状态<img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1604420888230-69aadcbf-166d-4692-82e8-61a42042248c.png#crop=0&crop=0&crop=1&crop=1&height=79&id=Bup67&margin=%5Bobject%20Object%5D&name=image.png&originHeight=158&originWidth=1572&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35683&status=done&style=none&title=&width=786" alt="image.png"></p>
</blockquote>
<h4 id="3-gt-tomcat-的启动、终止"><a href="#3-gt-tomcat-的启动、终止" class="headerlink" title="3&gt;tomcat 的启动、终止"></a>3&gt;tomcat 的启动、终止</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>配置开机启动tomcat
systemctl enable tomcat

<span class="token operator">/</span><span class="token operator">/</span>启动tomcat
systemctl start tomcat

<span class="token operator">/</span><span class="token operator">/</span>停止tomcat
systemctl stop tomcat

<span class="token operator">/</span><span class="token operator">/</span>重启tomcat
systemctl restart tomcat</code></pre>
<h4 id="4-gt-卸载-tomcat"><a href="#4-gt-卸载-tomcat" class="headerlink" title="4&gt;卸载 tomcat"></a>4&gt;卸载 tomcat</h4><pre class=" language-ruby"><code class="language-ruby">yum remove tomcat</code></pre>
<h4 id="5-gt-防火墙开启关闭"><a href="#5-gt-防火墙开启关闭" class="headerlink" title="5&gt;防火墙开启关闭"></a>5&gt;防火墙开启关闭</h4><p>Tomcat 正常启动，但是网页无法访问，而且不报 404 等任何异常</p>
<blockquote>
<p>Windows：控制面板—所有控制面板项-—Windows 防火墙—自定义设置<br>     Ubuntu：查看 ufw status（active 激活、inactive 关闭）<br>                      开启关闭 ufw enable|disable<br>                      开启某个端口 ufw allow [端口号]<br>      ＜ CentOs7：防火墙机制 iptables（被淘汰的内容，请自行百度）<br>      ＞＝ CentOs7：1.CentOS7 使用 firewalld 打开关闭防火墙与端口。<br>                         2.systemctl 是 CentOS7 的服务管理工具中主要的工具，它融合之前 service 和 chkconfig 的功能于一体。<br>                        启动： systemctl start firewalld<br>                        查看状态： systemctl status firewalld ( 或者 firewall -cmd state)<br>                        停止： systemctl disable firewalld<br>                        禁用： systemctl stop firewalld<br>                        添加： firewall-cmd –zone=public –add-port=80/tcp –permanent   （–permanent 永久生效，没有此参数重启后失效）<br>                        重新载入：firewall-cmd –reload</p>
</blockquote>
<p>防火墙的操作：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>查看状态：
systemctl status firewalld <span class="token operator">|</span> firewall <span class="token operator">-</span>cmd state

<span class="token operator">/</span><span class="token operator">/</span>启动：
systemctl start firewalld

<span class="token operator">/</span><span class="token operator">/</span>停止：
systemctl disable firewalld

<span class="token operator">/</span><span class="token operator">/</span>禁用：
systemctl stop firewalld

<span class="token operator">/</span><span class="token operator">/</span>添加： （<span class="token operator">--</span>permanent永久生效，没有此参数重启后失效）
firewall<span class="token operator">-</span>cmd  <span class="token operator">--</span>zone<span class="token operator">=</span>public <span class="token operator">--</span>add<span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">--</span>permanent

<span class="token operator">/</span><span class="token operator">/</span>重新载入：
firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>reload</code></pre>
<h4 id="6-gt-安全组的策略"><a href="#6-gt-安全组的策略" class="headerlink" title="6&gt;安全组的策略"></a>6&gt;安全组的策略</h4><p><a href="https://www.leader755.com/leader755/56219.html"> 关于安全组策略方面的点击这里了解</a></p>
<p>##</p>
<h2 id="2-安装-nginx"><a href="#2-安装-nginx" class="headerlink" title="2.安装 nginx"></a>2.安装 nginx</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>通过yum安装nginx
    <span class="token number">1</span><span class="token operator">></span>将nginx放到yum repro库中
    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># rpm <span class="token operator">-</span>ivh http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>nginx<span class="token punctuation">.</span>org<span class="token operator">/</span>packages<span class="token operator">/</span>centos<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>noarch<span class="token operator">/</span>RPMS<span class="token operator">/</span>nginx<span class="token operator">-</span>release<span class="token operator">-</span>centos<span class="token number">-7</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">.</span>el7<span class="token punctuation">.</span>ngx<span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm
  <span class="token number">2</span><span class="token operator">></span>使用yum安装ngnix
    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># yum install nginx
  <span class="token number">3</span><span class="token operator">></span>查看nginx信息
    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># yum info nginx
  <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token function">卸载nginx</span><span class="token punctuation">(</span>通过yum安装可使用如下卸载<span class="token punctuation">)</span>
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># yum remove nginx

<span class="token number">2</span><span class="token punctuation">.</span>启动<span class="token operator">/</span>停止<span class="token operator">/</span>重启nginx
  <span class="token comment" spellcheck="true">//（service nginx start 是centos6.x的命令 ， centos7.x使用 systemctl start nginx）</span>
    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep nginx  # 查看nginx安装目录
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>t  # 查看nginx<span class="token punctuation">.</span>conf配置文件目录

    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># service nginx start
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>s stop
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>s reload
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>t <span class="token comment" spellcheck="true">//查看配置文件是否正确</span>
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep nginx <span class="token comment" spellcheck="true">//查看nginx进程</span>
  <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>v <span class="token comment" spellcheck="true">//查看nginx版本</span>

<span class="token number">3</span><span class="token punctuation">.</span>查看nginx版本
    <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># nginx <span class="token operator">-</span>v

 <span class="token number">4</span><span class="token punctuation">.</span>访问nginx，现在你可以通过公网ip <span class="token punctuation">(</span>本地可以通过 localhost <span class="token operator">/</span>或 <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token punctuation">)</span> 查看nginx 服务返回的信息。
     <span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># curl <span class="token operator">-</span>i localhost

 <span class="token number">5</span><span class="token punctuation">.</span><span class="token function">查看nginx文件的位置并cd到nginx文件下</span><span class="token punctuation">(</span>在<span class="token operator">/</span>etc<span class="token regex">/nginx/</span><span class="token punctuation">)</span>
     <span class="token comment" spellcheck="true">//[root@localhost ~]# cd /</span>
    <span class="token comment" spellcheck="true">//[root@localhost /]# ll /etc/nginx/</span>
       <span class="token punctuation">[</span>root@localhost <span class="token operator">/</span><span class="token punctuation">]</span># cd <span class="token operator">/</span>etc<span class="token regex">/nginx/</span>

 <span class="token number">6</span><span class="token punctuation">.</span><span class="token function">进入配置文件并修改</span><span class="token punctuation">(</span>由于此处将 server<span class="token punctuation">{</span><span class="token punctuation">}</span> 配置放入<span class="token keyword">default</span><span class="token punctuation">.</span>conf文件，即只需修改 <span class="token keyword">default</span><span class="token punctuation">.</span>conf文件就行<span class="token punctuation">)</span>
     <span class="token comment" spellcheck="true">// [root@localhost nginx]#  vim /etc/nginx/nginx.conf  // 进入server配置文件(此文件配置了会读取conf.d 下的所有文件)</span>
    <span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># vim <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token punctuation">.</span>d<span class="token operator">/</span><span class="token keyword">default</span><span class="token punctuation">.</span>conf <span class="token comment" spellcheck="true">// 进入listen配置文件</span>

 <span class="token number">7</span><span class="token punctuation">.</span><span class="token function">修改nginx的配置文件</span><span class="token punctuation">(</span>修改 监听端口和指向打开的文件目录<span class="token punctuation">)</span>###注意 server对象是并列的关系。
      nginx配置详见以下第一点

 <span class="token number">8</span><span class="token punctuation">.</span>保存修改并重启nginx
    <span class="token number">1</span><span class="token operator">></span>ESC<span class="token operator">+</span><span class="token punctuation">:</span><span class="token function">wq</span><span class="token punctuation">(</span>退出并保存<span class="token punctuation">)</span>
    <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># sudo nginx <span class="token operator">-</span>t <span class="token comment" spellcheck="true">// 验证书写是否正确</span>
    <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true">//重启</span>
  <span class="token comment" spellcheck="true">//或者使用下面</span>
  <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost nginx<span class="token punctuation">]</span># killall <span class="token operator">-</span><span class="token number">9</span> nginx <span class="token comment" spellcheck="true">//强制杀死所有的 nginx 进程</span>
  <span class="token number">5</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># service nginx start <span class="token comment" spellcheck="true">//sha</span>



 <span class="token number">9</span><span class="token punctuation">.</span>Nginx启动时，常见报错如下Address already <span class="token keyword">in</span> use<span class="token punctuation">:</span>
    <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> to <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">,</span> backlog <span class="token number">511</span> failed <span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">:</span> Address already <span class="token keyword">in</span> use<span class="token punctuation">)</span>
    解决办法：
      <span class="token number">1</span><span class="token operator">></span>sudo netstat <span class="token operator">-</span>ntpl <span class="token comment" spellcheck="true">//提示是端口被占用，输入指令查看端口占用情况</span>
        <span class="token number">2</span><span class="token operator">></span>sudo kill <span class="token number">80</span>  <span class="token comment" spellcheck="true">// 可以看到是任务占用80端口，杀死该进程即可</span>
        <span class="token number">3</span><span class="token operator">></span>nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true">// 重新启动nginx</span>
</code></pre>
<p>##</p>
<h3 id="1-gt-nginx-域名配置详细"><a href="#1-gt-nginx-域名配置详细" class="headerlink" title="1&gt;nginx 域名配置详细"></a>1&gt;nginx 域名配置详细</h3><pre class=" language-javascript"><code class="language-javascript"># <span class="token number">1</span><span class="token punctuation">.</span>默认配置文件（检查服务器是否开放 <span class="token number">80</span> 端口）
  server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
      root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
      index  index<span class="token punctuation">.</span>html index<span class="token punctuation">.</span>htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>
      root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>


  # <span class="token number">2</span><span class="token punctuation">.</span>修改端口号（确保服务器有开放端口号）
  server <span class="token punctuation">{</span>
    listen       <span class="token number">5555</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
      root  <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>workspace<span class="token operator">/</span>thorn<span class="token operator">/</span>dist<span class="token punctuation">;</span> #需要修改的路径地址
      try_files $uri $uri<span class="token operator">/</span> index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>
      root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  #<span class="token number">3</span><span class="token punctuation">.</span>为服务器配置多个域名（或端口）（直接将当前配置重新复制一份）
  server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span> #默认指向 <span class="token number">80</span> 端口，可以共用 <span class="token number">80</span> 端口，域名不同就行
    server_name  test<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
    location <span class="token operator">/</span> <span class="token punctuation">{</span>
      #这里我这里指向 jenkins 构建的目录，也可以在构建时的 shell 将文件移动要其他地方。
      root   <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>workspace<span class="token operator">/</span>github<span class="token operator">-</span>test01<span class="token operator">/</span>dist<span class="token punctuation">;</span>

      try_files $uri $uri<span class="token operator">/</span> index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>

  <span class="token punctuation">}</span>

  #<span class="token number">4</span><span class="token punctuation">.</span>配置http和https端口同时可以访问
  server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
    server_name  wwww<span class="token punctuation">.</span>leader755<span class="token punctuation">.</span>com leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span> #多个域名用空格隔开

    # <span class="token function">ssl证书地址</span><span class="token punctuation">(</span>如果配置了https则需要配置<span class="token punctuation">)</span>
    ssl_certificate     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>  # 证书pem文件的路径
    ssl_certificate_key  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span> # 证书key文件的路径

    location <span class="token operator">/</span> <span class="token punctuation">{</span>
        root   <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>workspace<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">;</span> #需要修改的路径地址
        try_files $uri $uri<span class="token operator">/</span> index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>
      root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  #<span class="token number">5</span><span class="token punctuation">.</span>配置访问http<span class="token punctuation">,</span>自动跳转到https
  #leder755<span class="token punctuation">.</span>com
   server <span class="token punctuation">{</span>
      listen <span class="token number">80</span><span class="token punctuation">;</span>
      server_name leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span>
      <span class="token keyword">return</span>  <span class="token number">301</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>$server_name$request_uri<span class="token punctuation">;</span>    #设置http自动跳转到https
   <span class="token punctuation">}</span>

    server <span class="token punctuation">{</span>
     listen       <span class="token number">443</span> ssl<span class="token punctuation">;</span>
     server_name  leader755<span class="token punctuation">.</span>com<span class="token punctuation">;</span> #多个域名用空格隔开

            # ssl证书地址
      ssl_certificate     <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>pem<span class="token punctuation">;</span>  # pem文件的路径
      ssl_certificate_key  <span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>cert<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token operator">/</span>leader755<span class="token punctuation">.</span>com<span class="token punctuation">.</span>key<span class="token punctuation">;</span> # key文件的路径

      location <span class="token operator">/</span> <span class="token punctuation">{</span>
        root    <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>workspace<span class="token operator">/</span>leader755<span class="token punctuation">.</span>gitee<span class="token punctuation">.</span>io<span class="token regex">/public/</span> <span class="token punctuation">;</span> #需要修改的路径地址
        try_files $uri $uri<span class="token operator">/</span> index<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
        error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  <span class="token operator">/</span>50x<span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        location <span class="token operator">=</span> <span class="token operator">/</span>50x<span class="token punctuation">.</span>html <span class="token punctuation">{</span>
            root   <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=2nru1tygnq0w8" target="_blank" rel="noopener">https://cloud.tencent.com/developer/support-plan?invite_code=2nru1tygnq0w8</a></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>travis-ci + github + hexo 持续集成</title>
    <url>/leader755/34284.html</url>
    <content><![CDATA[<h2 id="Hexo-博客源代码-GitHub-托管"><a href="#Hexo-博客源代码-GitHub-托管" class="headerlink" title="Hexo 博客源代码 GitHub 托管"></a>Hexo 博客源代码 GitHub 托管</h2><h2 id="1-注册-travis-ci"><a href="#1-注册-travis-ci" class="headerlink" title="1.注册 travis-ci"></a>1.注册 travis-ci</h2><p>Travis CI 的网站有两个，<br><code>travis-ci.org</code>  专门针对开源项目，GitHub 上所有的公开仓库都能够免费使用；<br><code>travis-ci.com</code>  针对私有及商业项目，新用户前 100 次构建是免费的，后面就要收费了。</p>
<h2 id="2-登录-Travis-CI-网站"><a href="#2-登录-Travis-CI-网站" class="headerlink" title="2.登录 Travis CI 网站"></a>2.登录 Travis CI 网站</h2><ol>
<li>前往 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis-ci.com</a> and Sign up with GitHub.</li>
<li>接受授权</li>
<li>选择你想要使用 Travis CI 的仓库 或者 你也可以在 Github-settings-Applications-TravisCI-Configure 中去更新配置；</li>
<li>在你仓库怎增加 <code>.travis.yml</code> 文件，这个文件定义了构建的步骤，例如<a href="https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-installation-phase" target="_blank" rel="noopener">安装依赖</a>等等。</li>
<li>将 <code>.travis.yml</code> 文件推送到你的远端仓库，然后就会触发 Travis CI 构建；</li>
<li>登录 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>然后选择你的仓库查看构建任务的执行详情；</li>
</ol>
<h2 id="3-配置-Travis-CI"><a href="#3-配置-Travis-CI" class="headerlink" title="3.配置 Travis CI"></a>3.配置 Travis CI</h2><h4 id="1-gt-网页端配置"><a href="#1-gt-网页端配置" class="headerlink" title="1&gt;网页端配置"></a>1&gt;网页端配置</h4><p>首先进入 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI 官网</a>，这里我们使用的是免费版的，因为考虑到一般放在 GitHub 上的博客都是公开的，所以不需要付费版本。如果有私有仓库要使用这种方式，可以使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">付费版的 Travis CI</a>。然后直接通过 GitHub 账户登陆即可，登陆后可以看到我们的共有仓库，找到博客的仓库，我这里是选择 blog-master 源码仓库（博客仓库：leader755.github.io），把旁边的勾勾上，然后点击旁边的 <code>Settings</code> 进入设置页面。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728277292-624821ea-7b95-4db8-89fe-22ece79e75db.png#height=457&id=ElrGC&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1686&originalType=binary&size=85154&status=done&style=none&width=843" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728301454-068409c1-f596-4e35-aa3a-d9d2d3c5b39c.png#height=527&id=fSY46&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1054&originWidth=1752&originalType=binary&size=108378&status=done&style=none&width=876" alt="image.png"></p>
<p>在设置页面中，General 中只勾选 <code>Build pushed branches</code>，表示当有新的代码 push 到 GitHub 仓库时，自动执行构建任务。其他设置保持默认即可。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728534111-16bc9014-0036-44ef-8036-8117eb15dffd.png#height=532&id=bLKBm&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1064&originWidth=1910&originalType=binary&size=135305&status=done&style=none&width=955" alt="image.png"></p>
<p>接下来为 Travis 添加对 GitHub 仓库的读写权限。进入 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a> 页面，点击 <code>Generate new token</code>，选择 token 权限(这里直选 repo 即可)，设置别名并生成。然后将生成的 token 值复制。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728617792-342093c6-0176-4ece-90e0-f1395c93d7cf.png#height=645&id=PoYaj&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1290&originWidth=2304&originalType=binary&size=230289&status=done&style=none&width=1152" alt="image.png"><br>接着在原来 Travis 的设置界面添加 token。如图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728826735-1b3d72da-2248-4837-9c46-4b6ce410bfdf.png#height=324&id=OEGtc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=2006&originalType=binary&size=113373&status=done&style=none&width=1003" alt="image.png"><br>在 Name 中填入 token 的别名，Value 中填入刚刚得到的 token，然后点击 Add 进行添加即可。注意 token 一旦生成，只能在生成时得到其值，后面无法查看。所以如果还有需要，可以记下来或者重新生成新的 token。</p>
<h4 id="2-gt-Travis-配置文件"><a href="#2-gt-Travis-配置文件" class="headerlink" title="2&gt;Travis 配置文件"></a>2&gt;Travis 配置文件</h4><p>接下来还需要编写 Travis 的配置文件，用于指定构建时使用哪些命令。配置文件名为 <code>.travis.yml</code>，是自动化构建的配置文件。文件内容示例如下：</p>
<pre class=" language-javascript"><code class="language-javascript"># 指定构建环境是Node<span class="token punctuation">.</span>js，当前版本是稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span><span class="token punctuation">,</span>版本这里我们选择最新的长期支持版本（ LTS） 应该就够用了
anguage<span class="token punctuation">:</span> node_js
node_js<span class="token punctuation">:</span>
  <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span>  # 稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span> <span class="token punctuation">,</span>最新长期支持版（ <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span> ）

# 指定缓存模块，可加快编译速度
cache<span class="token punctuation">:</span>
  directories<span class="token punctuation">:</span>
    <span class="token operator">-</span> node_modules

# 在构建之前
before_install<span class="token punctuation">:</span>
  <span class="token operator">-</span> <span class="token keyword">export</span> TZ<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> # 更改时区
  <span class="token operator">-</span> npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli # 安装hexo环境

#<span class="token function">部署环境的安装</span><span class="token punctuation">(</span>安装一个部署插件<span class="token punctuation">)</span>
install<span class="token punctuation">:</span>
  <span class="token operator">-</span> npm install
  <span class="token operator">-</span> npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save

before_script<span class="token punctuation">:</span>
 #

# 执行清缓存，生成网页操作
script<span class="token punctuation">:</span>
  <span class="token operator">-</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo g

after_script<span class="token punctuation">:</span>  # 未能成功
  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>
  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span>
   # 替换同目录下的_config<span class="token punctuation">.</span>yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！
  <span class="token operator">-</span> sed <span class="token operator">-</span>i <span class="token string">"s/gh_token/${GH_TOKEN}/g"</span> <span class="token punctuation">.</span><span class="token operator">/</span>_config<span class="token punctuation">.</span>yml
  <span class="token operator">-</span> hexo deploy

    # 版本 二（未能成功）
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span>deploy_git
  # <span class="token operator">-</span> git checkout master
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>
  # <span class="token operator">-</span> sed <span class="token operator">-</span>i<span class="token string">''</span> <span class="token string">"s~${GH_REF}~${GH_TOKEN}:x-oauth-basic@${GH_REF}~"</span> _config<span class="token punctuation">.</span>yml
  # <span class="token operator">-</span> hexo d <span class="token operator">></span> log<span class="token punctuation">.</span>txt <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span>
  # <span class="token operator">-</span> cat log<span class="token punctuation">.</span>txt <span class="token operator">|</span> sed <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>
  # <span class="token operator">-</span> echo <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span> # 构建后输出时间标识

    # 版本三（能正常构建提交到博客 leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">,</span>但是并不是使用 hexo d  命令触发的）
    # after_script<span class="token punctuation">:</span>
  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>
  # <span class="token operator">-</span> git init
  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"your-git-name"</span>
  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"your-email-address"</span>
  # <span class="token operator">-</span> git add <span class="token punctuation">.</span>
  # <span class="token operator">-</span> git commit <span class="token operator">-</span>m <span class="token string">"Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>
  # <span class="token operator">-</span> git push <span class="token operator">--</span>force <span class="token operator">--</span>quiet <span class="token string">"https://${GH_TOKEN}@${GH_REF}"</span> master<span class="token punctuation">:</span>master


# 指定博客源码分支，Travis CI 监控哪一个分支的变动，这里是 master 分支（若博客备份文件和 GitHub Pages 共用一个仓库的话需设置为博客备份文件所在分支）。
branches<span class="token punctuation">:</span>
  only<span class="token punctuation">:</span>
    <span class="token operator">-</span> master

# End<span class="token punctuation">:</span> Build LifeCycle

# configure notifications <span class="token punctuation">(</span>email<span class="token punctuation">,</span> IRC<span class="token punctuation">,</span> campfire etc<span class="token punctuation">)</span>
# please update <span class="token keyword">this</span> section to your needs<span class="token operator">!</span>
# https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>travis<span class="token operator">-</span>ci<span class="token punctuation">.</span>com<span class="token operator">/</span>user<span class="token regex">/notifications/</span>
notifications<span class="token punctuation">:</span>
  email<span class="token punctuation">:</span>
    <span class="token operator">-</span> <span class="token number">1181012791</span>@qq<span class="token punctuation">.</span>com
  on_success<span class="token punctuation">:</span> change
  on_failure<span class="token punctuation">:</span> always

</code></pre>
<p>到这里我就出问题了，虽然能成功触发构建，但是并不能使用 hexo d 发布到 leader755.github.io 这个博客仓库。目前还没找出问题在哪里，出现问题地方应该在生命周期 after_script: ,如果有知道还请留言回复，感激不尽。虽然没有成功使用吧。但是也算对 travis-ci 有初步的认识吧。继续折腾吧。</p>
<h2 id="4-认识-Job-Lifecycle–Job-的生命周期"><a href="#4-认识-Job-Lifecycle–Job-的生命周期" class="headerlink" title="4.认识 Job Lifecycle–Job 的生命周期"></a>4.认识 Job Lifecycle–Job 的生命周期</h2><p>Travis CI 为每种编程语言提供默认构建环境和默认的阶段集。 创建虚拟机为你的 Job 提供构建环境，将存储库克隆到其中，安装可选的插件，然后运行构建阶段。<br>job 的声明周期，主要包含两大部分：<br>install：安装依赖，官网有专门讲解的 <a href="https://docs.travis-ci.com/user/installing-dependencies/" target="_blank" rel="noopener">Installing Dependencies</a><br>script：运行构建脚本；<br>在 installation 阶段之前（beofore_install）、在 script phase 之前（before_script）或之后（after_script），你可以运行自定义命令；<br>当构建成功或失败置换后，可以使用 after_success（例如构建文档）或 after_failure（例如上载日志文件）阶段执行其他操作（actions）。 在 after_failure 和 after_success 中，您可以使用$TRAVIS_TEST_RESULT 环境变量获取构建结果。</p>
<p>完整的 job 生命周期(包括三个可选的部署阶段，以及在检出 git 存储库 和更改到存储库目录) 如下：</p>
<ul>
<li><a href="https://docs.travis-ci.com/user/installing-dependencies/#installing-packages-with-the-apt-addon" target="_blank" rel="noopener"><strong>apt addons</strong></a>** 可选安装**</li>
<li><a href="https://docs.travis-ci.com/user/caching" target="_blank" rel="noopener"><strong>cache components</strong></a>** 可选安装**</li>
<li><strong>before_install</strong></li>
<li><strong>install</strong></li>
<li><strong>before_script</strong></li>
<li><strong>script</strong></li>
<li><strong>before_cache (for cleaning up cache) 可选</strong></li>
<li><strong>after_success or after_failure</strong></li>
<li><strong>before_deploy 可选</strong></li>
<li><strong>deploy 可选</strong></li>
<li><strong>after_deploy 可选</strong></li>
<li><strong>after_script</strong></li>
</ul>
<p>一次构建任务可有许多 job 组成。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>travis-ci</tag>
      </tags>
  </entry>
  <entry>
    <title>vue修饰符</title>
    <url>/leader755/17199.html</url>
    <content><![CDATA[<h2 id="目录导航"><a href="#目录导航" class="headerlink" title="目录导航"></a>目录导航</h2><ul>
<li>表单修饰符</li>
<li>事件修饰符</li>
<li>鼠标按键修饰符</li>
<li>键值修饰符</li>
<li>v-bind 修饰符（实在不知道叫啥名字）</li>
</ul>
<h2 id="1-表单修饰符"><a href="#1-表单修饰符" class="headerlink" title="1.表单修饰符"></a>1.表单修饰符</h2><p>填写表单，最常用的是什么？input！v-model~而我们的修饰符正是为了简化这些东西而存在的</p>
<h3 id="1-gt-lazy"><a href="#1-gt-lazy" class="headerlink" title="1&gt;.lazy"></a>1&gt;.lazy</h3><p>从这里我们可以看到，我们还在输入的时候，光标还在的时候，下面的值就已经出来了，可以说是非常地实时。但是有时候我们希望，在我们输入完所有东西，光标离开才更新视图。这样即可~这样只有当我们光标离开输入框的时候，它才会更新视图，<strong>相当于在 onchange 事件</strong>触发更新。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>div<span class="token operator">></span>
   <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="2-gt-trim"><a href="#2-gt-trim" class="headerlink" title="2&gt;.trim"></a>2&gt;.trim</h3><p>在我们的输入框中，我们经常需要过滤一下一些输入完密码不小心多敲了一下空格的兄弟输入的内容。需要注意的是，它只能<strong>过滤首尾的空格</strong>！首尾，中间的是不会过滤的</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span></code></pre>
<h3 id="3-gt-number"><a href="#3-gt-number" class="headerlink" title="3&gt;.number"></a>3&gt;.number</h3><p>如果你先输入数字，那它就会限制你输入的只能是数字。<br>如果你先输入字符串，那它就相当于没有加.number</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"value"</span><span class="token operator">></span></code></pre>
<h2 id="2-事件修饰符"><a href="#2-事件修饰符" class="headerlink" title="2.事件修饰符"></a>2.事件修饰符</h2><h3 id="1-gt-stop"><a href="#1-gt-stop" class="headerlink" title="1&gt;.stop"></a>1&gt;.stop</h3><p>由于事件冒泡的机制，我们给元素绑定点击事件的时候，也会触发父级的点击事件。一键阻止事件冒泡，简直方便得不行。相当于调用了 event.stopPropagation()方法。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"shout(2)"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">/</span><span class="token operator">/</span>只输出<span class="token number">1</span></code></pre>
<h3 id="2-gt-prevent"><a href="#2-gt-prevent" class="headerlink" title="2&gt;.prevent"></a>2&gt;.prevent</h3><p>用于阻止事件的默认行为，例如，当点击提交按钮时阻止对表单的提交。相当于调用了 event.preventDefault()方法。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 提交事件不再重载页面 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>form v<span class="token operator">-</span>on<span class="token symbol">:submit</span><span class="token punctuation">.</span>prevent<span class="token operator">=</span><span class="token string">"onSubmit"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span></code></pre>
<blockquote>
<p><strong>注意：</strong>修饰符可以同时使用多个,但是可能会因为顺序而有所不同。<br>用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。<br>也就是<strong>从左往右判断~</strong></p>
</blockquote>
<h3 id="3-gt-self"><a href="#3-gt-self" class="headerlink" title="3&gt;.self"></a>3&gt;.self</h3><p>只当事件是从事件绑定的元素本身触发时才触发回调。像下面所示，刚刚我们从.stop 时候知道子元素会冒泡到父元素导致触发父元素的点击事件，当我们加了这个.self 以后，我们点击 button 不会触发父元素的点击事件 shout，只有当点击到父元素的时候（蓝色背景）才会 shout~从这个 self 的英文翻译过来就是‘自己，本身’可以看出这个修饰符的用法</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"blue"</span> <span class="token variable">@click</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token operator">=</span><span class="token string">"shout(2)"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="4-gt-once"><a href="#4-gt-once" class="headerlink" title="4&gt;.once"></a>4&gt;.once</h3><p>这个修饰符的用法也是和名字一样简单粗暴，只能用一次，绑定了事件以后只能触发一次，第二次就不会触发。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>键盘按坏都只能shout一次
<span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token punctuation">.</span>once<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre>
<h3 id="5-gt-capture"><a href="#5-gt-capture" class="headerlink" title="5&gt;.capture"></a>5&gt;.capture</h3><p>从上面我们知道了事件的冒泡，其实完整的事件机制是：捕获阶段–目标阶段–冒泡阶段。<br>默认的呢，是事件触发是从目标开始往上冒泡。<br>当我们加了这个.capture 以后呢，我们就反过来了，事件触发从包含这个元素的顶层开始往下触发。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>
      obj1
      <span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token punctuation">.</span>capture<span class="token operator">=</span><span class="token string">"shout(2)"</span><span class="token operator">></span>
        obj2
        <span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"shout(3)"</span><span class="token operator">></span>
          obj3
          <span class="token operator">&lt;</span>div <span class="token variable">@click</span><span class="token operator">=</span><span class="token string">"shout(4)"</span><span class="token operator">></span>
            obj4
          <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">/</span><span class="token operator">/</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">3</span></code></pre>
<p>从上面这个例子我们点击 obj4 的时候，就可以清楚地看出区别，obj1，obj2 在捕获阶段就触发了事件，因此是先 1 后 2，后面的 obj3，obj4 是默认的冒泡阶段触发，因此是先 4 然后冒泡到 3~</p>
<h3 id="6-gt-passive"><a href="#6-gt-passive" class="headerlink" title="6&gt;.passive"></a>6&gt;.passive</h3><p>当我们在监听元素滚动事件的时候，会一直触发 onscroll 事件，在 pc 端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给 onscroll 事件整了一个.lazy 修饰符</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 滚动事件的默认行为 <span class="token punctuation">(</span>即滚动行为<span class="token punctuation">)</span> 将会立即触发 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 而不会等待 `onScroll` 完成  <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这其中包含 `event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>` 的情况 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div v<span class="token operator">-</span>on<span class="token symbol">:scroll</span><span class="token punctuation">.</span>passive<span class="token operator">=</span><span class="token string">"onScroll"</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h3 id="7-gt-native"><a href="#7-gt-native" class="headerlink" title="7&gt;.native"></a>7&gt;.native</h3><p>我们经常会写很多的小组件，有些小组件可能会绑定一些事件，但是，像下面这样绑定事件是不会触发的</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token constant">My</span><span class="token operator">-</span>component <span class="token variable">@click</span><span class="token punctuation">.</span>native<span class="token operator">=</span><span class="token string">"shout(3)"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">My</span><span class="token operator">-</span>component<span class="token operator">></span></code></pre>
<p>必须使用.native 来修饰这个 click 事件（即&lt;My-component @click.native=”shout(3)”&gt;</My-component>），可以理解为该修饰符的作用就是把一个 vue 组件转化为一个普通的 HTML 标签，<br>注意：<strong>使用.native 修饰符来操作普通 HTML 标签是会令事件失效的</strong></p>
<h2 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h2><p>刚刚我们讲到这个 click 事件，我们一般是会用左键触发，有时候我们需要更改右键菜单啥的，就需要用到右键点击或者中间键点击，这个时候就要用到鼠标按钮修饰符</p>
<ul>
<li>.left 左键点击</li>
<li>.right 右键点击</li>
<li>.middle 中键点击</li>
</ul>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token punctuation">.</span>right<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre>
<h2 id="键值修饰符"><a href="#键值修饰符" class="headerlink" title="键值修饰符"></a>键值修饰符</h2><p>其实这个也算是事件修饰符的一种，因为它都是用来修饰键盘事件的。<br>比如 onkeyup，onkeydown 啊</p>
<h3 id="1-gt-keyCode"><a href="#1-gt-keyCode" class="headerlink" title="1&gt;.keyCode"></a>1&gt;.keyCode</h3><p>如果不用 keyCode 修饰符，那我们每次按下键盘都会触发 shout，当我们想指定按下某一个键才触发这个 shout 的时候，这个修饰符就有用了，具体键码查看<a href="https://zhidao.baidu.com/question/266291349.html" target="_blank" rel="noopener">键码对应表</a></p>
<pre><code>&lt;input type=&quot;text&quot; @keyup.keyCode=&quot;shout(4)&quot;&gt;</code></pre><p>为了方便我们使用，vue 给一些常用的键提供了别名</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>普通键
<span class="token punctuation">.</span>enter
<span class="token punctuation">.</span>tab
<span class="token punctuation">.</span>delete <span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">(</span>捕获“删除”和“退格”键<span class="token punctuation">)</span>
<span class="token punctuation">.</span>space
<span class="token punctuation">.</span>esc
<span class="token punctuation">.</span>up
<span class="token punctuation">.</span>down
<span class="token punctuation">.</span>left
<span class="token punctuation">.</span>right</code></pre>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>系统修饰键
<span class="token punctuation">.</span>ctrl
<span class="token punctuation">.</span>alt
<span class="token punctuation">.</span>meta
<span class="token punctuation">.</span>shift</code></pre>
<p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span> 可以使用 `v<span class="token operator">-</span>on<span class="token symbol">:keyup</span><span class="token punctuation">.</span>f1`
<span class="token constant">Vue</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes<span class="token punctuation">.</span>f1 <span class="token operator">=</span> <span class="token number">112</span></code></pre>
<p>我们从上面看到，键分成了普通常用的键和系统修饰键，区别是什么呢？<br>当我们写如下代码的时候,我们会发现如果<strong>仅仅</strong>使用系统修饰键是无法触发 keyup 事件的。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token variable">@keyup</span><span class="token punctuation">.</span>ctrl<span class="token operator">=</span><span class="token string">"shout(4)"</span><span class="token operator">></span></code></pre>
<p>那该如何呢？我们需要将系统修饰键和其他键码链接起来使用，比如</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token variable">@keyup</span><span class="token punctuation">.</span>ctrl<span class="token number">.67</span><span class="token operator">=</span><span class="token string">"shout(4)"</span><span class="token operator">></span></code></pre>
<p>这样当我们同时按下 ctrl+c 时，就会触发 keyup 事件。</p>
<p>另，如果是鼠标事件，那就可以单独使用系统修饰符。</p>
<pre class=" language-ruby"><code class="language-ruby">            <span class="token operator">&lt;</span>button <span class="token variable">@mouseover</span><span class="token punctuation">.</span>ctrl<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>button <span class="token variable">@mousedown</span><span class="token punctuation">.</span>ctrl<span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
      <span class="token operator">&lt;</span>button <span class="token variable">@click</span><span class="token punctuation">.</span>ctrl<span class="token number">.67</span><span class="token operator">=</span><span class="token string">"shout(1)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre>
<p>大概是什么意思呢，就是你不能<strong>单手指使用系统修饰键的修饰符</strong>（最少两个手指，可以多个）。你可以一个手指按住系统修饰键一个手指按住另外一个键来实现键盘事件。也可以用一个手指按住系统修饰键，另一只手按住鼠标来实现鼠标事件。</p>
<h3 id="2-gt-exact-2-5-新增"><a href="#2-gt-exact-2-5-新增" class="headerlink" title="2&gt;.exact (2.5 新增)"></a>2&gt;.exact (2.5 新增)</h3><p>我们上面说了这个系统修饰键，当我们像这样&lt;button type=”text” @click.ctrl=”shout(4)”&gt;</button>绑定了 click 键按下的事件，惊奇的是，我们同时按下几个系统修饰键，比如 ctrl shift 点击，也能触发，可能有些场景我们<strong>只需要或者只能</strong>按一个系统修饰键来触发（像制作一些快捷键的时候），而当我们按下 ctrl 和其他键的时候则无法触发。那就这样写。<br>注意：这个<strong>只是限制系统修饰键</strong>的，像下面这样书写以后你还是可以按下 ctrl + c，ctrl+v 或者 ctrl+普通键 来触发，但是不能按下 ctrl + shift +普通键来触发。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token variable">@click</span><span class="token punctuation">.</span>ctrl<span class="token punctuation">.</span>exact<span class="token operator">=</span><span class="token string">"shout(4)"</span><span class="token operator">></span>ok<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span></code></pre>
<p>然后下面这个你可以同时按下 enter+普通键来触发，但是不能按下系统修饰键+enter 来触发。相信你已经能听懂了 8~</p>
<pre><code>&lt;input type=&quot;text&quot; @keydown.enter.exact=&quot;shout(&#39;我被触发了&#39;)&quot;&gt;</code></pre><h2 id="v-bind-修饰符"><a href="#v-bind-修饰符" class="headerlink" title="v-bind 修饰符"></a>v-bind 修饰符</h2><h3 id="1-gt-sync-2-3-0-新增"><a href="#1-gt-sync-2-3-0-新增" class="headerlink" title="1&gt;.sync(2.3.0+ 新增)"></a>1&gt;.sync(2.3.0+ 新增)</h3><p>在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。我们通常的做法是</p>
<pre><code>//父亲组件
&lt;comp :myMessage=&quot;bar&quot; @update:myMessage=&quot;func&quot;&gt;&lt;/comp&gt;
//js
func(e){
 this.bar = e;
}</code></pre><pre><code>//子组件js
func2(){
  this.$emit(&#39;update:myMessage&#39;,params);
}</code></pre><p>现在这个.sync 修饰符就是简化了上面的步骤</p>
<pre><code>//父组件
&lt;comp :myMessage.sync=&quot;bar&quot;&gt;&lt;/comp&gt;
//子组件
this.$emit(&#39;update:myMessage&#39;,params);</code></pre><p>这样确实会方便很多，但是也有很多需要<strong>注意</strong>的点</p>
<ol>
<li>使用 sync 的时候，子组件传递的事件名必须为 update:value，其中 value 必须与子组件中 props 中声明的名称完全一致(如上例中的 myMessage，不能使用 my-message)</li>
<li>注意带有 .sync 修饰符的 v-bind 不能和表达式一起使用 (例如 v-bind:title.sync=”doc.title + ‘!’” 是无效的)。取而代之的是，你只能提供你想要绑定的属性名，类似 v-model。</li>
<li>将 v-bind.sync 用在一个字面量的对象上，例如 v-bind.sync=”{ title: doc.title }”，是无法正常工作的，因为在解析一个像这样的复杂表达式的时候，有很多边缘情况需要考虑。</li>
</ol>
<h3 id="2-gt-prop"><a href="#2-gt-prop" class="headerlink" title="2&gt;.prop"></a>2&gt;.prop</h3><p>要学习这个修饰符，我们首先要搞懂两个东西的区别。</p>
<pre><code>Property：节点对象在内存中存储的属性，可以访问和设置。
Attribute：节点对象的其中一个属性( property )，值是一个对象。
可以通过点访问法 document.getElementById(&#39;xx&#39;).attributes 或者 document.getElementById(&#39;xx&#39;).getAttributes(&#39;xx&#39;) 读取，通过 document.getElementById(&#39;xx&#39;).setAttribute(&#39;xx&#39;,value) 新增和修改。
在标签里定义的所有属性包括 HTML 属性和自定义属性都会在 attributes 对象里以键值对的方式存在。</code></pre><p>其实 attribute 和 property 两个单词，翻译出来都是属性，但是《javascript 高级程序设计》将它们翻译为特性和属性，以示区分</p>
<pre><code>//这里的id,value,style都属于property
//index属于attribute
//id、title等既是属性，也是特性。修改属性，其对应的特性会发生改变；修改特性，属性也会改变
&lt;input id=&quot;uid&quot; title=&quot;title1&quot; value=&quot;1&quot; :index=&quot;index&quot;&gt;
//input.index === undefined
//input.attributes.index === this.index</code></pre><p>从上面我们可以看到如果直接使用 v-bind 绑定，则默认会绑定到 dom 节点的 attribute。<br>为了</p>
<ul>
<li>通过自定义属性存储变量，避免暴露数据</li>
<li>防止污染 HTML 结构</li>
</ul>
<p>我们可以使用这个修饰符，如下</p>
<pre><code>&lt;input id=&quot;uid&quot; title=&quot;title1&quot; value=&quot;1&quot; :index.prop=&quot;index&quot;&gt;
//input.index === this.index
//input.attributes.index === undefined</code></pre><ul>
<li><strong>.camel</strong></li>
</ul>
<p>由于 HTML 特性是不区分大小写的。</p>
<pre><code>&lt;svg :viewBox=&quot;viewBox&quot;&gt;&lt;/svg&gt;</code></pre><p>实际上会渲染为</p>
<pre><code>&lt;svg viewbox=&quot;viewBox&quot;&gt;&lt;/svg&gt;</code></pre><p>这将导致渲染失败，因为 SVG 标签只认 viewBox，却不知道 viewbox 是什么。<br>如果我们使用.camel 修饰符，那它就会被渲染为驼峰名。<br>另，如果你使用字符串模版，则没有这些限制。</p>
<pre><code>new Vue({
  template: &#39;&lt;svg :viewBox=&quot;viewBox&quot;&gt;&lt;/svg&gt;&#39;
})</code></pre><h3 id="vue-使用-element-ui-的-el-input-监听不了键盘事件解决"><a href="#vue-使用-element-ui-的-el-input-监听不了键盘事件解决" class="headerlink" title="vue 使用 element-ui 的 el-input 监听不了键盘事件解决"></a>vue 使用 element-ui 的 el-input 监听不了键盘事件解决</h3><p>vue 使用 element-ui 的 el-input 监听不了键盘事件，原因应该是 element-ui 自身封装了一层 div 在 input 标签外面，把原来的事件隐藏了，情况如下：直接使用标签:</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>input</span><span class="token punctuation">></span></span>
element-ui:
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>账号<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>
如果你使用了form表单 使用 @keyup.enter.native="doLogin" ,
两个el-input 键盘事件有效, 如:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">autoComplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>邮箱<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleLogin<span class="token punctuation">"</span></span>  <span class="token attr-name">autoComplete</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>密码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>
　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>  <span class="token attr-name">@click.native.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleLogin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-button</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span>
如果只有一个el-input , 则无效, 需加上@submit.native.prevent才有效,阻值冒泡,默认事件,  如:
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span>  <span class="token attr-name">@submit.native.prevent</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form-item</span><span class="token punctuation">></span></span>
　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>  <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入内容<span class="token punctuation">"</span></span> <span class="token attr-name">@keyup.enter.native</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submitImage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>
　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form-item</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span></code></pre>
<h2 id="文章转载："><a href="#文章转载：" class="headerlink" title="文章转载："></a>文章转载：</h2><p><a href="https://segmentfault.com/a/1190000016786254" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016786254</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue 修饰符</tag>
      </tags>
  </entry>
  <entry>
    <title>vue自定义指令</title>
    <url>/leader755/18298.html</url>
    <content><![CDATA[<h2 id="1-注册自定义指令（全局和局部）"><a href="#1-注册自定义指令（全局和局部）" class="headerlink" title="1.注册自定义指令（全局和局部）"></a>1.注册自定义指令（全局和局部）</h2><h3 id="1-gt-全局注册"><a href="#1-gt-全局注册" class="headerlink" title="1&gt;  全局注册"></a>1&gt;  全局注册</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是全局自定义指令<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"focus"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>###</p>
<h3 id="2-gt-局部注册"><a href="#2-gt-局部注册" class="headerlink" title="2&gt;  局部注册"></a>2&gt;  局部注册</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>我是局部自定义指令<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//内部使用</span>
    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h2 id="2-自定义指令传参（单个和多个）"><a href="#2-自定义指令传参（单个和多个）" class="headerlink" title="2.自定义指令传参（单个和多个）"></a>2.自定义指令传参（单个和多个）</h2><h3 id="1-gt-单个参数"><a href="#1-gt-单个参数" class="headerlink" title="1&gt;单个参数"></a>1&gt;单个参数</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-focus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"focus"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2-gt-多个参数"><a href="#2-gt-多个参数" class="headerlink" title="2&gt;多个参数"></a>2&gt;多个参数</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-demo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ color: <span class="token punctuation">'</span>white<span class="token punctuation">'</span>, text: <span class="token punctuation">'</span>hello!<span class="token punctuation">'</span> }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "white"</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hello!"</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h2 id="3-钩子函数以及参数"><a href="#3-钩子函数以及参数" class="headerlink" title="3.钩子函数以及参数"></a>3.钩子函数以及参数</h2><h3 id="1-gt-钩子函数"><a href="#1-gt-钩子函数" class="headerlink" title="1&gt;钩子函数"></a>1&gt;钩子函数</h3><blockquote>
<p><code>inserted</code>，这个就是自定义指令的钩子函数，自定义指令有五个钩子函数：</p>
<ol>
<li><code>bind</code>：只调用一次，在指令第一次绑定到元素时调用，可以在这个钩子函数中进行初始化设置;</li>
<li><code>inserted</code>：被绑定元素插入父节点时调用,在<code>bind</code>后面调用；</li>
<li><code>update</code>：所在绑定的组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。 调用时指令的值不一定发生改变，通过比较更新前后的值来忽略不必要的模板更新；</li>
<li><code>componentUpdated</code>：指令所在组件的 VNode 及其子 VNode 全部更新后调用;</li>
<li><code>unbind</code>：只调用一次，指令与元素解绑时调用。</li>
</ol>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">"</span></span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>测试解绑v-color<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">=</span><span class="token punctuation">'</span>更换title<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更换title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>color<span class="token punctuation">=</span><span class="token punctuation">'</span>blue<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>更换color<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        color<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>
        title<span class="token punctuation">:</span> <span class="token string">"自定义指令"</span><span class="token punctuation">,</span>
        show<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
      directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      color<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"bind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"inserted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        componentUpdated<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"componentUpdated"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
         unbind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"unbind"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>//F5 刷新<br>bind</p>
</blockquote>
<blockquote>
<p>inserted</p>
</blockquote>
<blockquote>
<p>//按钮（更换 title）</p>
</blockquote>
<blockquote>
<p>update</p>
</blockquote>
<blockquote>
<p>componentUpdated</p>
</blockquote>
<blockquote>
<p>//按钮（更换 color）</p>
</blockquote>
<blockquote>
<p>update</p>
</blockquote>
<blockquote>
<p>componentUpdated</p>
</blockquote>
<blockquote>
<p>//按钮（解绑即隐藏）</p>
</blockquote>
<blockquote>
<p>unbind</p>
</blockquote>
<h3 id="2-gt-钩子函数参数"><a href="#2-gt-钩子函数参数" class="headerlink" title="2&gt;钩子函数参数"></a>2&gt;钩子函数参数</h3><blockquote>
<p>其中<code>el</code> <code>binding</code>就是钩子函数的参数，有 4 个参数：</p>
<ul>
<li><code>el</code>：指令所绑定的元素，可以用来直接操作 DOM；</li>
<li><code>binding</code>：一个对象其中包括以下几个属性；<ul>
<li><code>name</code>：指令名，不包括 v- 前缀;</li>
<li><code>value</code>：指令的绑定值，例：<code>v-my-directive=&quot;1 + 1&quot;</code>中，绑定值为 2；</li>
<li><code>expression</code>：指令的绑定的表达式。例：<code>v-my-directive=&quot;1 + 1&quot;</code>中，表达式为 “1 + 1”；</li>
<li><code>arg</code>：传给指令的参数，例<code>v-my-directive:foo</code>中，参数为 “foo”;</li>
<li><code>modifiers</code>：一个包含修饰符的对象。例:<code>v-my-directive.foo.bar</code>中，修饰符对象为 { foo: true, bar: true },</li>
<li><code>oldValue</code>：指令绑定的前一个值，仅在<code>update</code>和<code>componentUpdated</code>钩子中可用。无论值是否改变都可用。</li>
</ul>
</li>
<li><code>vnode</code>：Vue 编译生成的虚拟节点；</li>
<li><code>oldVnode</code>：上一个虚拟节点，仅在<code>update</code>和<code>componentUpdated</code>钩子中可用。</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<blockquote>
<p><strong>除了</strong><code>**el**</code><strong>之外，其它参数都是只读的，不能对其修改。如果需要在钩子之间共享数据，要通过元素的</strong><code>**dataset**</code><strong>来进行。</strong></p>
</blockquote>
<h2 id="4-实际运用"><a href="#4-实际运用" class="headerlink" title="4.实际运用"></a>4.实际运用</h2><h3 id="1-gt-图片的加载"><a href="#1-gt-图片的加载" class="headerlink" title="1&gt;图片的加载"></a>1&gt;图片的加载</h3><blockquote>
<p>需求：图片加载中，需要使用占位图去显示，优化加载图片等待体验。</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in imageList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/image/bg.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>默认图<span class="token punctuation">"</span></span> <span class="token attr-name">v-image</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.url<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">//为了真实体现效果，用了延时操作</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    el<span class="token punctuation">:</span> <span class="token string">"#app2"</span><span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      imageList<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          url<span class="token punctuation">:</span> <span class="token string">"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/greate-china/cn/mkt/homepage/section4/home-s4-p10-plus.jpg"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          url<span class="token punctuation">:</span> <span class="token string">"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/greate-china/cn/mkt/homepage/section4/home-s4-watch2-pro-banner.jpg"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          url<span class="token punctuation">:</span> <span class="token string">"http://consumer-img.huawei.com/content/dam/huawei-cbg-site/en/mkt/homepage/section4/home-s4-matebook-x.jpg"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>###</p>
<h3 id="2-gt-input-的聚焦"><a href="#2-gt-input-的聚焦" class="headerlink" title="2&gt;input 的聚焦"></a>2&gt;input 的聚焦</h3><blockquote>
<p>需求：点击输入框旁边的按钮，input 变为可编辑状态，并且获取焦点。失焦时，input 变为不可编辑状态。</p>
</blockquote>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table</span>
      <span class="token attr-name">:data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tableData<span class="token punctuation">"</span></span>
      <span class="token attr-name">v-loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>listLoading<span class="token punctuation">"</span></span>
      <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TableRow<span class="token punctuation">"</span></span>
      <span class="token attr-name">:tree-props</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{children: <span class="token punctuation">'</span>children<span class="token punctuation">'</span>, hasChildren: <span class="token punctuation">'</span>hasChildren<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">
      <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span></span><span class="token punctuation">"</span></span>
      <span class="token attr-name">@select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleSelectionChange<span class="token punctuation">"</span></span>
      <span class="token attr-name">:row-key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getRowKeys<span class="token punctuation">"</span></span>
      <span class="token attr-name">@row-click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>RowClick<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span>
        <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>
        <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span>
        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selection<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>175<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upc<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>商品条码<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vipPrice1<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>会员价1(元)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>priceChangeWay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
              <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.vipPrice1<span class="token punctuation">"</span></span>
              <span class="token attr-name">v-focus</span>
              <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cope.row.isdisabled1<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span>
              <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled1<span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
              <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>
                <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span>
                <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled1<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span>
                <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled1<span class="token punctuation">"</span></span>
                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-input__icon el-icon-edit<span class="token punctuation">"</span></span>
              <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span>
            <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-table-column</span> <span class="token attr-name">prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vipPrice2<span class="token punctuation">"</span></span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>会员价2(元)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">slot-scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>priceChangeWay<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span>
              <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.vipPrice2<span class="token punctuation">"</span></span>
              <span class="token attr-name">v-focus</span>
              <span class="token attr-name">@blur</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cope.row.isdisabled2<span class="token punctuation">=</span>true<span class="token punctuation">"</span></span>
              <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled2<span class="token punctuation">"</span></span>
            <span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
              <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span>
                <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span>
                <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled2<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span>
                <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scope.row.isdisabled2<span class="token punctuation">"</span></span>
                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>el-input__icon el-icon-edit<span class="token punctuation">"</span></span>
              <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span>
            <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table-column</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-table</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
          tableData<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 指令的定义</span>
        update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment" spellcheck="true">// console.log(el.children[0], binding.value)</span>
          <span class="token comment" spellcheck="true">// 聚焦元素</span>
          el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// element-ui</span>
          el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token comment" spellcheck="true">// 元素有变化，如show或者父元素变化可以加延时或判断</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span>_ <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
           <span class="token comment" spellcheck="true">// 读取商品库数据</span>
        ReadGoodsData <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">true</span>
          <span class="token function">queryShopProductSkuByPage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>queryData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span>
            res<span class="token punctuation">.</span>results<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
              item<span class="token punctuation">.</span>isdisabled1 <span class="token operator">=</span> <span class="token boolean">true</span>
              item<span class="token punctuation">.</span>isdisabled2 <span class="token operator">=</span> <span class="token boolean">true</span>
              item<span class="token punctuation">.</span>vipPrice1 <span class="token operator">=</span> <span class="token string">''</span>
              item<span class="token punctuation">.</span>vipPrice2 <span class="token operator">=</span> <span class="token string">''</span>
              <span class="token keyword">return</span> item
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>tableData <span class="token operator">=</span> res<span class="token punctuation">.</span>results <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>listLoading <span class="token operator">=</span> <span class="token boolean">false</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3-gt-更多自定义指令资源"><a href="#3-gt-更多自定义指令资源" class="headerlink" title="3&gt;更多自定义指令资源"></a>3&gt;更多自定义指令资源</h3><p>想了解更多自定义指令资源，请了解此篇文章。</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>自定义指令</tag>
        <tag>directives</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（6）公众号，小程序</title>
    <url>/leader755/46994.html</url>
    <content><![CDATA[<p>大纲：<br>微信，小程序授权（ openId，unid，用户信息，手机号）<br>微信支付（H5，公众号，小程序，app）<br>微信上传图片（H5，公众号，小程序）<br>支付宝支付（H5，app）</p>
<h2 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h2><p>小程序中如何合并 seaData,减少 setData 次数：<br>**  合并<strong>`</strong>setdata<strong>`</strong>的请求，减少通讯的次数：**<br>避免过于频繁调用<code>setData</code>,应考虑将多次<code>setData</code>合并成一次<code>setData</code>调用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不要频繁调用setData</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 绝大多数时候可优化为</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>5. 列表的局部更新</strong><br>在一个列表中，有<code>n</code>条数据，采用上拉加载更多的方式，假如这个时候想对其中某一个数据进行点赞操作，还能及时看到点赞的效果。</p>
<blockquote>
<ul>
<li>可以采用<code>setData</code>全局刷新，点赞完成之后，重新获取数据，再次进行全局重新渲染，这样做的有点是：方便，快捷！缺点是：用户体验极其不好，当用户刷量 100 多条数据后，重新渲染会出现空白期。</li>
<li>也可以采用局部刷新，将点赞的<code>id</code>传过去，知道点的是哪一条数据，重新获取数据，查找相对应<code>id</code>的那条数据的下标（<code>index</code>是不会改变的），用<code>setData</code>进行局部刷新，如此，便可以显著提升渲染速度。</li>
</ul>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>newList<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p>微信登录几种方式：<br><strong>微信联合登录和微信授权登录</strong><br>微信联合登录；也就是我们常用的微信移动端/PC 端之间的扫码登录，PC 端用微信扫码登录，微信移动端确认授权登录后，应用可以从微信拿到用户的 open id 或 union id，将微信获取的用户信息与自己账户体系中的用户身份进行关联；</p>
<p>授权登录：需要用户确认登录，这样可以通过用户的个人确认，获取用户全面的信息，无论是否关注相关微信公众号等都可以获取。</p>
<p>静默授权不需要用户确认，只需要用户访问某个网页，属于嵌套在普通网页里的授权形式，但是只能获取到用户的唯一标示 openid 和 union id，无法拿到用户的微信头像、微信名称等个人信息，对于用户的简单认证还是很有用的。</p>
<p><strong>如何通过微信账户体系来做多应用、多平台之间的账户互通体系；如果某个服务同时分布在多个公众号中，账户体系如何建立；如何做到用户身份唯一识别；</strong><br>1）、同一用户不同公众号/应用下 open id 不同，同一用户不同公众号/应用下 unionid 相同；<br>2）、建立应用账户体系时，通过 union 来进行多应用/平台之间的用户账户体系识别与合并；<br>3）、多应用/平台建立账户体系时，需要做到唯一 user id 对应唯一 union id；<br><strong>某个服务，包括移动 app 端、PC 网页端、公众号端服务，那么用户使用微信授权登录的数据流转流程是怎么样的；</strong><br>1、用户通过微信授权移动 app 服务；该应用服务即可通过接口获取用户的 union id，这个时候，如果在数据库中没有查到该 id，则识别为新用户，直接创建一个 user id，该唯一 user id 与 union id 对应；<br>2、用户通过微信扫码 PC 端授权联合登陆获取 PC 端服务；该应用服务即可通过接口获取用户的 union id，这个时候，在数据库中查到有这个 id，就会把 pc 登录这个账户合并到之前创建的唯一 user id 账户下；<br>3、用户通过关注该服务公众号，用微信授权登录公众号服务；该应用服即可通过接口获取用户的 union id，这个时候，在数据库中查到有这个 id，就会把公众号中登录的这个账户合并到之前创建的唯一 user id 账户下；</p>
<p><strong>网页授权的两种 scope 的区别说明：</strong><br>1、授权登录以 snsapi_base 为 scope 发起的网页授权，是用来获取进入页面的用户的 openid 的，并且是静默授权并自动跳转到回调页的。用户感知的就是直接进入了回调页（往往是业务页面）特点：用户无感知；<br>2、静默授权以 snsapi_userinfo 为 scope 发起的网页授权，是用来获取用户的基本信息的。但这种授权需要用户手动同意，并且由于用户同意过，所以无须关注，就可在授权后获取该用户的基本信息。<br><strong>特殊场景下静默授权：</strong><br>对于已关注公众号的用户，如果用户从公众号的会话或者自定义菜单进入本公众号的网页授权页，即使是 scope 为 snsapi_userinfo，也是静默授权，用户无感知。<br><strong>网页授权流程：</strong><br><strong>1、引导用户进入授权页面同意授权，获取 code **<br>确保微信公众账号拥有授权作用域（scope 参数）的权限的前提下引导用户去授权页面<br>参考链接：<br>scope 为 snsapi_base<br>注意：appid,redirect_uri,state 这些要和后台协商好<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=%22+wx_appid+%22&redirect_uri=%22+api.wx_reg+%22&response_type=code&scope=snsapi_login,snsapi_userinfo&state=1,0#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=”+wx_appid+”&amp;redirect_uri=”+api.wx_reg+”&amp;response_type=code&amp;scope=snsapi_login,snsapi_userinfo&amp;state=1,0#wechat_redirect</a><br>scope 为 snsapi_userinfo<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=%22+wx_appid+%22&redirect_uri=%22+api.wx_reg+%22&response_type=code&scope=snsapi_base,snsapi_userinfo&state=1,0#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=”+wx_appid+”&amp;redirect_uri=”+api.wx_reg+”&amp;response_type=code&amp;scope=snsapi_base,snsapi_userinfo&amp;state=1,0#wechat_redirect</a><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1598313614593-c3c04a5e-42a9-4586-ad55-fa1d21806255.png#height=532&id=qOhCE&originHeight=532&originWidth=639&originalType=binary&size=0&status=done&style=none&width=639" alt=""><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1598313614554-8e7593c1-952c-43b5-acaa-ea1014164056.png#height=527&id=gWFv6&originHeight=527&originWidth=312&originalType=binary&size=0&status=done&style=none&width=312" alt=""><br>用户同意授权后<br>如果用户同意授权，页面将跳转至 redirect_uri/?code=CODE&amp;state=STATE。<br>**2、通过 code 换取网页授权 access_token（后台操作）（之前是 php 中间做了一步中转操作通过 code 换取网页授权 access_token 这步是后台操作）</strong><br>  页面跳回跳的 url 上 redirect_uri/?code=CODE&amp;state=STATE。code<br>通过 code 换取的是网页授权 access_token，如果网页授权的作用域为 snsapi_base，则本步骤中获取到网页授权 access_token 的同时，也获取到了 openid，snsapi_base 式的网页授权流程即到此为止。<br><strong>3：需要个人信息。后台通过 code 得到值之后返回给前端去操作</strong><br><strong>2、通过 code 换取网页授权 access_token（前端操作）</strong><br><strong>window.location.href=”<a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot;+wx_appid+&quot;&amp;redirect_uri=&quot;+encodeURIComponent" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot;+wx_appid+&quot;&amp;redirect_uri=&quot;+encodeURIComponent</a>(“+中转页面的html比如 location.html+”)+”&amp;response_type=code&amp;scope=snsapi_base,snsapi_userinfo&amp;state=”+wx_rt_url_code（前端自己判断，存储，目的是确定授权页面来源。以方便授权后跳回的页面地址）+”,1(这值是和后台协商)#wechat_redirect”;</strong><br><strong>3:location.html 页面授权后会跳转到这个页面。同时在页面 url？后参数中拿到 code 和 state 的值 （state 就是上面传入的）</strong><br><strong>就可以拿着这两个参数去进行登录操作。获取相应的 token ，wxUserToken 等需要的信息  。根据 wx_rt_url_code 自己定义个规则回转到相应的页面。完成登录状态。进行下一步操作</strong><br><strong>为了确保参数的正确传入，state 可以进行 decodeURIComponent 下。（之前调接口的时候程序报错，发现 pc 端授权登录的时候微信解析是有逗号，手机端 state 是没逗号，确保程序的正常运行可以进行解码下）</strong><br>网站的微信授权登录是以二维码的形式 api 网址 api <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=&amp;lang=zh_CN</a><br>手机端微信授权登录 api 网址  <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419317851&token=&lang=zh_CN" target="_blank" rel="noopener">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=&amp;lang=zh_CN</a></p>
<p>微信支付：</p>
<p>H5 支付（即在网页端（非微信浏览器）页面调用支付）</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">onBridgeReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  WeixinJSBridge<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>
    <span class="token string">"getBrandWCPayRequest"</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      appId<span class="token punctuation">:</span> <span class="token string">"wx2421b1c4370ec43b"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//公众号名称，由商户传入</span>
      timeStamp<span class="token punctuation">:</span> <span class="token string">"1395712654"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//时间戳，自1970年以来的秒数</span>
      nonceStr<span class="token punctuation">:</span> <span class="token string">"e61463f8efa94090b1f366cccfbbb444"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//随机串</span>
      <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token string">"prepay_id=u802345jgfjsdfgsdg888"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//统一下单接口返回的prepay_id,提交格式如：prepay_id=***</span>
      signType<span class="token punctuation">:</span> <span class="token string">"MD5"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//签名类型，默认为MD5，支持HMAC-SHA256和MD5 注意此处需与统一下单的签名类型一致</span>
      paySign<span class="token punctuation">:</span> <span class="token string">"70EA570631E4BB79628FBCA90534C63FF7FADD89"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//微信签名 (算法生成)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>err_msg <span class="token operator">==</span> <span class="token string">"get_brand_wcpay_request:ok"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">// 使用以上方式判断前端返回,微信团队郑重提示：</span>
        <span class="token comment" spellcheck="true">//res.err_msg将在用户支付成功后返回ok，但并不保证它绝对可靠。</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> WeixinJSBridge <span class="token operator">==</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"WeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">)</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">"onWeixinJSBridgeReady"</span><span class="token punctuation">,</span> onBridgeReady<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token function">onBridgeReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>开微信开发者工具，打 log，最后发现在这一步时候 if (typeof WeixinJSBridge == “undefined”)<br>1.ios 能够调起微信浏览器的 js-sdk 2.安卓大部分都走到 undefined 里面去了<br>这里其实我也不太清楚原因。个人感觉是微信安卓的内置浏览器版本和这个 WeixinJSBridge 方法的问题。（希望有大神能够解答一下）</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            wx<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                debug<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>debug<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span>
                appId<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>appId<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，公众号的唯一标识</span>
                timestamp<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的时间戳</span>
                nonceStr<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>nonceStr<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 必填，生成签名的随机串</span>
                signature<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>signature<span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 必填，签名</span>
                jsApiList<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wx_config<span class="token punctuation">.</span>jsApiList <span class="token comment" spellcheck="true">// 必填，需要使用的JS接口列表</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//微信支付</span>
            wx<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  <span class="token comment" spellcheck="true">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span>
                <span class="token comment" spellcheck="true">// console.log(this.jsApiCall());</span>
                wx<span class="token punctuation">.</span><span class="token function">chooseWXPay</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                    timestamp<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wechat_code<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span>
                    nonceStr<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>wechat_code<span class="token punctuation">.</span>nonceStr<span class="token punctuation">,</span>
                    <span class="token keyword">package</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wechat_code<span class="token punctuation">.</span><span class="token keyword">package</span><span class="token punctuation">,</span>
                    signType<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wechat_code<span class="token punctuation">.</span>signType<span class="token punctuation">,</span>
                    paySign<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>wechat_code<span class="token punctuation">.</span>paySign<span class="token punctuation">,</span>
                    success<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment" spellcheck="true">// 支付成功后的回调函数</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"支付成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"/hd/becomevip"</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    cancel<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"支付失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p><strong>分析和总结</strong><br>** <em>*<br>扫码支付、公众号支付、H5 支付、小程序支付都有一个同步回调地址跟异步通知地址，只是设置方式有所区别 ：<br><strong>1. 扫码支付</strong><br>同步回调地址在微信商户平台中设置，异步通知地址在统一下单接口的请求参数中设置；<br><strong>2. 公众号支付</strong><br>同步回调地址在 JSAPI 发起支付的回到函数中进行回到，异步通知地址在统一下单接口的请求参数中设置；<br><strong>3. H5 支付</strong><br>同步回调地址：在统一下单接口的返回参数中有一个参数 mweb_url，在 mweb_url 中以 get 传参形式新增一个参数 redirect_url，redirect_url 即是同步回调函数；<br>异步通知地址：统一下单接口的请求参数中设置；<br>*<em>4. 小程序支付\</em>\</em><br>同步回调地址：在小程序获得支付参数，并通过 js 调起微信支付以后，js 中会有一个回调函数，同步回调地址在该回调函数中添加；<br>异步通知地址：统一下单接口的请求参数中设置。</p>
<p>其中扫码支付主要用于电脑端；公众号支付跟 H5 支付主要用于移动端，因此商户在移动端使用微信支付的时候需要判断当前打开的浏览器是否是微信浏览器，并根据结果决定选择公众号支付或 H5 支付；小程序支付的话主要用于小程序内部，因此比如获取 openid，调用统一下单接口等操作均在给小程序提供数据接口服务的接口后台实现。</p>
<p>同步回调地址是作为微信后台跟商户进行页面跳转的渠道，因此同步回调地址是至关重要的，如果不填写，则可能导致支付完成后无法做页面跳转。<br>异步通知地址是微信后台对商户后台在完成微信支付后进行通知的重要通道，商户后台的异步通知地址必须是可访问的，在接收到微信的通知后，要做相关业务处理，并最终返回 SUCCESS 或 FAIL 的标识给微信，以告知微信不要在发送通知。</p>
<p>结尾<br>这里只是针对微信扫码支付、公众号支付、H5 支付、小程序支付等微信的四中支付方式做了一个大概的分析和总结，具体的每一个支付方式的接入方法还请以微信支付开发文档为重要参考；因篇幅有限，代码量大，这里就不贴具体的实现代码了。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>小程序</tag>
        <tag>公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（8）拷贝</title>
    <url>/leader755/46928.html</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599388884598-3823412b-fbc8-42fb-8d05-192f3011b049.png#height=1320&id=bQyv2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1320&originWidth=2910&originalType=binary&size=320693&status=done&style=none&width=2910" alt="image.png"></h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1599381658009-a92fc3b0-5400-4cff-9f05-754065529eab.png#height=241&id=xa1aD&margin=%5Bobject%20Object%5D&name=image.png&originHeight=482&originWidth=674&originalType=binary&size=26164&status=done&style=none&width=337" alt="image.png"></h3><p>js 的基本数据类型的赋值，就是值传递。引用类型对象的赋值是将对象地址的引用赋值。这时候修改对象中的属性或者值，会导致所有引用这个对象的值改变。如果想要真的复制一个新的对象，而不是复制对象的引用，就要用到对象的深拷贝。</p>
<h2 id="数据类型（基本数据类型和引用数据类型）"><a href="#数据类型（基本数据类型和引用数据类型）" class="headerlink" title="数据类型（基本数据类型和引用数据类型）"></a>数据类型（基本数据类型和引用数据类型）</h2><h3 id="基本数据类型（栈内存，引用值，深拷贝）"><a href="#基本数据类型（栈内存，引用值，深拷贝）" class="headerlink" title="基本数据类型（栈内存，引用值，深拷贝）"></a>基本数据类型（栈内存，引用值，深拷贝）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a=3,b=4</span></code></pre>
<h3 id="引用数据类型（堆内存，引用址，指针指向该地址。浅拷贝）"><a href="#引用数据类型（堆内存，引用址，指针指向该地址。浅拷贝）" class="headerlink" title="引用数据类型（堆内存，引用址，指针指向该地址。浅拷贝）"></a>引用数据类型（堆内存，引用址，指针指向该地址。浅拷贝）</h3><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"引用数据类型"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>
arr2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1,2,3] [1,2,3]</span></code></pre>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><h3 id="1-‘-’赋值。只是将对象的引用赋值"><a href="#1-‘-’赋值。只是将对象的引用赋值" class="headerlink" title="1.‘=’赋值。只是将对象的引用赋值"></a>1.‘=’赋值。只是将对象的引用赋值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"xiaoMing"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{name:'xiaoMing',age:20};</span>
a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaohong"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{name:'xiaohong',age:20}</span></code></pre>
<p>###</p>
<h3 id="2-Object-assign"><a href="#2-Object-assign" class="headerlink" title="2.Object.assign()"></a>2.Object.assign()</h3><p>Object.assign 是 ES6 的新函数。Object.assign() 方法可以把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象。但是 Object.assign() 进行的是浅拷贝，拷贝的是对象的属性的引用，而不是对象本身。<strong>因为 Object.assign()拷贝的是属性值。假如源对象的属性值是一个指向对象的引用，它也只拷贝那个引用值。Object.assgin 只能深拷贝第一层, 深层的还是浅拷贝, 记住这个就行了。</strong></p>
<pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token operator">...</span>sources<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>参数：<br>target：目标对象。<br>sources：任意多个源对象。<br>返回值：目标对象会被返回。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">"koala"</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"程序员成长指北"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 'koala', b: { name: '程序员成长指北' } }</span>

source<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">"smallKoala"</span><span class="token punctuation">;</span>
source<span class="token punctuation">.</span>b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"程序员成长指北哦"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 'smallKoala', b: { name: '程序员成长指北哦' } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// { a: 'koala', b: { name: '程序员成长指北哦' } }</span></code></pre>
<blockquote>
<p>//Object.assign 是浅拷贝，拷贝的是对象的引用值，如果为引用类型对象时，一级属性为深拷贝，对象中有二级属性的话，则二级属性以后都是浅拷贝。</p>
</blockquote>
<h3 id="3-扩展运算符（…）"><a href="#3-扩展运算符（…）" class="headerlink" title="3.扩展运算符（…）"></a>3.扩展运算符（…）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token punctuation">{</span> c<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a:2,b:{c:1}}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a:1,b:{c:1}}</span>
obj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a:2,b:{c:2}}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a:1,b:{c:2}}</span></code></pre>
<blockquote>
<p>//扩展运算符是浅拷贝，拷贝的是对象的引用值，如果为引用类型对象时，一级属性为深拷贝，如果对象中有二级属性的话，则二级属性以后都是浅拷贝。</p>
</blockquote>
<blockquote>
</blockquote>
<h3 id="如果对象或者数组中包含子数组和子对象，那子数组或者对象为浅拷贝"><a href="#如果对象或者数组中包含子数组和子对象，那子数组或者对象为浅拷贝" class="headerlink" title="如果对象或者数组中包含子数组和子对象，那子数组或者对象为浅拷贝"></a>如果对象或者数组中包含子数组和子对象，那子数组或者对象为浅拷贝</h3><blockquote>
<p>原因是…遍历时那部分为对象/数组类型指向原来的地址</p>
</blockquote>
<p>###</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深拷贝常用方法</span>
<span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj4 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>c<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a: 999, b: 2, c: { a: -999 },d: [123, 5]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a: 1, b: 2, c: { a: 3 },d: [4, 5]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a: 1, b: 2, c: { a: -999 },d: [123, 5]}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//{a: 1, b: 2, c: { a: -999 },d: [123, 5]}</span></code></pre>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">7</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr1 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//深拷贝常用方法</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr<span class="token punctuation">;</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr4 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr <span class="token operator">===</span> arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">999</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1, 2, 3, [4, 5], {a: 6, b: 7}]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[999, 2, 3, [-999, 5], {a: 123, b: 7}]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1, 2, 3, [-999, 5], {a: 123, b: 7}]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[1, 2, 3, [-999, 5], {a: 123, b: 7}]</span></code></pre>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="1-手动复制"><a href="#1-手动复制" class="headerlink" title="1.手动复制"></a>1.手动复制</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> obj1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> obj1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> c<span class="token punctuation">:</span> obj1<span class="token punctuation">.</span>c <span class="token punctuation">}</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// { a: 10, b: 20, c: 30 } &lt;-- 沒被改到</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// { a: 10, b: 100, c: 30 }</span></code></pre>
<h3 id="2-JSON-做字符串转换"><a href="#2-JSON-做字符串转换" class="headerlink" title="2.JSON 做字符串转换"></a>2.JSON 做字符串转换</h3><p>用 JSON.stringify 把对象转成字符串，再用 JSON.parse 把字符串转成新的对象。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> body<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>body<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// { body: { a: 10 } } &lt;-- 沒被改到</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// { body: { a: 20 } }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>body <span class="token operator">===</span> obj2<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// false</span></code></pre>
<blockquote>
<p><strong>这种方法虽然可以实现数组或对象深拷贝,但不能处理函数和正则。只能序列化对象的可枚举的自有属性。</strong></p>
</blockquote>
<p>###</p>
<h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>1.如果 obj 里面有时间对象，则 JSON.stringify 后再 JSON.parse 的结果，时间将只是字符串的形式，而不是对象的形式</p>
<pre class=" language-javascript"><code class="language-javascript">eg：
<span class="token keyword">var</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span>
    date<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1536627600000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1540047600000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> b<span class="token punctuation">;</span>
  b <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span>；
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>解决方法，将 new Date()变为字符串，new Date().toString()</p>
</blockquote>
<p>2.如果 obj 里有 RegExp(正则表达式的缩写)、Error 对象，则序列化的结果将只得到空对象；</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>
  date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"\\w+"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// debugger</span>
<span class="token keyword">const</span> copyed <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//console.error('ddd', test, copyed)；</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>copyed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>3.如果 obj 里有函数，undefined，则序列化的结果会把函数或 undefined 丢失；</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>
  date<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">hehe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"fff"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// debugger</span>
<span class="token keyword">const</span> copyed <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> test<span class="token punctuation">,</span> copyed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>4.如果 obj 里有 NaN、Infinity 和-Infinity，则序列化的结果会变成 null</strong></p>
<p><strong>5.JSON.stringify()只能序列化对象的可枚举的自有属性，例如 如果 obj 中的对象是有构造函数生成的， 则使用 JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的 constructor；</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> liai <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"liai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> test <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span>
  date<span class="token punctuation">:</span> liai<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// debugger</span>
<span class="token keyword">const</span> copyed <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
test<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"ddd"</span><span class="token punctuation">,</span> test<span class="token punctuation">,</span> copyed<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>6.如果对象中存在循环引用的情况也无法正确实现深拷贝；</strong><br><strong>总结：</strong><br>用法简单，然而使用这种方法会有一些隐藏的坑：因为在序列化 JavaScript 对象时，所有函数和原型成员会被有意忽略。<br>通俗点说，JSON.parse(JSON.stringfy(X))，其中 X 只能是 Number, String, Boolean, Array, 扁平对象，即那些能够被 JSON 直接表示的数据结构。</p>
<h3 id="3-递归拷贝"><a href="#3-递归拷贝" class="headerlink" title="3.递归拷贝"></a>3.递归拷贝</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>initalObj<span class="token punctuation">,</span> finalObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> finalObj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> initalObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> prop <span class="token operator">=</span> initalObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prop<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
      arguments<span class="token punctuation">.</span><span class="token function">callee</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">21</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="4-使用-Object-create-方法"><a href="#4-使用-Object-create-方法" class="headerlink" title="4.使用 Object.create()方法"></a>4.使用 Object.create()方法</h3><p>直接使用 var newObj = Object.create(oldObj)，可以达到深拷贝的效果。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>initalObj<span class="token punctuation">,</span> finalObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> obj <span class="token operator">=</span> finalObj <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> initalObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> prop <span class="token operator">=</span> initalObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 避免相互引用对象导致死循环，如initalObj.a = initalObj的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> prop <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prop<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prop<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="5-jquery"><a href="#5-jquery" class="headerlink" title="5.jquery"></a>5.jquery</h3><p>jquery 有提供一个$.extend 可以用来做 Deep Copy。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"jquery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  b<span class="token punctuation">:</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span> g<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  c<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> obj2<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// false</span></code></pre>
<h3 id="6-第三方函数"><a href="#6-第三方函数" class="headerlink" title="6.第三方函数"></a>6.第三方函数</h3><p>还有一些其它的第三方函数库有深拷贝 function，如 lodash。</p>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://blog.csdn.net/ljw1412/article/details/79651725" target="_blank" rel="noopener">https://blog.csdn.net/ljw1412/article/details/79651725</a><br><a href="https://www.jianshu.com/p/52db1d0c1780" target="_blank" rel="noopener">https://www.jianshu.com/p/52db1d0c1780</a><br><a href="https://segmentfault.com/a/1190000016440069" target="_blank" rel="noopener">https://segmentfault.com/a/1190000016440069</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>深拷贝</tag>
        <tag>浅拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title>博客园主题美化</title>
    <url>/leader755/33440.html</url>
    <content><![CDATA[<h2 id="1-主题效果"><a href="#1-主题效果" class="headerlink" title="1.主题效果"></a>1.主题效果</h2><p>实际网站效果 <a href="https://www.cnblogs.com/leader755/" target="_blank" rel="noopener">https://www.cnblogs.com/leader755/</a><br><a href="https://www.cnblogs.com/leader755/" target="_blank" rel="noopener"><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610809961376-8a870346-44a7-44c1-becd-4170586c4b3d.png#height=787&id=e6VuF&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1574&originWidth=2874&originalType=binary&size=7262820&status=done&style=none&width=1437" alt="image.png"></a></p>
<h2 id="2-主题介绍"><a href="#2-主题介绍" class="headerlink" title="2.主题介绍"></a>2.主题介绍</h2><blockquote>
<p>本主题使用的 <a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/Docs/GettingStarted/install" target="_blank" rel="noopener">SimpleMemory </a> 这款主题，看完本教程后你能搭出相同美化的博客园主题博客了，也可按照<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/Docs/GettingStarted/install" target="_blank" rel="noopener">官方教程</a>调整细节或者新增部分功能。<br>github 官网：<a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory" target="_blank" rel="noopener">https://github.com/BNDong/Cnblogs-Theme-SimpleMemory</a><br>官方教程：<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/" target="_blank" rel="noopener">https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/</a></p>
</blockquote>
<h2 id="3-设置主题并申请-js-代码权限"><a href="#3-设置主题并申请-js-代码权限" class="headerlink" title="3.设置主题并申请 js 代码权限"></a>3.设置主题并申请 js 代码权限</h2><blockquote>
<p>1&gt;进入管理&gt;设置&gt;博客设置&gt;设置<br>2&gt;博客主题&gt;选择 SimpleMemory 主题<br>3&gt;勾选申请 js 权限，填写开通的理由等待管理员审核通过(等待 10min 左右)。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610810897799-26cad005-922c-4be1-8404-f5e505d70d4c.png#height=713&id=MP08w&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1426&originWidth=1864&originalType=binary&size=467125&status=done&style=none&width=932" alt="image.png"></p>
<h2 id="4-覆盖默认的-css"><a href="#4-覆盖默认的-css" class="headerlink" title="4.覆盖默认的 css"></a>4.覆盖默认的 css</h2><blockquote>
<p>1.进入 <a href="https://github.com/BNDong/Cnblogs-Theme-SimpleMemory" target="_blank" rel="noopener">SimpleMemory</a> 的 github 仓库，将 src/style/base.min.css 代码复制. 2.将复制到的 css 粘贴到 css 代码块中，并且勾选上 禁用默认 css. 3.点击保存，强制刷新局可以看到基本样式出来了</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610811524596-8f7a6a91-fb51-413f-b760-65724e0ca66b.png#height=687&id=cSdcO&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1374&originWidth=2762&originalType=binary&size=314107&status=done&style=none&width=1381" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610811287489-1d2698f8-4ae1-4f09-bf66-4be5f8d92817.png#height=637&id=h53qX&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1274&originWidth=1750&originalType=binary&size=381956&status=done&style=none&width=875" alt="image.png"></p>
<h2 id="5-侧边栏公告的基本配置"><a href="#5-侧边栏公告的基本配置" class="headerlink" title="5.侧边栏公告的基本配置"></a>5.侧边栏公告的基本配置</h2><p>在侧边栏公告中将以下代码粘贴进去，点击保存强制刷新博客页面就基本可以看到页面效果了，是不是很简单呢。到了这里如果不追求其他，一个美化博客的操作就已经完成了，但是我还想配置个性化，那就请看下面。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    window<span class="token punctuation">.</span>cnblogsConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
        GhVersions    <span class="token punctuation">:</span> <span class="token string">'v1.3.3'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本（不需要改动）</span>
        blogUser      <span class="token punctuation">:</span> <span class="token string">"userName"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名</span>
        blogAvatar    <span class="token punctuation">:</span> <span class="token string">"https://xxxx.png"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户头像</span>
        blogStartDate <span class="token punctuation">:</span> <span class="token string">"2016-11-17"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@v1.3.3/src/script/simpleMemory.min.js"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610811871334-57619c2b-5ff9-4fc0-9670-76377aaf312f.png#height=649&id=LXNRd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1298&originWidth=2138&originalType=binary&size=353533&status=done&style=none&width=1069" alt="image.png"></p>
<h2 id="6-菜单栏拓展功能（可选）"><a href="#6-菜单栏拓展功能（可选）" class="headerlink" title="6.菜单栏拓展功能（可选）"></a>6.菜单栏拓展功能（可选）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610812078395-8923341e-d66d-433c-91a9-d8a98b8186f1.png#height=786&id=abB1Z&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1572&originWidth=2856&originalType=binary&size=5550331&status=done&style=none&width=1428" alt="image.png"></p>
<blockquote>
<p>我直接将我配置给出，按自己的实际替换为自己的就好。<br>新增的功能：</p>
<ol>
<li>菜单栏扩展</li>
<li>打赏码配置</li>
<li>夜间模式配置</li>
</ol>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
    window<span class="token punctuation">.</span>cnblogsConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
        GhVersions    <span class="token punctuation">:</span> <span class="token string">'v1.3.3'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>
        blogUser      <span class="token punctuation">:</span> <span class="token string">"leader755"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户名</span>
        blogAvatar    <span class="token punctuation">:</span> <span class="token string">"https://gitee.com/leader755/imagehost/raw/master/blog/wx_avatar.png"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用户头像</span>
        blogStartDate <span class="token punctuation">:</span> <span class="token string">"2018-03-105"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 入园时间，年-月-日。入园时间查看方法：鼠标停留园龄时间上，会显示入园时间</span>
        webpageTitleOnblur<span class="token punctuation">:</span> <span class="token string">'(oﾟvﾟ)ノ风里雨里，我再这里等你'</span><span class="token punctuation">,</span>
        webpageIcon<span class="token punctuation">:</span> <span class="token string">"https://gitee.com/leader755/imagehost/raw/master/blog/wx_avatar.webp"</span><span class="token punctuation">,</span>
        menuNavList<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token comment" spellcheck="true">// 列表数据 ['导航名称', '链接', 'icon']</span>
            <span class="token punctuation">[</span><span class="token string">'Blog'</span><span class="token punctuation">,</span> <span class="token string">'https://www.leader755.com'</span><span class="token punctuation">,</span> <span class="token string">'icon-blog-solid'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string">'yuque'</span><span class="token punctuation">,</span> <span class="token string">'https://www.yuque.com/leader755'</span><span class="token punctuation">,</span> <span class="token string">'icon-logo'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string">'github'</span><span class="token punctuation">,</span> <span class="token string">'https://github.com/Leader755/'</span><span class="token punctuation">,</span> <span class="token string">'icon-github'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string">'gitee'</span><span class="token punctuation">,</span> <span class="token string">'https://gitee.com/leader755'</span><span class="token punctuation">,</span> <span class="token string">'icon-gitee'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token string">'cnblogs'</span><span class="token punctuation">,</span> <span class="token string">'https://www.cnblogs.com/'</span><span class="token punctuation">,</span> <span class="token string">'icon-cnblogs'</span><span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        switchDayNight<span class="token punctuation">:</span><span class="token punctuation">{</span>
            enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">// 是否开启日/夜间模式切换按钮</span>
            auto<span class="token punctuation">:</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 自动切换相关配置</span>
                 enable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 开启自动切换</span>
                 dayHour<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 日间模式开始时间，整数型，24小时制</span>
                 nightHour<span class="token punctuation">:</span> <span class="token number">19</span>   <span class="token comment" spellcheck="true">// 夜间模式开始时间，整数型，24小时制</span>
            <span class="token punctuation">}</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       homeBannerTextType<span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span>
       reward<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//赞赏码功能</span>
          enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
          wechatpay<span class="token punctuation">:</span> <span class="token string">'https://gitee.com/leader755/imagehost/raw/master/blog/wxz.jpg'</span><span class="token punctuation">,</span>
          alipay<span class="token punctuation">:</span> <span class="token string">'https://gitee.com/leader755/imagehost/raw/master/blog/zfb.jpg'</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      weChatOfficialAccounts<span class="token punctuation">:</span> <span class="token string">'https://gitee.com/leader755/imagehost/raw/master/blog/wxgzh.jpg'</span><span class="token punctuation">,</span>
      essayCodeHighlighting<span class="token punctuation">:</span> <span class="token string">"a11y-dark"</span>
   <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.jsdelivr.net/gh/BNDong/Cnblogs-Theme-SimpleMemory@v1.3.3/src/script/simpleMemory.min.js"</span> defer<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610812287601-af1c52b2-5652-4d97-8d19-97eb75bb3b16.png#height=457&id=XZjAW&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1732&originalType=binary&size=188458&status=done&style=none&width=866" alt="image.png"></p>
<p>7.配置音乐播放器功能（可选）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610812483948-d291b790-2ab1-4eab-a524-ca4d36e01269.png#height=784&id=Uo5FQ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1568&originWidth=2880&originalType=binary&size=4464671&status=done&style=none&width=1440" alt="image.png"></p>
<p>将以下代码直接粘贴在页脚 HTML 代码 位置</p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span>style<span class="token operator">></span>
  @media only screen and <span class="token punctuation">(</span>max<span class="token operator">-</span>width<span class="token punctuation">:</span> 767px<span class="token punctuation">)</span><span class="token punctuation">{</span>
  #sidebar_search_box input<span class="token punctuation">[</span>type<span class="token operator">=</span>text<span class="token punctuation">]</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">%</span> <span class="token operator">-</span> 24px<span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>音乐<span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"https://blog-static.cnblogs.com/files/elkyo/APlayer.min.css"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"player"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"aplayer aplayer-withlist aplayer-fixed"</span> data<span class="token operator">-</span>id<span class="token operator">=</span><span class="token string">"3025663508"</span> data<span class="token operator">-</span>server<span class="token operator">=</span><span class="token string">"netease"</span> data<span class="token operator">-</span>type<span class="token operator">=</span><span class="token string">"playlist"</span> data<span class="token operator">-</span>order<span class="token operator">=</span><span class="token string">"random"</span> data<span class="token operator">-</span>fixed<span class="token operator">=</span><span class="token string">"true"</span> data<span class="token operator">-</span>listfolded<span class="token operator">=</span><span class="token string">"true"</span> data<span class="token operator">-</span>theme<span class="token operator">=</span><span class="token string">"#2D8CF0"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://blog-static.cnblogs.com/files/elkyo/APlayer.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://blog-static.cnblogs.com/files/elkyo/Meting.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>点击冒点<span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>canvas width<span class="token operator">=</span><span class="token string">"1777"</span> height<span class="token operator">=</span><span class="token string">"841"</span> style<span class="token operator">=</span><span class="token string">"position: fixed; left: 0px; top: 0px; z-index: 2147483647; pointer-events: none;"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>canvas<span class="token operator">></span><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://blog-static.cnblogs.com/files/elkyo/mouse-click.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610812672610-536ef9b5-7f1e-4f85-8a32-8be26777cfbb.png#height=389&id=sDqUc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=778&originWidth=1806&originalType=binary&size=126176&status=done&style=none&width=903" alt="image.png"></p>
<h2 id="7-增加友盟的代码统计功能（可选）"><a href="#7-增加友盟的代码统计功能（可选）" class="headerlink" title="7.增加友盟的代码统计功能（可选）"></a>7.增加友盟的代码统计功能（可选）</h2><blockquote>
<ul>
<li><a href="https://passport.umeng.com/" target="_blank" rel="noopener">注册友盟</a>，然后新建应用，填写网站域名，会给出以下代码，复制 id</li>
<li>将以下代码复制到 页首 HTML 代码 ,将 id 替换为友盟给出的 id.</li>
</ul>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1610812875079-a71ab146-e177-4ef9-b2fd-77fae4825a07.png#height=765&id=RwyV1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1530&originWidth=2600&originalType=binary&size=462700&status=done&style=none&width=1300" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript">  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>统计<span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"cnzzProtocol"</span>  style<span class="token operator">=</span><span class="token string">"display: none;"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"id_cnzz_stat_icon"</span> id<span class="token operator">=</span><span class="token string">'cnzz_stat_icon_1279624609'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">'https://v1.cnzz.com/z_stat.php?id=友盟id&amp;online=1&amp;show=line'</span> type<span class="token operator">=</span><span class="token string">'text/javascript'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre>
<h2 id="8-更多功能扩展"><a href="#8-更多功能扩展" class="headerlink" title="8.更多功能扩展"></a>8.更多功能扩展</h2><blockquote>
<ul>
<li>** 官方文档：<strong>[</strong><a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/**](https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/)" target="_blank" rel="noopener">https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/**](https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/)</a></li>
<li>** window.cnblogsConfig 有很多的配置项，配置详情见<strong>[</strong>参考文档**](<a href="https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/Docs/Customization/config" target="_blank" rel="noopener">https://bndong.github.io/Cnblogs-Theme-SimpleMemory/v1.1/#/Docs/Customization/config</a>)</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>主题美化</category>
      </categories>
      <tags>
        <tag>博客园美化</tag>
      </tags>
  </entry>
  <entry>
    <title>博客自动化部署</title>
    <url>/leader755/16745.html</url>
    <content><![CDATA[<h2 id="为什么要写-Blog？"><a href="#为什么要写-Blog？" class="headerlink" title="为什么要写 Blog？"></a>为什么要写 Blog？</h2><p>是啊，为什么要写 Blog？毕竟这里没有人支付稿酬，也看不出有任何明显的物质性收益。<br>不管你选择那种博客，这本身也是一个学习过程。 ——阮一峰</p>
<h2 id="一-目前常见的博客框架："><a href="#一-目前常见的博客框架：" class="headerlink" title="一.目前常见的博客框架："></a>一.目前常见的博客框架：</h2><blockquote>
<ul>
<li>hexo 官网：<a href="https://hexo.io/" target="_blank" rel="noopener">https://hexo.io</a>，基于 node.js 的静态博客。</li>
<li>vuepress 官网：<a href="https://vuepress.vuejs.org/zh/" target="_blank" rel="noopener">https://vuepress.vuejs.org/zh/</a>基于 vue.js 的</li>
<li>halo 官网：<a href="https://halo.run/" target="_blank" rel="noopener">https://halo.run/</a> 基于 springboot vue 动态博客。</li>
<li>WordPress 官网：<a href="https://wordpress.org/" target="_blank" rel="noopener">https://wordpress.org/,</a>php 动态博客</li>
<li>Z-Blog 官网：<a href="https://www.zblogcn.com/" target="_blank" rel="noopener">https://www.zblogcn.com/</a> PHP</li>
<li>typecho <a href="http://typecho.org/" target="_blank" rel="noopener">http://typecho.org/</a> PHP</li>
<li>emlog <a href="https://emlog.cn/" target="_blank" rel="noopener">https://emlog.cn/</a> PHP</li>
<li>jekyll <a href="http://jekyllcn.com/" target="_blank" rel="noopener">http://jekyllcn.com/</a> 将纯文本转换为静态博客网站</li>
<li>hugo 官网：<a href="https://www.gohugo.org/" target="_blank" rel="noopener">https://www.gohugo.org/</a>，基于 go 语言</li>
<li>solo 官网：<a href="https://solo.b3log.org/" target="_blank" rel="noopener">https://solo.b3log.org/</a> 基于 java,有后台管理</li>
</ul>
</blockquote>
<h2 id="二-hexo-博客搭建部署"><a href="#二-hexo-博客搭建部署" class="headerlink" title="二.hexo 博客搭建部署"></a>二.hexo 博客搭建部署</h2><h3 id="1-搭建本地-hexo-博客"><a href="#1-搭建本地-hexo-博客" class="headerlink" title="1.搭建本地 hexo 博客"></a>1.<a href="https://www.yuque.com/leader755/blog/dqugvo" target="_blank" rel="noopener">搭建本地 hexo 博客</a></h3><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g   <span class="token comment" spellcheck="true">//全局安装 hexo</span>
hexo init blog            <span class="token comment" spellcheck="true">//初始化</span>
hexo <span class="token keyword">new</span> <span class="token string">"Hello Hexo"</span>     <span class="token comment" spellcheck="true">//新建一个makedown 文档</span>
hexo generate             <span class="token comment" spellcheck="true">//打包生成静态文件</span>
hexo server               <span class="token comment" spellcheck="true">//启动服务(可以看到新增的文档)</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span>
  <span class="token punctuation">}</span></code></pre>
<h3 id="2-hexo-的主题配置-以-常用插件"><a href="#2-hexo-的主题配置-以-常用插件" class="headerlink" title="2.hexo 的主题配置 以 常用插件"></a>2.<a href="https://www.yuque.com/leader755/blog/pdrp5a" target="_blank" rel="noopener">hexo 的主题配置</a> 以 <a href="https://www.yuque.com/leader755/blog/wcgfp5" target="_blank" rel="noopener">常用插件</a></h3><p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646267896636-404c358f-0c99-4195-966b-98adb34cd8f9.png#clientId=u1d289fd2-cb50-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=375&id=uc5cc75b9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1098&originWidth=756&originalType=binary&ratio=1&rotation=0&showTitle=false&size=112142&status=done&style=none&taskId=u3bcc9ed4-5cb1-4316-a54a-77670b0f13e&title=&width=258" alt="image.png"></p>
<pre class=" language-javascript"><code class="language-javascript">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>iissnan<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>next themes<span class="token operator">/</span>next</code></pre>
<pre class=" language-javascript"><code class="language-javascript">theme<span class="token punctuation">:</span> next<span class="token punctuation">;</span></code></pre>
<h3 id="3-hexo-博客部署到-Github"><a href="#3-hexo-博客部署到-Github" class="headerlink" title="3.hexo 博客部署到 Github"></a>3.<a href="https://www.yuque.com/leader755/blog/diqcug" target="_blank" rel="noopener">hexo 博客部署到 Github</a></h3><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<pre class=" language-javascript"><code class="language-javascript">deploy<span class="token punctuation">:</span>
  <span class="token operator">-</span> type<span class="token punctuation">:</span> <span class="token string">'git'</span>
  repo<span class="token punctuation">:</span>
    gitee<span class="token punctuation">:</span> git@gitee<span class="token punctuation">.</span>com<span class="token punctuation">:</span>leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>git<span class="token punctuation">,</span>master
    github<span class="token punctuation">:</span> git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git<span class="token punctuation">,</span>master
  name<span class="token punctuation">:</span> <span class="token string">"Leader755"</span>
  email<span class="token punctuation">:</span> <span class="token string">"1181012791@qq.com"</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript">hexo g <span class="token operator">-</span>d</code></pre>
<p>###</p>
<h3 id="4-语雀文档同步到-hexo-博客"><a href="#4-语雀文档同步到-hexo-博客" class="headerlink" title="4.语雀文档同步到 hexo 博客"></a>4.<a href="https://www.yuque.com/leader755/blog/egko8o" target="_blank" rel="noopener">语雀文档同步到 hexo 博客</a></h3><h4 id="1-gt-安装-yuque-hexo-同步文章插件"><a href="#1-gt-安装-yuque-hexo-同步文章插件" class="headerlink" title="1&gt;安装 yuque-hexo 同步文章插件"></a>1&gt;安装 yuque-hexo 同步文章插件</h4><pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">-</span>g yuque<span class="token operator">-</span>hexo  <span class="token comment" spellcheck="true">//安装 yuque-hexo</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//底部新增以下配置</span>
<span class="token string">"yuqueConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"postPath"</span><span class="token punctuation">:</span> <span class="token string">"source/_posts/yuque"</span><span class="token punctuation">,</span>
    <span class="token string">"cachePath"</span><span class="token punctuation">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>
    <span class="token string">"mdNameFormat"</span><span class="token punctuation">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>
    <span class="token string">"adapter"</span><span class="token punctuation">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>
    <span class="token string">"concurrency"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>
    <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"leader755"</span><span class="token punctuation">,</span>
    <span class="token string">"repo"</span><span class="token punctuation">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>
    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"在语雀上申请的 token"</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublished"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token string">"onlyPublic"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>
  <span class="token punctuation">}</span></code></pre>
<p>参数含义：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>含义</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>postPath</td>
<td>文档同步后生成的路径</td>
<td>source/_posts/yuque</td>
</tr>
<tr>
<td>cachePath</td>
<td>文档下载缓存文件</td>
<td>yuque.json</td>
</tr>
<tr>
<td>mdNameFormat</td>
<td>文件名命名方式 (title / slug)</td>
<td>title</td>
</tr>
<tr>
<td>adapter</td>
<td>文档生成格式 (hexo/markdown)</td>
<td>hexo</td>
</tr>
<tr>
<td>concurrency</td>
<td>下载文章并发数</td>
<td>5</td>
</tr>
<tr>
<td>baseUrl</td>
<td>语雀 API 地址</td>
<td>-</td>
</tr>
<tr>
<td>login</td>
<td>语雀 login (group), 也称为个人路径</td>
<td>-</td>
</tr>
<tr>
<td>repo</td>
<td>语雀仓库短名称，也称为语雀知识库路径</td>
<td>-</td>
</tr>
<tr>
<td>onlyPublished</td>
<td>只展示已经发布的文章</td>
<td>false</td>
</tr>
<tr>
<td>onlyPublic</td>
<td>只展示公开文章</td>
<td>false</td>
</tr>
</tbody></table>
<h4 id="2-gt-语雀上申请-token"><a href="#2-gt-语雀上申请-token" class="headerlink" title="2&gt;语雀上申请 token"></a>2&gt;<a href="https://www.yuque.com/yuque/developer/api" target="_blank" rel="noopener">语雀上申请 token</a></h4><h4 id="3-gt-可执行的命令行"><a href="#3-gt-可执行的命令行" class="headerlink" title="3&gt;可执行的命令行"></a>3&gt;可执行的命令行</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>
    <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>
    <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>
  <span class="token punctuation">}</span></code></pre>
<p>##</p>
<h2 id="三-全自动部署博客"><a href="#三-全自动部署博客" class="headerlink" title="三.全自动部署博客"></a>三.全自动部署博客</h2><blockquote>
<p>使用 Hexo + Github + 语雀 + yuque-hexo +actions+severless + jenkins 打造全自动持续集成个人博客，云端写作，自动部署，完美体验~。</p>
</blockquote>
<p>整体流程：<br><a href="https://www.processon.com/embed/6222efc56376890772902783" target="_blank" rel="noopener">https://www.processon.com/embed/6222efc56376890772902783</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646459238938-4761bf3c-abe5-45d1-a1a4-dde08853e05a.png#clientId=u821c819c-1be3-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=108&id=u659eda6c&margin=%5Bobject%20Object%5D&name=%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2.png&originHeight=215&originWidth=1449&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36206&status=done&style=none&taskId=u4a1b9bfd-a3d9-4cef-a154-86732e343ea&title=&width=729.5" alt="博客自动化部署.png"></p>
<ul>
<li>语雀发布一篇文章</li>
<li>webhook 调用 serverless 函数</li>
<li>serverless 发起请求 trigger 一个 build 任务</li>
<li>actions 同步语雀文章并构建 hexo</li>
<li>github 生成静态页面展示</li>
<li>jenkins 自动拉取代码部署到个人网站</li>
</ul>
<h3 id="1-Serverless-云函数自动化"><a href="#1-Serverless-云函数自动化" class="headerlink" title="1. Serverless 云函数自动化"></a>1. <a href="https://www.yuque.com/leader755/blog/tl24xf" target="_blank" rel="noopener">Serverless 云函数自动化</a></h3><p>目前阿里云和腾讯云都有 serverless 服务，免费的额度完全够用了，目前用的腾讯云的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646354266872-d2adab7c-2d7b-4d5c-b027-9ee0bbe263cd.png#clientId=u78eea9c2-dae5-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=434&id=u688e1e08&margin=%5Bobject%20Object%5D&name=image.png&originHeight=868&originWidth=2446&originalType=binary&ratio=1&rotation=0&showTitle=false&size=215351&status=done&style=none&taskId=u974283ec-35ca-4e29-8441-5d0ad6c2b71&title=&width=1223" alt="image.png"></p>
<p><strong>1）创建函数</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646368992000-3d961401-62ea-468c-9629-d3bb5b3ff0ed.png#clientId=ucacb647c-3f93-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=724&id=u43be68bd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1448&originWidth=2404&originalType=binary&ratio=1&rotation=0&showTitle=false&size=233070&status=done&style=none&taskId=u891e5236-6014-41b8-850b-a26d22ecac0&title=&width=1202" alt="image.png"></p>
<p><strong>2）serverless 函数示例:</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf8 -*-</span>
<span class="token keyword">import</span> requests<span class="token punctuation">,</span>time

text <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d, %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"https://gitee.com/api/v5/repos/leader755/blog-master/hooks/572161/tests"</span><span class="token punctuation">,</span>
    json <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"access_token"</span><span class="token punctuation">:</span><span class="token string">"gitee申请的token"</span><span class="token punctuation">,</span>
        <span class="token comment" spellcheck="true"># "body":"语雀文章更新，itee触发构建" + str(text)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">'curl/7.52.1'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/json;charset=UTF-8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">204</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"This's OK!"</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> r<span class="token punctuation">.</span>status_code</code></pre>
<h3 id="2-语雀配置"><a href="#2-语雀配置" class="headerlink" title="2.语雀配置"></a>2.语雀配置</h3><p>步骤：语雀文档 -&gt;设置-&gt;新消息推送<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646370032172-10b9feeb-0e6d-4e24-abdd-c1cd6f3fa925.png#clientId=ucacb647c-3f93-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=677&id=u0d01bed5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1354&originWidth=2776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190795&status=done&style=none&taskId=u4872880a-8ef0-4da7-937d-2ae5cb03742&title=&width=1388" alt="image.png"><br>已添加的 webhook 列表：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646324442611-caa6f1bb-db32-4594-bd18-fc2bfa823925.png#clientId=u19b2aa08-ed0f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=481&id=I7u9L&margin=%5Bobject%20Object%5D&name=image.png&originHeight=962&originWidth=1694&originalType=binary&ratio=1&rotation=0&showTitle=false&size=190548&status=done&style=none&taskId=u72cc9755-73aa-427e-bca9-679731662bf&title=&width=847" alt="image.png"></p>
<h3 id="3-Github-Actions-自动化部署-github-pages"><a href="#3-Github-Actions-自动化部署-github-pages" class="headerlink" title="3.Github Actions 自动化部署 github pages"></a>3.<a href="https://www.yuque.com/leader755/blog/bgwk8l" target="_blank" rel="noopener">Github Actions 自动化部署 github pages</a></h3><p>在博客源文件库中新建文件 <code>.github/workflows/deploy.yml</code>，配置内容如下：</p>
<h4 id="1-gt-准备-2-个-github-仓库"><a href="#1-gt-准备-2-个-github-仓库" class="headerlink" title="1&gt;准备 2 个 github 仓库"></a>1&gt;准备 2 个 github 仓库</h4><p>博客源文件库：<a href="https://github.com/Leader755/blog-master.git" target="_blank" rel="noopener">https://github.com/Leader755/blog-master.git</a><br>页面文件仓库：<a href="https://github.com/Leader755/leader755.github.io.git" target="_blank" rel="noopener">https://github.com/Leader755/leader755.github.io.git</a></p>
<h4 id="2-gt-为-github-仓库配置秘钥"><a href="#2-gt-为-github-仓库配置秘钥" class="headerlink" title="2&gt;为 github 仓库配置秘钥"></a>2&gt;为 github 仓库配置秘钥</h4><blockquote>
<p><strong>目的：源码仓库代码推送到 githubPage 仓库</strong></p>
</blockquote>
<ul>
<li>页面文件仓库（即 <a href="https://leader755.github.io/" target="_blank" rel="noopener">leader755.github.io</a>）:<ul>
<li>在 <code>**Settings &gt; Deploy keys**</code> 中添加 Deploy key，内容为 <code>**hexo-deploy-key.pub**</code> 文件内容，同时勾选 <code>**Allow write access**</code> 选项。</li>
</ul>
</li>
<li>博客源文件库：<ul>
<li>在 <code>**Settings &gt; Secrets**</code> 中添加一个 Secret，名称为 <code>**DEPLOY_KEY**</code>，内容为 <code>**hexo-deploy-key**</code> 文件内容。后续在 Workflow 中通过名称 <strong>DEPLOY_KEY</strong> 使用这个密钥。</li>
</ul>
</li>
</ul>
<h4 id="3-gt-工作流-Workflow-配置"><a href="#3-gt-工作流-Workflow-配置" class="headerlink" title="3&gt;工作流 Workflow 配置"></a>3&gt;工作流 Workflow 配置</h4><p>在博客源文件库中新建文件 <code>.github/workflows/deploy.yml</code>，配置内容如下：</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># workflow name</span>
name<span class="token punctuation">:</span> actions single

<span class="token comment" spellcheck="true"># 当有 push 到仓库和外部触发的时候就运行</span>
on<span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> repository_dispatch<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># YQ_TOKEN</span>
<span class="token comment" spellcheck="true"># YUQUE_GIT_HEXO</span>
jobs<span class="token punctuation">:</span>
  deploy<span class="token punctuation">:</span>
    name<span class="token punctuation">:</span> Deploy Hexo Public To Pages
    runs<span class="token operator">-</span>on<span class="token punctuation">:</span> ubuntu<span class="token operator">-</span>latest
    env<span class="token punctuation">:</span>
      TZ<span class="token punctuation">:</span> Asia<span class="token operator">/</span>Shanghai

    steps<span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># check it to your workflow can access it</span>
    <span class="token comment" spellcheck="true"># from: https://github.com/actions/checkout</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Checkout Repository master branch
      uses<span class="token punctuation">:</span> actions<span class="token operator">/</span>checkout@master

    <span class="token comment" spellcheck="true"># from: https://github.com/actions/setup-node</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Setup Node<span class="token punctuation">.</span>js <span class="token number">10.</span>x
      uses<span class="token punctuation">:</span> actions<span class="token operator">/</span>setup<span class="token operator">-</span>node@master
      <span class="token keyword">with</span><span class="token punctuation">:</span>
        node<span class="token operator">-</span>version<span class="token punctuation">:</span> <span class="token string">"10.x"</span>

    <span class="token comment" spellcheck="true">#安装依赖(包含yuque-hexo，此处无需安装) from https://github.com/x-cold/yuque-hexo</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Install dependencies
      run<span class="token punctuation">:</span> <span class="token operator">|</span>
        npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g
        npm install yuque<span class="token operator">-</span>hexo <span class="token operator">-</span>g
        npm install

    <span class="token comment" spellcheck="true"># 此处请勿使用hexo clean&amp;&amp;yuque-hexo（重新构建时无需此命令行）同步语雀文章</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> yuque<span class="token operator">-</span>hexo sync
      env<span class="token punctuation">:</span>
        YUQUE_TOKEN<span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span>YUQUE_TOKEN_HEXO_SYNC_GITHUB_ONLINE<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># from: 这里是YUQUE_TOKEN: $不能随意改</span>
      run<span class="token punctuation">:</span> <span class="token operator">|</span>
        hexo clean
        yuque<span class="token operator">-</span>hexo sync <span class="token operator">|</span><span class="token operator">|</span> yuque<span class="token operator">-</span>hexo sync <span class="token operator">|</span><span class="token operator">|</span> yuque<span class="token operator">-</span>hexo sync  <span class="token comment" spellcheck="true"># 用 || 来重试的次数</span>


    <span class="token comment" spellcheck="true"># 生成可访问的文档</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> hexo generate
      run<span class="token punctuation">:</span> <span class="token operator">|</span>
        hexo g

    <span class="token comment" spellcheck="true"># 生成pages且推送到文件仓库 from https://github.com/peaceiris/actions-gh-pages</span>
    <span class="token operator">-</span> name<span class="token punctuation">:</span> Deploy hexo to Github pages
      uses<span class="token punctuation">:</span> peaceiris<span class="token operator">/</span>actions<span class="token operator">-</span>gh<span class="token operator">-</span>pages@v3
      <span class="token keyword">with</span><span class="token punctuation">:</span>
        deploy_key<span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets<span class="token punctuation">.</span>YUQUE_GIT_HEXO <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 此处为 hexo-deploy-key</span>
        external_repository<span class="token punctuation">:</span> Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io
        publish_branch<span class="token punctuation">:</span> master
        publish_dir<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span>public
        commit_message<span class="token punctuation">:</span>  deploy githubPage
        <span class="token comment" spellcheck="true"># commit_message: ${{ github.event.head_commit.message }}</span></code></pre>
<blockquote>
<p>利用 GitHub Actions 实现博客自动发布，将静态博客页面部署到多个服务器上，比如 GitHub Pages、Gitee pages 、云服务器上。</p>
</blockquote>
<h3 id="4-jenkins-的自动化部署"><a href="#4-jenkins-的自动化部署" class="headerlink" title="4.jenkins 的自动化部署"></a>4.jenkins 的自动化部署</h3><ul>
<li><a href="https://www.yuque.com/leader755/blog/slfxnw" target="_blank" rel="noopener">在 CentOS7 上搭建 Jenkins</a></li>
<li><a href="https://www.yuque.com/leader755/blog/vx9gsg" target="_blank" rel="noopener">Github 的 jenkins 的自动化部署</a></li>
<li><a href="https://www.yuque.com/leader755/blog/eswt7t" target="_blank" rel="noopener">Gitee 的 jenkins 的自动化部署</a></li>
</ul>
<h4 id="1-gt-搭建-jenkins"><a href="#1-gt-搭建-jenkins" class="headerlink" title="1&gt;搭建 jenkins"></a>1&gt;搭建 jenkins</h4><ul>
<li><strong>yum 安装</strong></li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token operator">//</span>yum安装 （yum的repos中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum repos<span class="token punctuation">)</span>
<span class="token number">1</span><span class="token operator">></span>cd <span class="token operator">~</span> <span class="token operator">//</span>回到主目录进行安装 jenkins
<span class="token number">2</span><span class="token operator">></span>sudo wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>repo https<span class="token punctuation">:</span><span class="token operator">//</span>pkg<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>redhat<span class="token operator">-</span>stable<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>repo
<span class="token number">3</span><span class="token operator">></span>sudo rpm <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">import</span> https<span class="token punctuation">:</span><span class="token operator">//</span>pkg<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>redhat<span class="token operator">-</span>stable<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>io<span class="token punctuation">.</span>key
<span class="token number">4</span><span class="token operator">></span>yum install jenkins <span class="token operator">//</span> 安装jenkins<span class="token punctuation">(</span>稳定版<span class="token punctuation">)</span></code></pre>
<ul>
<li><strong>修改用户为 root（为了不因为权限出现各种问题，这里直接使用 root）</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> vim <span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>jenkins
<span class="token number">2</span><span class="token operator">></span>修改其中的<span class="token number">2</span>处为（防止权限问题）
   JENKINS_USER<span class="token operator">=</span><span class="token string">"root"</span>
   JENKINS_PORT<span class="token operator">=</span><span class="token string">"8081"</span>
<span class="token number">3</span><span class="token operator">></span>查看到 jenkins根目录是 <span class="token string">"/var/lib/jenkins"</span></code></pre>
<ul>
<li><strong>启动 jenkins 服务（默认端口是 8080，目前已经修改为 8081）</strong></li>
</ul>
<pre class=" language-python"><code class="language-python">  <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start jenkins.service  //启动 jenkins 服务</span>
  <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chkconfig jenkins on  //将Jenkins服务设置为开机启动</span>
  <span class="token number">3</span><span class="token operator">></span>web访问页面<span class="token punctuation">:</span>   ip<span class="token operator">+</span>端口

  <span class="token comment" spellcheck="true">#jenkins启动/停止/重启</span>
  service jenkins start<span class="token operator">/</span>stop<span class="token operator">/</span>restart

  <span class="token comment" spellcheck="true">#重载服务（由于前面修改了Jenkins启动脚本）</span>
    sudo systemctl daemon<span class="token operator">-</span>reload

  <span class="token comment" spellcheck="true">#查看 jenkins 信息</span>
  ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep jenkins
</code></pre>
<h4 id="2-gt-github-的-jenkins-自动化部署"><a href="#2-gt-github-的-jenkins-自动化部署" class="headerlink" title="2&gt;github 的 jenkins 自动化部署"></a>2&gt;github 的 jenkins 自动化部署</h4><ul>
<li>创建一个空白项目</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646403860015-61adf3dc-7645-4b72-942d-ab0a159efb70.png#clientId=u4fb840f5-313a-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=404&id=u2f6f6395&margin=%5Bobject%20Object%5D&name=image.png&originHeight=808&originWidth=1500&originalType=binary&ratio=1&rotation=0&showTitle=false&size=176298&status=done&style=none&taskId=u1ff08f30-1f41-478b-bc63-0b97541befa&title=&width=750" alt="image.png"></p>
<ul>
<li>General 设置</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606051576608-6cc8989d-1206-4cf1-8535-01f5e183db41.png#crop=0&crop=0&crop=1&crop=1&height=690&id=gbgYZ&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1380&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=209155&status=done&style=none&title=&width=1278" alt="image.png"></p>
<ul>
<li>构建触发器，勾选 GitHub hook trigger for GITScm polling 即可</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606052327987-e91ac2b0-a7da-49c6-bb08-1c12b4068c59.png#crop=0&crop=0&crop=1&crop=1&height=263&id=bGMqz&margin=%5Bobject%20Object%5D&name=image.png&originHeight=526&originWidth=2178&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71026&status=done&style=none&title=&width=1089" alt="image.png"></p>
<ul>
<li>设置超时的处理，解决 jenkins git timeout，设置时间为 60 分钟。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606054780964-8808d4cd-cfa7-41e2-bf69-eab4f3bfa862.png#crop=0&crop=0&crop=1&crop=1&height=445&id=VJGND&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=182896&status=done&style=none&title=&width=1278" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606054616609-57c9bbb6-7697-4271-a12d-88901d115e03.png#crop=0&crop=0&crop=1&crop=1&height=598&id=YmelV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1196&originWidth=2272&originalType=binary&ratio=1&rotation=0&showTitle=false&size=196033&status=done&style=none&title=&width=1136" alt="image.png"></p>
<ul>
<li>github 设置代码变动自动触发构建<ul>
<li><strong>github 设置 GitHub webhooks（具体需要持续集成的项目），新建或者设置现有项目的 webhooks 选项，url：部署的服务器的 IP + 端口 + github-webhook</strong></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1646407550026-c37091d2-aaf9-445d-bd33-b4edc21c805c.png#clientId=u283f59f9-e4c8-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=787&id=ua95552e8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1574&originWidth=2252&originalType=binary&ratio=1&rotation=0&showTitle=false&size=389221&status=done&style=none&taskId=u008884d5-27c4-4d18-9b13-cfe3b42d4ec&title=&width=1126" alt="image.png"></p>
<p>-</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>自动化</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS7上搭建Jenkins</title>
    <url>/leader755/2040.html</url>
    <content><![CDATA[<h2 id="1-安装-Jenkins："><a href="#1-安装-Jenkins：" class="headerlink" title="1. 安装 Jenkins："></a>1. 安装 Jenkins：</h2><p><strong>安装 Jenkins 稳定版（注意不要使用最新版，不稳定）</strong></p>
<h3 id="1-gt-通过-yum-安装及其卸载"><a href="#1-gt-通过-yum-安装及其卸载" class="headerlink" title="1&gt;通过 yum 安装及其卸载"></a>1&gt;通过 yum 安装及其卸载</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//yum安装 （yum的repos中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum repos)</span>
<span class="token number">1</span><span class="token operator">></span>cd <span class="token operator">~</span> <span class="token comment" spellcheck="true">//回到主目录进行安装 jenkins</span>
<span class="token number">2</span><span class="token operator">></span>sudo wget <span class="token operator">-</span>O <span class="token regex">/etc/yum</span><span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>repo https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>redhat<span class="token operator">-</span>stable<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>repo
<span class="token number">3</span><span class="token operator">></span>sudo rpm <span class="token operator">--</span><span class="token keyword">import</span> https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>redhat<span class="token operator">-</span>stable<span class="token operator">/</span>jenkins<span class="token punctuation">.</span>io<span class="token punctuation">.</span>key
<span class="token number">4</span><span class="token operator">></span>yum install jenkins <span class="token comment" spellcheck="true">// 安装jenkins(稳定版)</span>

<span class="token comment" spellcheck="true">//yum卸载</span>
<span class="token number">1</span><span class="token operator">></span>service jenkins stop
<span class="token number">2</span><span class="token operator">></span>yum clean all
<span class="token number">3</span><span class="token operator">></span>yum <span class="token operator">-</span>y remove jenkins
</code></pre>
<h3 id="2-gt-卸载-yum-方式安装的-jenkins（默认安装主目录是在-var-lib-jenkins-）"><a href="#2-gt-卸载-yum-方式安装的-jenkins（默认安装主目录是在-var-lib-jenkins-）" class="headerlink" title="2&gt;卸载 yum 方式安装的 jenkins（默认安装主目录是在/var/lib/jenkins/）"></a>2&gt;卸载 yum 方式安装的 jenkins（默认安装主目录是在/var/lib/jenkins/）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span>先停止运行 jenkisn
service jenkins stop

<span class="token number">2</span><span class="token operator">></span>移除文件
yum clean all
yum <span class="token operator">-</span>y remove jenkins

<span class="token number">3</span><span class="token operator">></span>手动删除jenkins配置文件（<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>）</code></pre>
<p>###</p>
<h3 id="3-gt-直接下载-rpm-安装"><a href="#3-gt-直接下载-rpm-安装" class="headerlink" title="3&gt;直接下载 rpm 安装"></a>3&gt;直接下载 rpm 安装</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//rpm安装（各个版本地址 https://pkg.jenkins.io/）</span>
<span class="token number">1</span><span class="token operator">></span>wget https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>pkg<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>redhat<span class="token operator">/</span>jenkins<span class="token number">-2.156</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm
<span class="token number">2</span><span class="token operator">></span>rpm <span class="token operator">-</span>ivh jenkins<span class="token number">-2.156</span><span class="token operator">-</span><span class="token number">1.1</span><span class="token punctuation">.</span>noarch<span class="token punctuation">.</span>rpm

<span class="token comment" spellcheck="true">//卸载rpm方式安装的jenkins</span>
<span class="token number">1</span><span class="token operator">></span>rpm <span class="token operator">-</span>ql jenkins
<span class="token number">2</span><span class="token operator">></span>rpm <span class="token operator">-</span>ql jenkins  <span class="token comment" spellcheck="true">//检查是否卸载成功：</span>
<span class="token number">3</span><span class="token operator">></span>find <span class="token operator">/</span> <span class="token operator">-</span>iname jenkins <span class="token operator">|</span> xargs <span class="token operator">-</span>n <span class="token number">1000</span> rm <span class="token operator">-</span>rf  <span class="token comment" spellcheck="true">//彻底删除残留文件</span></code></pre>
<p>###</p>
<p>###</p>
<h3 id="4-gt-配置-jenkins-权限"><a href="#4-gt-配置-jenkins-权限" class="headerlink" title="4&gt;配置 jenkins 权限"></a>4&gt;配置 jenkins 权限</h3><ul>
<li><strong>修改用户为 root（为了不因为权限出现各种问题，这里直接使用 root）</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> vim <span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>jenkins
<span class="token number">2</span><span class="token operator">></span>修改其中的<span class="token number">2</span>处为（防止权限问题）
   JENKINS_USER<span class="token operator">=</span><span class="token string">"root"</span>
   JENKINS_PORT<span class="token operator">=</span><span class="token string">"8081"</span>
<span class="token number">3</span><span class="token operator">></span>查看到 jenkins根目录是 <span class="token string">"/var/lib/jenkins"</span></code></pre>
<ul>
<li><strong>修改目录权限</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> chown <span class="token operator">-</span>R root<span class="token punctuation">:</span>root <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins
<span class="token number">2</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> chown <span class="token operator">-</span>R root<span class="token punctuation">:</span>root <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>cache<span class="token operator">/</span>jenkins
<span class="token number">3</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> chown <span class="token operator">-</span>R root<span class="token punctuation">:</span>root <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>log<span class="token operator">/</span>jenkins</code></pre>
<ul>
<li><strong>为 jenkins 添加 java 安装路径</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span> vim <span class="token operator">/</span>etc<span class="token operator">/</span>init<span class="token punctuation">.</span>d<span class="token operator">/</span>jenkins
<span class="token number">2</span><span class="token operator">></span>找到以下
   candidates<span class="token operator">=</span>"
    <span class="token operator">/</span>etc<span class="token operator">/</span>alternatives<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>jre<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-11.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>jre<span class="token number">-11.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-11</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>amd64
    <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>java
     "
 <span class="token number">3</span><span class="token operator">></span>在 “<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>java” 前面添加一行：
   <span class="token operator">/</span>usr<span class="token operator">/</span>java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_102<span class="token operator">/</span>bin<span class="token operator">/</span>java  （ 就你的java安装路径  ）

 <span class="token number">4</span><span class="token operator">></span>最终如下<span class="token punctuation">:</span>
   candidates<span class="token operator">=</span>"
    <span class="token operator">/</span>etc<span class="token operator">/</span>alternatives<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>jre<span class="token number">-1.8</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-11.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>jre<span class="token number">-11.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>java
    <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>jvm<span class="token operator">/</span>java<span class="token number">-11</span><span class="token operator">-</span>openjdk<span class="token operator">-</span>amd64
    <span class="token operator">/</span>usr<span class="token operator">/</span>java<span class="token operator">/</span>jdk1<span class="token number">.8</span><span class="token punctuation">.</span>0_102<span class="token operator">/</span>bin<span class="token operator">/</span>java #新添加的
    <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>java
     "</code></pre>
<h3 id="5-gt-启动-jenkins-服务（默认端口是-8080，目前已经修改为-8081）"><a href="#5-gt-启动-jenkins-服务（默认端口是-8080，目前已经修改为-8081）" class="headerlink" title="5&gt;启动 jenkins 服务（默认端口是 8080，目前已经修改为 8081）"></a>5&gt;启动 jenkins 服务（默认端口是 8080，目前已经修改为 8081）</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token number">1</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># systemctl start jenkins<span class="token punctuation">.</span>service  <span class="token comment" spellcheck="true">//启动 jenkins 服务</span>
  <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">[</span>root@localhost <span class="token operator">~</span><span class="token punctuation">]</span># chkconfig jenkins on  <span class="token comment" spellcheck="true">//将Jenkins服务设置为开机启动</span>
  <span class="token number">3</span><span class="token operator">></span>web访问页面<span class="token punctuation">:</span>   ip<span class="token operator">+</span>端口

  #jenkins启动<span class="token operator">/</span>停止<span class="token operator">/</span>重启
  service jenkins start<span class="token operator">/</span>stop<span class="token operator">/</span>restart

  #重载服务（由于前面修改了Jenkins启动脚本）
    sudo systemctl daemon<span class="token operator">-</span>reload

  #查看 jenkins 信息
  ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep jenkins

</code></pre>
<h2 id="2-首次进入-jenkins-的基本配置"><a href="#2-首次进入-jenkins-的基本配置" class="headerlink" title="2.首次进入 jenkins 的基本配置"></a>2.首次进入 jenkins 的基本配置</h2><h3 id="1-首次进入-Jenkins-需要输入管理员密码，使用以下命令在-xshell-查看初始密码："><a href="#1-首次进入-Jenkins-需要输入管理员密码，使用以下命令在-xshell-查看初始密码：" class="headerlink" title="1.首次进入 Jenkins 需要输入管理员密码，使用以下命令在 xshell 查看初始密码："></a>1.首次进入 Jenkins 需要输入管理员密码，使用以下命令在 xshell 查看初始密码：</h3><pre class=" language-javascript"><code class="language-javascript"> cat <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>jenkins<span class="token operator">/</span>secrets<span class="token operator">/</span>initialAdminPassword</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606044243973-bd75a837-3e16-40fd-8b1d-d87184b7a1e1.png#crop=0&crop=0&crop=1&crop=1&height=361&id=e54f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=622&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87633&status=done&style=none&title=&width=574" alt="image.png"></p>
<blockquote>
<p>注意：可能会出现权限不够的提示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620148616485-c1b60ad9-2f91-45ba-83f1-5470d82ea3f6.png#clientId=u027f9086-1089-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=42&id=fO6dc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=84&originWidth=1072&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20175&status=done&style=none&taskId=ua8b74177-8237-4e14-b4df-c51ce1b9ea9&title=&width=536" alt="image.png"><br>解决办法：配置权限，按照上面安装 jenkins 中的 第三点** <strong>[</strong>配置 jenkins 权限（点我直达）**](<a href="https://www.yuque.com/pxs/fo1e8s/aed00c02-7c81-41d0-961b-6ea527dec51f#gFsHl)重新操作一遍或者检查下哪一步骤遗漏了。" target="_blank" rel="noopener">https://www.yuque.com/pxs/fo1e8s/aed00c02-7c81-41d0-961b-6ea527dec51f#gFsHl)重新操作一遍或者检查下哪一步骤遗漏了。</a></p>
</blockquote>
<h3 id="2-设置配置的访问-pluginManager-advanced（解决插件下载慢）"><a href="#2-设置配置的访问-pluginManager-advanced（解决插件下载慢）" class="headerlink" title="2.设置配置的访问/pluginManager/advanced（解决插件下载慢）"></a>2.设置配置的访问/pluginManager/advanced（解决插件下载慢）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先不要急着安装插件，在国内用户都能遇到下载插件慢的问题</span>
<span class="token number">1</span><span class="token operator">></span> ip<span class="token operator">+</span> 端口<span class="token operator">/</span>pluginManager<span class="token operator">/</span>advanced，进入系统配置
<span class="token number">2</span><span class="token operator">></span>将https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>updates<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>update<span class="token operator">-</span>center<span class="token punctuation">.</span>json
  改为http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>updates<span class="token punctuation">.</span>jenkins<span class="token punctuation">.</span>io<span class="token operator">/</span>update<span class="token operator">-</span>center<span class="token punctuation">.</span>json  <span class="token comment" spellcheck="true">//改为 http</span>
  或者http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>mirror<span class="token punctuation">.</span>xmission<span class="token punctuation">.</span>com<span class="token operator">/</span>jenkins<span class="token operator">/</span>updates<span class="token operator">/</span>update<span class="token operator">-</span>center<span class="token punctuation">.</span>json  <span class="token comment" spellcheck="true">//改为镜像</span>
  <span class="token number">2</span> 者选择一个就可以了</code></pre>
<h3 id="3-解决页面-403-问题"><a href="#3-解决页面-403-问题" class="headerlink" title="3.解决页面 403 问题"></a>3.解决页面 403 问题</h3><blockquote>
<p>1&gt;ip+ 端口/configureSecurity/，进入系统配置<br>2&gt;去配置页面的允许跨域</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620181612160-9800c3db-c955-49ac-80ff-f910772f9f03.png#clientId=u027f9086-1089-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=537&id=u6f745595&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1074&originWidth=2868&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153822&status=done&style=none&taskId=u0922823f-da93-4119-acc4-aae93058f42&title=&width=1434" alt="image.png"></p>
<h3 id="4-返回到最初的页面配置插件，进行安装"><a href="#4-返回到最初的页面配置插件，进行安装" class="headerlink" title="4.返回到最初的页面配置插件，进行安装"></a>4.返回到最初的页面配置插件，进行安装</h3><p>注意最好选择默认的安装方式，如果比较熟悉了可以选择自行选择插件安装，静待安装完成。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620181715510-e0253ed4-a63c-4693-b4f3-af16318e938c.png#clientId=u027f9086-1089-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=755&id=u579be651&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1510&originWidth=2044&originalType=binary&ratio=1&rotation=0&showTitle=false&size=300206&status=done&style=none&taskId=ua49be6eb-4b8b-4d51-9e9f-908300cf032&title=&width=1022" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1620181801678-a50f7b51-8405-4b6e-a80d-adfc04142506.png#clientId=u027f9086-1089-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=687&id=ufa4f4757&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1374&originWidth=1992&originalType=binary&ratio=1&rotation=0&showTitle=false&size=202292&status=done&style=none&taskId=u8f6229b3-261d-4260-8846-083f77555ef&title=&width=996" alt="image.png"></p>
<h3 id="5-安装完插件后，设置用户登录账户和密码"><a href="#5-安装完插件后，设置用户登录账户和密码" class="headerlink" title="5.安装完插件后，设置用户登录账户和密码"></a>5.安装完插件后，设置用户登录账户和密码</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606044620530-a1bc007c-7531-4184-8eda-7297033eaab6.png#crop=0&crop=0&crop=1&crop=1&height=635&id=nf7F7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1270&originWidth=2006&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105553&status=done&style=none&title=&width=1003" alt="image.png"></p>
<h3 id="6-汉化-jenkins"><a href="#6-汉化-jenkins" class="headerlink" title="6.汉化 jenkins"></a>6.汉化 jenkins</h3><p>1&gt;在 jenkins 面板–》Manage Plugins ，搜索 local，下载如下图的 3 个插件。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606045044944-b7b0499a-a7e8-492e-a507-41fd967b2a34.png#crop=0&crop=0&crop=1&crop=1&height=682&id=aQ94W&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1364&originWidth=2558&originalType=binary&ratio=1&rotation=0&showTitle=false&size=280750&status=done&style=none&title=&width=1279" alt="image.png"></p>
<p>2&gt;在 jenkins 面板–》 Configuration System ，找到 lcoal 项，输入 zh_CN，并勾选上。保存后即可看到汉化了（没有汉化的需要重启 jenkins）。</p>
<pre class=" language-javascript"><code class="language-javascript">重启：ip<span class="token operator">+</span>端口号<span class="token operator">/</span>restart</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606045466353-ae8ace11-b552-4358-b7b8-aa0e617876ac.png#crop=0&crop=0&crop=1&crop=1&height=683&id=Eypv8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1366&originWidth=2560&originalType=binary&ratio=1&rotation=0&showTitle=false&size=193821&status=done&style=none&title=&width=1280" alt="image.png"></p>
<p>#</p>
<h2 id="3-jenkins-配置邮箱（选配）"><a href="#3-jenkins-配置邮箱（选配）" class="headerlink" title="3.jenkins 配置邮箱（选配）"></a>3.jenkins 配置邮箱（选配）</h2><p>最好使用 163 邮箱，qq 邮箱限制比较大。</p>
<ul>
<li>① 配置系统设置</li>
<li>② 邮箱 smtp 开通和密码获取</li>
<li>③ 项目构建配置</li>
</ul>
<h3 id="1-配置系统设置"><a href="#1-配置系统设置" class="headerlink" title="1.配置系统设置"></a>1.配置系统设置</h3><p>1&gt;进入设置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606049376995-4e26a3c6-623b-4de0-a92a-d4bde4e45ba2.png#crop=0&crop=0&crop=1&crop=1&height=395&id=B1mJ2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=789&originWidth=1600&originalType=binary&ratio=1&rotation=0&showTitle=false&size=135649&status=done&style=none&title=&width=800" alt="image.png"><br>2&gt;配置监控<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606049283664-fbd9c717-3dfd-4ff2-98c3-6b3b79dbda34.png#crop=0&crop=0&crop=1&crop=1&height=683&id=od1e5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1366&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=198860&status=done&style=none&title=&width=1278" alt="image.png"><br>3&gt;配置邮件通知，然后测试下邮箱可不可以收到，查看自己的邮箱。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606050027158-46c9558e-d0c8-41b0-b2f4-18c1cd24aff5.png#crop=0&crop=0&crop=1&crop=1&height=688&id=ux1BS&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1376&originWidth=2558&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195435&status=done&style=none&title=&width=1279" alt="image.png"></p>
<h3 id="2-gt-配置-Extended-E-mail-Notification"><a href="#2-gt-配置-Extended-E-mail-Notification" class="headerlink" title="2&gt;配置  Extended E-mail Notification"></a>2&gt;配置  Extended E-mail Notification</h3><blockquote>
<p>基本配置同上面，注意 在邮件通知上面有个  <strong>Triggers</strong>  的设置，可以设置邮件发送条件。常用的三个：<br><strong>always</strong>  是只要构建完就会发送。<br><strong>success</strong>  是成功就发送。<br><strong>failed-any</strong>  是只要构建失败就发送。<br>注：这个里的  <strong>triggers</strong>  还没发现实际用处，可以不配，后面项目里的才是关键。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606050531905-f72947a0-1bf7-46aa-adc8-2754cc299038.png#crop=0&crop=0&crop=1&crop=1&height=1899&id=MgX4V&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3798&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=521924&status=done&style=none&title=&width=1278" alt="image.png"></p>
<h3 id="3-gt-项目中邮件配置"><a href="#3-gt-项目中邮件配置" class="headerlink" title="3&gt;项目中邮件配置"></a>3&gt;项目中邮件配置</h3><p>这里主要配置两个地方就可以了。<br>进入我们要配置邮箱的项目。<br>1&gt;增加一个构建后操作步骤。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606055280761-4bedbe67-87a4-4390-8900-565f68b69402.png#crop=0&crop=0&crop=1&crop=1&height=687&id=SVRNV&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1374&originWidth=2556&originalType=binary&ratio=1&rotation=0&showTitle=false&size=226392&status=done&style=none&title=&width=1278" alt="image.png"><br>2&gt;邮件接收人和邮件内容配置<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1606056472299-e0ae3771-1ce2-4bff-a69b-665231a52b75.png#crop=0&crop=0&crop=1&crop=1&height=1317&id=Q1ysE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=2634&originWidth=2558&originalType=binary&ratio=1&rotation=0&showTitle=false&size=460895&status=done&style=none&title=&width=1279" alt="image.png"></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序开发知识必备-自定义组件</title>
    <url>/leader755/31772.html</url>
    <content><![CDATA[<h2 id="1-认识自定义组件的属性、数据、方法和生命周期。"><a href="#1-认识自定义组件的属性、数据、方法和生命周期。" class="headerlink" title="1.认识自定义组件的属性、数据、方法和生命周期。"></a>1.认识自定义组件的属性、数据、方法和生命周期。</h2><h3 id="1-gt-自定义组件的属性、数据、方法"><a href="#1-gt-自定义组件的属性、数据、方法" class="headerlink" title="1&gt;自定义组件的属性、数据、方法"></a>1&gt;自定义组件的属性、数据、方法</h3><blockquote>
<ul>
<li>【properties】：自定义组件的对外属性，是属性名到属性设置的映射表，属性设置中可包含三个字段， type 表示属性类型（可以是 String，Boolean，Array）、 value 表示属性初始值、 observer 表示属性值被更改时的响应函数。</li>
<li>【data】: 组件的内部数据，和 properties 一同用于组件的模版渲染。</li>
<li>【methods】: 组件的方法，包括事件响应函数和任意的自定义方法</li>
</ul>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//1.组件的需要渲染的数据</span>
  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//属性值可以在组件使用时指定</span>
    isShow<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>
      value<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// 这里是一些组件内部数据</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isValue<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//页面方法</span>
    <span class="token function">preventTouchMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">closeModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//获取组件内data的数据</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>isValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">//获取渲染的properties的数据</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>isValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<ul>
<li>methods 中获取数据，</li>
<li>一种是获取 data 里的数据： this.data.属性名；</li>
<li>一种是获取 properties 中的属性值： this.properties.属性名。</li>
</ul>
</blockquote>
<h3 id="2-gt-自定义组件的生命周期"><a href="#2-gt-自定义组件的生命周期" class="headerlink" title="2&gt;自定义组件的生命周期"></a>2&gt;自定义组件的生命周期</h3><blockquote>
<ul>
<li><code>created</code>：在组件实例进入页面节点树时执行，注意此时不能调用 <code>setData</code></li>
<li><code>attached</code>：在组件实例进入页面节点树时执行， this.data  已被初始化为组件的当前值，绝大多数初始化工作可以在这个时机进行。</li>
<li><code>ready</code>：在组件布局完成后执行，此时可以获取节点信息（使用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdevelopers.weixin.qq.com%2Fminiprogram%2Fdev%2Fapi%2Fwxml-nodes-info.html" target="_blank" rel="noopener">SelectorQuery</a>）</li>
<li><code>moved</code>：在组件实例被移动到节点树另一个位置时执行。</li>
<li><code>detached</code>：在组件实例被从页面节点树移除时执行。</li>
</ul>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 组件生命周期函数，在组件实例进入页面节点树时执行，</span>
    <span class="token comment" spellcheck="true">//注意此时不能调用setData</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 >> created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  attached<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 组件生命周期函数，在组件实例进入页面节点树时执行。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 >> attached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ready<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在组件布局完成后执行，此时可以获取节点信息</span>
    <span class="token comment" spellcheck="true">// (组件生命周期函数-在组件布局完成后执行)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 >> ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  moved<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在组件实例被移动到节点树另一个位置时执行</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 >> moved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  detached<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 在组件实例被从页面节点树移除时执行</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 >> detached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  lifetimes<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 组件生命周期声明对象，将组件的生命周期收归到该字段进行声明///，</span>
    <span class="token comment" spellcheck="true">//原有声明方式仍旧有效，如同时存在两种声明方式</span>
    <span class="token comment" spellcheck="true">// ，则lifetimes字段内声明方式优先级最高</span>
    created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 lifetimes >> created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    attached<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 lifetimes >> attached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ready<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 lifetimes >> ready"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    moved<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 lifetimes >> moved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    detached<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 lifetimes >> detached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  pageLifetimes<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 组件所在页面的生命周期声明对象，</span>
    <span class="token comment" spellcheck="true">//目前仅支持页面的show和hide两个生命周期</span>
    show<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 pageLifetimes >> Show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    hide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Component-1 pageLifetimes >> Hide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="2-小程序页面生命周期函数"><a href="#2-小程序页面生命周期函数" class="headerlink" title="2.小程序页面生命周期函数"></a>2.小程序页面生命周期函数</h2><h3 id="1-gt-小程序生命周期-App-js"><a href="#1-gt-小程序生命周期-App-js" class="headerlink" title="1&gt;小程序生命周期 App.js"></a>1&gt;小程序生命周期 App.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

  <span class="token comment" spellcheck="true">/**
   * 当小程序初始化完成时，会触发 onLaunch（全局只触发一次）
   */</span>
  onLaunch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">var</span> userInfo <span class="token operator">=</span> wx<span class="token punctuation">.</span><span class="token function">getStorageSync</span><span class="token punctuation">(</span><span class="token string">'userInfo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>userInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> userInfo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token function">onShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onShow监听小程序显示'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token function">onHide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'onLaunch监听小程序隐藏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<p>###</p>
<h3 id="2-gt-小程序生命周期-xxx-js（非-App-js）"><a href="#2-gt-小程序生命周期-xxx-js（非-App-js）" class="headerlink" title="2&gt;  小程序生命周期 xxx.js（非 App.js）"></a>2&gt;  小程序生命周期 xxx.js（非 App.js）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生命周期函数--监听页面加载</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onLoad"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onReady<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生命周期函数--监听页面初次渲染完成</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onReady"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生命周期函数--监听页面显示</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onShow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生命周期函数--监听页面隐藏</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onHide"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onUnload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 生命周期函数--监听页面卸载</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onUnload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onPullDownRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 页面相关事件处理函数--监听用户下拉动作</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onPullDownRefresh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  onReachBottom<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">// 页面上拉触底事件的处理函数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"onReachBottom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">/**
   * 用户点击右上角分享
   */</span>
  onShareAppMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-gt-生命周期图示"><a href="#3-gt-生命周期图示" class="headerlink" title="3&gt;生命周期图示"></a>3&gt;生命周期图示</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608699054219-928d8741-a4bd-423d-8e92-1e63afaeb670.png#height=332&id=OOFyM&originHeight=477&originWidth=233&originalType=binary&size=0&status=done&style=none&width=162" alt="">)<img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1608698964925-2de17335-a3df-4cfd-b956-9fdf99b97bdb.png#height=307&id=vmWhY&originHeight=386&originWidth=634&originalType=binary&size=0&status=done&style=none&width=504" alt=""></p>
<hr>
<blockquote>
<ol>
<li><strong>小程序注册完成后，加载页面，触发 onLoad 方法，一个页面只会调用一次（刚加载时调用一次）；</strong></li>
<li><strong>页面载入后触发 onShow 方法，显示页面，每次打开页面都会调用一次 （只要展示这个页面，就会自动加载）；</strong></li>
<li><strong>首次显示页面，会触发 onReady 方法，渲染页面和样式，一个页面只会调用一次（刚加载时调用一次）；</strong></li>
<li><strong>当小程序后台运行或跳转（wx.navigateTo）到其他页面时，触发 onHide 方法；</strong></li>
<li><strong>当小程序从后台进入前台运行或重新载入页面时，触发 onShow 方法；</strong></li>
<li><strong>当小程序使用 wx.readirectTo()、关闭当前页和返回上一页 wx.navigateBack(),会触发 onUnload</strong></li>
</ol>
</blockquote>
<h4 id="1-小程序"><a href="#1-小程序" class="headerlink" title="1.小程序"></a>1.小程序</h4><ul>
<li><strong>页面加载顺序是先加载 onLoad，再是 onShow，最后 onReady</strong></li>
</ul>
<h4 id="2-原生-JS"><a href="#2-原生-JS" class="headerlink" title="2.原生 JS"></a>2.原生 JS</h4><ul>
<li>document.ready 表示文档结构加载完成（不包含图片等非文字媒体文件）；ready 如果定义多个，都会按渲染顺序执行。</li>
<li>window.onload 包含图片等在内的所有元素都加载完成。但是，onload 不管定义多少个，只执行一个（最后一个）</li>
<li><strong>加载顺序是先加载 ready，后 onload，正好和小程序相反</strong></li>
</ul>
<h4 id="3-Jquery"><a href="#3-Jquery" class="headerlink" title="3.Jquery"></a>3.Jquery</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
简写为
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="3-小程序组件的使用"><a href="#3-小程序组件的使用" class="headerlink" title="3.小程序组件的使用"></a>3.小程序组件的使用</h2><h4 id="父组件："><a href="#父组件：" class="headerlink" title="父组件："></a>父组件：</h4><p>index.json</p>
<pre class=" language-html"><code class="language-html">{ "usingComponents": { "v-select": "/component/select/select" } }</code></pre>
<blockquote>
<p><code>注意事项:</code><br>v-select 是你定义的组件的名称，后面的是组件所在的位置。 <code>/</code> 单斜杠表示根目录，是绝对路径。<br>如果控制台报错，出现没找到路径的情况，一定是自己填写的路径不对，认真检查路径代码。</p>
</blockquote>
<p>index.wxml</p>
<pre class=" language-html"><code class="language-html">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-select</span> <span class="token attr-name">select-array</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{selectArray}}<span class="token punctuation">'</span></span>  <span class="token attr-name"><span class="token namespace">bind:</span>getNowData</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>getCurrentTextAction<span class="token punctuation">'</span></span>  <span class="token attr-name">current-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{current_text}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-elect</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<ul>
<li>1.select-array 是我在组件中自定义的属性名，这个是和组件所在的 js 中 properties 中的属性是对应的。在 properties 定义的属性中，属性名采用驼峰写法<code>例如：selectArray</code>。在引入组件的 wxml 中，指定属性值时则对应使用连字符写法<code>例如：select-array=&#39;，selectArray为select组件中所需展示的数据源</code>。</li>
<li>2.这里 getNowData 是自定义的子组件需要触发的事件名，getNowData 是引入组件的页面需要获取传过来的数据的自定义的事件名。</li>
</ul>
</blockquote>
<p>index.js</p>
<pre class=" language-javascript"><code class="language-javascript">
<span class="token function">getCurrentTextAction</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">let</span> item <span class="token operator">=</span> e<span class="token punctuation">.</span>detail<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      current_text<span class="token punctuation">:</span> item<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      current_type<span class="token punctuation">:</span> item<span class="token punctuation">.</span>type
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<h4 id="子组件："><a href="#子组件：" class="headerlink" title="子组件："></a>子组件：</h4><p>在 component 文件目录下，创建一个 select 文件夹，随后 select 文件夹下手动创建：select.js、select.json、select.wxml、select.wxss 四个文件。</p>
<p>select.json</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"component"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span></code></pre>
<p>select.wxml</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>section-select-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select-content<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectToggleAction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select-text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{currentText}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>image</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select-img<span class="token punctuation">"</span></span>
      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../../images/icon_arrow_down.png<span class="token punctuation">"</span></span>
      <span class="token attr-name">animation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{arrowAnimation}}<span class="token punctuation">"</span></span>
    <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>image</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select-list<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{isShow}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>select-list-item<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{selectArray}}<span class="token punctuation">"</span></span>
      <span class="token attr-name">data-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span>
      <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{index}}<span class="token punctuation">"</span></span>
      <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectItemAction<span class="token punctuation">"</span></span>
      <span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span>
    <span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre>
<p>select.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/**
 1. 组件的需要渲染的数据
   */</span>
  properties<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    selectArray<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> Array<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">// 初始时要展示的内容</span>
    currentText<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment" spellcheck="true">/**
 2. 是组件的内部数据
   */</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 初始option不显示</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token comment" spellcheck="true">/**
 3. 组件的方法列表
   */</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//option的显示与否</span>
    selectToggleAction<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 获取当前option显示的状态</span>
      <span class="token keyword">var</span> nowShow <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>isShow<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>nowShow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        isShow<span class="token punctuation">:</span> <span class="token operator">!</span>nowShow<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//设置内容</span>
    selectItemAction<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 当前option的数据是引入组件的页面传过来的，所以这里获取数据只有通过this.properties</span>
      <span class="token keyword">var</span> nowData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span>selectArray<span class="token punctuation">;</span>
      <span class="token keyword">var</span> index <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>index<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前点击的索引</span>
      <span class="token keyword">var</span> current_text <span class="token operator">=</span> nowData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前点击的内容</span>
      <span class="token keyword">var</span> current_type <span class="token operator">=</span> nowData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前点击的内容</span>

      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        isShow<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        current_text<span class="token punctuation">:</span> current_text<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 内容更新后，需要把更新的数据传输出去</span>
      <span class="token keyword">var</span> nowDate <span class="token operator">=</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">:</span> index<span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> current_text<span class="token punctuation">,</span>
        type<span class="token punctuation">:</span> current_type<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// 这里的 getNowData 要和外部的 bind:getNowData ，名称一定要对应</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">"getNowData"</span><span class="token punctuation">,</span> nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h4><pre class=" language-html"><code class="language-html">//父组件传值
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>v-select</span> <span class="token attr-name">select-array</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>{{selectArray}}<span class="token punctuation">'</span></span> <span class="token attr-name">current-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{current_text}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>v-elect</span><span class="token punctuation">></span></span>

//子组件接收使用properties接收
 properties: {
    selectArray: {
      type: Array,
    }
  }</code></pre>
<h4 id="传事件"><a href="#传事件" class="headerlink" title="传事件"></a>传事件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//子组件给父组件传递值（通过方法传值）</span>
<span class="token comment" spellcheck="true">// 这里的 getNowData 要和外部的 bind:getNowData ，名称一定要对应</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerEvent</span><span class="token punctuation">(</span><span class="token string">'getNowData'</span><span class="token punctuation">,</span> nowDate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//父组件</span>
<span class="token operator">&lt;</span>v<span class="token operator">-</span>select  bind<span class="token punctuation">:</span>getNowData<span class="token operator">=</span><span class="token string">'getCurrentTextAction'</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>v<span class="token operator">-</span>elect<span class="token operator">></span></code></pre>
<p>文章参考：<br><a href="https://www.cnblogs.com/xiao-apple36/p/12867092.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiao-apple36/p/12867092.html</a><br><a href="https://www.jianshu.com/p/1b83e00738a9" target="_blank" rel="noopener">https://www.jianshu.com/p/1b83e00738a9</a><br><a href="https://blog.csdn.net/qq_35872379/article/details/87935688" target="_blank" rel="noopener">https://blog.csdn.net/qq_35872379/article/details/87935688</a></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>小程序自定义组件</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包工具——charles</title>
    <url>/leader755/32104.html</url>
    <content><![CDATA[<h3 id="1-Charles-设置-Proxy-代理和-Proxy-SSL-代理"><a href="#1-Charles-设置-Proxy-代理和-Proxy-SSL-代理" class="headerlink" title="1.Charles 设置 Proxy 代理和 Proxy SSL 代理"></a>1.Charles 设置 Proxy 代理和 Proxy SSL 代理</h3><h4 id="1-gt-设置-Proxy-代理-http-抓包"><a href="#1-gt-设置-Proxy-代理-http-抓包" class="headerlink" title="1&gt;设置 Proxy 代理(http 抓包)"></a>1&gt;设置 Proxy 代理(http 抓包)</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627229545607-481c706b-466c-4ecf-aa89-b5a5aa79cc35.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=379&id=aEjwE&margin=%5Bobject%20Object%5D&name=image.png&originHeight=758&originWidth=1416&originalType=binary&ratio=1&rotation=0&showTitle=false&size=797029&status=done&style=none&taskId=u43e07a5b-1912-4d3e-b511-e6bdb423259&title=&width=708" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627229605749-17c86344-2361-4910-b50c-f02a1e2c6432.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=497&id=O7agk&margin=%5Bobject%20Object%5D&name=image.png&originHeight=994&originWidth=1166&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105196&status=done&style=none&taskId=u3eafe928-a536-447e-8ed4-e0417f548d1&title=&width=583" alt="image.png"></p>
<h4 id="2-gt-设置-Proxy-SSL-代理（https-抓包）"><a href="#2-gt-设置-Proxy-SSL-代理（https-抓包）" class="headerlink" title="2&gt;设置 Proxy SSL 代理（https 抓包）"></a>2&gt;设置 Proxy SSL 代理（https 抓包）</h4><p>Proxy -&gt; SSL Proxying Settings 勾选 Enable SSL Proxying,<br>Host : _ (使用通配符表示检测所有网络请求；建议还是设置单个需要抓取的 https host，尽量避免使用 _ 通配符)<br>Port：443<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627228721601-fff027d6-6ca8-45f5-a19f-4b6257b2dc5a.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=366&id=LPpvA&margin=%5Bobject%20Object%5D&name=image.png&originHeight=770&originWidth=1516&originalType=binary&ratio=1&rotation=0&showTitle=false&size=780354&status=done&style=none&taskId=u5e182495-0406-4da1-9422-b8e5f4874df&title=&width=721" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627228868321-45c48027-a718-4883-b373-2c11a659023b.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=324&id=XIfpv&margin=%5Bobject%20Object%5D&name=image.png&originHeight=836&originWidth=1862&originalType=binary&ratio=1&rotation=0&showTitle=false&size=346021&status=done&style=none&taskId=u6e31c514-a788-4f65-be04-f19ba9e76c0&title=&width=721" alt="image.png"></p>
<h3 id="2-Mac-安装证书"><a href="#2-Mac-安装证书" class="headerlink" title="2.Mac 安装证书"></a>2.Mac 安装证书</h3><p><strong>1..点击 帮助–&gt;ssl 代理–&gt;安装 Chalers Root 证书，</strong>此时电脑会下载一个证书，并且会弹出一个窗口，接下来你需要将该证书设置为信任。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627189973816-50a24730-26b4-4e00-95b6-537fd1763de8.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=510&id=u27fefd44&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1020&originWidth=1944&originalType=binary&ratio=1&rotation=0&showTitle=false&size=635250&status=done&style=none&taskId=u7c8653a0-38c5-4620-ba0f-6f80966db40&title=&width=972" alt="image.png"></p>
<p><strong>3.进入证书 mac 的证书列表，找到此 Charles 证书项。此时证书为不信任状态。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627190078432-d7fb9e9c-9be3-4fad-b060-e5eb46ec753d.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=241&id=u0e6a7a11&margin=%5Bobject%20Object%5D&name=image.png&originHeight=482&originWidth=1738&originalType=binary&ratio=1&rotation=0&showTitle=false&size=216951&status=done&style=none&taskId=u389c5547-8279-44b7-a823-1a3e5b82082&title=&width=869" alt="image.png"></p>
<p><strong>4.双击此证书打开，选择始终信任，该证书就显示为信任状态了。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627190628057-5122cb70-7a63-46b4-aaae-d8a8bd0d4746.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=429&id=u8e498474&margin=%5Bobject%20Object%5D&name=image.png&originHeight=858&originWidth=1664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=253405&status=done&style=none&taskId=ud0c4c721-1ff5-4e3c-9550-7c5c0b22d44&title=&width=832" alt="image.png"></p>
<p><strong>5.当你看到为此种状态时，本地证书的配置就大功告成了。</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627190776526-7bb059b3-ed38-49a9-8504-3987c159ae49.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=236&id=u3772bb9c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=472&originWidth=1744&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205046&status=done&style=none&taskId=u71ff152b-7db1-44b1-8af0-29e6c7f7ccd&title=&width=872" alt="image.png"></p>
<h3 id="3-windows-安装证书"><a href="#3-windows-安装证书" class="headerlink" title="3.windows 安装证书"></a>3.windows 安装证书</h3><p>1.安装证书，保存在本地计算机<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627232565534-4d623635-1a8f-4ddf-bfd5-5d559618e2d3.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=398&id=ub1088be4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=666&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=113544&status=done&style=none&taskId=u37ea3b52-cd92-4b0b-a341-8297d6fbf77&title=&width=286.5" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627232639166-b188d9a1-749b-4fe3-8c9f-cbdcaa013429.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=399&id=u9cf13c22&margin=%5Bobject%20Object%5D&name=image.png&originHeight=639&originWidth=618&originalType=binary&ratio=1&rotation=0&showTitle=false&size=111061&status=done&style=none&taskId=u7c7e07f4-b042-4a41-93f5-1e0dd18a4af&title=&width=386" alt="image.png"></p>
<p>2&gt;将证书安装在“受信任的根证书颁发机构”，这步很重要, 最后提示导入成功，出现如上述证书信息显示说明证书安装成功。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627232614882-282bf330-64c3-4f66-acc5-7e21b6303ce3.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=305&id=u95cedc30&margin=%5Bobject%20Object%5D&name=image.png&originHeight=651&originWidth=1011&originalType=binary&ratio=1&rotation=0&showTitle=false&size=185400&status=done&style=none&taskId=u4a2de29e-3bde-4669-8cd3-708a59f15f6&title=&width=473.5" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627232658082-c137a75e-114a-41ed-8c3d-1b81d0169113.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=299&id=u917c274f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=680&originWidth=532&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69344&status=done&style=none&taskId=u1627a6fc-b9c8-4394-bb05-4f35ec70099&title=&width=234" alt="image.png"></p>
<h3 id="3-移动设备进行抓包"><a href="#3-移动设备进行抓包" class="headerlink" title="3.移动设备进行抓包"></a>3.移动设备进行抓包</h3><blockquote>
<p><strong>注意保证移动设备和电脑属于同一局域网</strong></p>
</blockquote>
<h4 id="1-点击-帮助–-gt-ssl-代理–-gt-在移动设备上安装证书，会弹出一个框按照要求执行。"><a href="#1-点击-帮助–-gt-ssl-代理–-gt-在移动设备上安装证书，会弹出一个框按照要求执行。" class="headerlink" title="1.点击 帮助–&gt;ssl 代理–&gt;在移动设备上安装证书，会弹出一个框按照要求执行。"></a>1.点击 帮助–&gt;ssl 代理–&gt;在移动设备上安装证书，会弹出一个框按照要求执行。</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627191327123-f7d9191f-7363-407f-a143-356b9d7a8d13.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=431&id=u2ee98961&margin=%5Bobject%20Object%5D&name=image.png&originHeight=862&originWidth=2552&originalType=binary&ratio=1&rotation=0&showTitle=false&size=674434&status=done&style=none&taskId=uce64f1fe-1f29-4a80-9830-0139beac38d&title=&width=1276" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627191432235-725ae740-8fd9-48d6-a9b9-8e6864689c99.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=208&id=u4dd44f3e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=416&originWidth=1822&originalType=binary&ratio=1&rotation=0&showTitle=false&size=227049&status=done&style=none&taskId=uc1754886-0fdc-4052-a4b8-88f9e7e42f2&title=&width=911" alt="image.png"></p>
<h4 id="2-手机端-Wi-Fi-添加代理"><a href="#2-手机端-Wi-Fi-添加代理" class="headerlink" title="2.手机端 Wi-Fi 添加代理"></a>2.手机端 Wi-Fi 添加代理</h4><blockquote>
<p>选择当前 wifi，并且进入其属性，点击配置代理，改为手动，服务器和端口号选择 charles 中给出的配置，并保存。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627226876277-2ef8aa54-c64c-4670-9484-4263eb8fd636.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=531&id=ub195a1e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1062&originWidth=2128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=420167&status=done&style=none&taskId=ud276f516-953b-40d1-a20d-486279828c9&title=&width=1064" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627228199591-86076552-3ddc-4bd4-8771-62f770351144.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=174&id=MVzlg&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=1238&originalType=binary&ratio=1&rotation=0&showTitle=false&size=156836&status=done&style=none&taskId=ub326f203-4f69-4bb7-9497-e5cb7e81f24&title=&width=619" alt="image.png"></p>
<h4 id="3-ios-安装证书"><a href="#3-ios-安装证书" class="headerlink" title="3.ios 安装证书"></a>3.ios 安装证书</h4><p>浏览网址： chls.pro/ssl 下载，设置-&gt;通用-&gt;描述文件-&gt;安装 Charles 文件。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627227925233-edd10aa0-5ef1-4978-936d-f473162fe494.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=496&id=uaa1247d9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=992&originWidth=2030&originalType=binary&ratio=1&rotation=0&showTitle=false&size=328094&status=done&style=none&taskId=u29b54589-4aeb-4d90-8c96-d8612b80e2e&title=&width=1015" alt="image.png"></p>
<p>在 iOS10 及更高版本中您必须进入”设置” &gt; 通用 &gt; 关于 &gt; 证书信任设置并启用 Charles 证书。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627228082559-5f337915-ab85-4c71-9302-3a5a7fc2977f.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=503&id=u325f4862&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1006&originWidth=2034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=312965&status=done&style=none&taskId=u81e33058-01d8-4c69-b09e-05b9a2e8404&title=&width=1017" alt="image.png"></p>
<h4 id="4-Android-安装证书"><a href="#4-Android-安装证书" class="headerlink" title="4.Android 安装证书"></a>4.Android 安装证书</h4><p>再次进入手机设置，点击“更多设置-&gt;系统安全-&gt;从存储设备安装-&gt;Download-&gt;.crt 文件-&gt;确定”，在弹出窗，对证书命名为：Charles，点击确定（首次安装证书会让输入锁屏密码）。至此证书安装成功！立即在电脑端对手机网络进行抓包吧！</p>
<h3 id="5-开启-Charles-录制-抓包必须开启"><a href="#5-开启-Charles-录制-抓包必须开启" class="headerlink" title="5.开启 Charles 录制(抓包必须开启)"></a>5.开启 Charles 录制(抓包必须开启)</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627232037619-ae86985f-5e8c-4bd3-9507-b223f8b895b4.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=534&id=u367d6fea&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1068&originWidth=2864&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201295&status=done&style=none&taskId=u43ddd399-916f-4e17-a646-ca99c2db3fc&title=&width=1432" alt="image.png"></h3><h3 id="5-答疑解惑"><a href="#5-答疑解惑" class="headerlink" title="5.答疑解惑"></a>5.答疑解惑</h3><h3 id="1-gt-charles-基本功能使用"><a href="#1-gt-charles-基本功能使用" class="headerlink" title="1&gt;charles 基本功能使用"></a>1&gt;charles 基本功能使用</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627233794443-3cff60ac-6b93-4de1-a383-04c52b1da849.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=316&id=u75db13ab&margin=%5Bobject%20Object%5D&name=image.png&originHeight=632&originWidth=2652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191600&status=done&style=none&taskId=u24c6c3ee-ffc8-4026-ade1-50983746de7&title=&width=1326" alt="image.png"></p>
<h3 id="2-gt-抓包-HTTPS-接口显示-unknown（图左），设置后接口正常展示，如下图右"><a href="#2-gt-抓包-HTTPS-接口显示-unknown（图左），设置后接口正常展示，如下图右" class="headerlink" title="2&gt;抓包 HTTPS 接口显示 unknown（图左），设置后接口正常展示，如下图右"></a>2&gt;抓包 HTTPS 接口显示 unknown（图左），设置后接口正常展示，如下图右</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627231906352-b15cf180-f47f-459c-920c-df12209cd7e9.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=170&id=ua7fcbb36&margin=%5Bobject%20Object%5D&name=image.png&originHeight=630&originWidth=2880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154106&status=done&style=none&taskId=uf0307735-1d2a-4e89-b7a2-5b24ec753ee&title=&width=777" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1627231973634-22d208c4-a7eb-4763-966f-cbb8f0e4da2e.png#clientId=u6d147196-b939-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=198&id=u12b51111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=396&originWidth=1732&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81832&status=done&style=none&taskId=u5521b14d-ba1b-4547-9b5c-9632742632d&title=&width=866" alt="image.png"></p>
<p><strong>a.安装 charles 根证书，设置为始终信任</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1642049940157-e7a97481-7865-48f7-a511-9ce102165294.png#clientId=ufdb2b666-ed15-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3d166e79&margin=%5Bobject%20Object%5D&name=image.png&originHeight=589&originWidth=700&originalType=url&ratio=1&rotation=0&showTitle=false&size=261331&status=done&style=none&taskId=uc8646bff-e268-4c31-a890-d712b7f9625&title=" alt="image.png"></p>
<p><strong>b.设置 Proxy Settings，采用默认设置即可</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1642049940077-efe589ad-92e2-45c9-bbf8-7a11c89be7f3.png#clientId=ufdb2b666-ed15-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub5631015&margin=%5Bobject%20Object%5D&name=image.png&originHeight=597&originWidth=700&originalType=url&ratio=1&rotation=0&showTitle=false&size=143601&status=done&style=none&taskId=uc0782c18-9a5d-4c8d-939d-4ce52be87df&title=" alt="image.png"></p>
<p><strong>c.设置 Charles 的 SSL Proxying Settings，添加所有的域名，这一步一定要有，否则就算信任了证书也全都是 unknown</strong></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1642049940103-c1a5bbda-7e97-4703-893e-8cdd8752bc16.png#clientId=ufdb2b666-ed15-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u3fbbdb51&margin=%5Bobject%20Object%5D&name=image.png&originHeight=523&originWidth=700&originalType=url&ratio=1&rotation=0&showTitle=false&size=164735&status=done&style=none&taskId=u849b1779-7964-4d55-8794-6632fff35f4&title=" alt="image.png"></p>
<p><strong>d.设置成功后就可以抓去 https 的流量了</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/241787/1642049940561-79f170cc-7441-4437-bbd0-75027a21b604.png#clientId=ufdb2b666-ed15-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0e9f73f1&margin=%5Bobject%20Object%5D&name=image.png&originHeight=409&originWidth=700&originalType=url&ratio=1&rotation=0&showTitle=false&size=217167&status=done&style=none&taskId=ueb55dab1-a9b9-4d5d-9f5f-51519b0a6b2&title=" alt="image.png"></p>
<p>###</p>
]]></content>
      <categories>
        <category>charles</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>6.hexo插件篇（必看）</title>
    <url>/leader755/40372.html</url>
    <content><![CDATA[<h2 id="1-gt-安装插件说明"><a href="#1-gt-安装插件说明" class="headerlink" title="1&gt;安装插件说明"></a>1&gt;安装插件说明</h2><p>如果应用官网的主题你会发现，有可能出现打不开的情况，这是由于有些主题使用的插件，本地并没有安装导致的报错。所以本篇文章为补充说明篇。（无问题的可以跳过）</p>
<h2 id="2-gt-常用的插件"><a href="#2-gt-常用的插件" class="headerlink" title="2&gt;常用的插件"></a>2&gt;常用的插件</h2><h3 id="代码高亮（建议安装）"><a href="#代码高亮（建议安装）" class="headerlink" title="代码高亮（建议安装）"></a>代码高亮（建议安装）</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">-</span>S hexo<span class="token operator">-</span>prism<span class="token operator">-</span>plugin</code></pre>
<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>
<pre class=" language-javascript"><code class="language-javascript">highlight<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">false</span>
  line_number<span class="token punctuation">:</span> <span class="token boolean">true</span>
  auto_detect<span class="token punctuation">:</span> <span class="token boolean">false</span>
  tab_replace<span class="token punctuation">:</span> <span class="token boolean">false</span>
  wrap<span class="token punctuation">:</span> <span class="token boolean">true</span>
  hljs<span class="token punctuation">:</span> <span class="token boolean">false</span>

prism_plugin<span class="token punctuation">:</span>
  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    # realtime<span class="token operator">/</span>preprocess
  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>
  line_number<span class="token punctuation">:</span> <span class="token boolean">false</span>    # <span class="token keyword">default</span> <span class="token boolean">false</span>
  custom_css<span class="token punctuation">:</span></code></pre>
<h3 id="搜索（建议安装）"><a href="#搜索（建议安装）" class="headerlink" title="搜索（建议安装）"></a>搜索（建议安装）</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
field<span class="token punctuation">:</span> post<span class="token punctuation">;</span></code></pre>
<p>###</p>
<h3 id="文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）"><a href="#文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）" class="headerlink" title="文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）"></a>文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>wordcount</code></pre>
<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：<br>(此处注意源文档的 postInfo 是错的，应该为 post_wordcount)</p>
<pre class=" language-javascript"><code class="language-javascript">post_wordcount<span class="token punctuation">:</span>
  date<span class="token punctuation">:</span> <span class="token boolean">true</span> # 发布日期
  update<span class="token punctuation">:</span> <span class="token boolean">true</span> # 更新日期
  wordCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章字数统计
  totalCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 站点总文章字数
  min2read<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读时长
  readCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读次数</code></pre>
<h3 id="添加代码压缩（建议安装）"><a href="#添加代码压缩（建议安装）" class="headerlink" title="添加代码压缩（建议安装）"></a>添加代码压缩（建议安装）</h3><p><a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a>插件实现压缩代码，底层是通过 gulp 来实现的。但是这个插件是有 Bug 的：</p>
<ul>
<li>压缩 md 文件会使 markdown 语法的代码块消失</li>
<li>会删除全角空格</li>
</ul>
<p>在博客站点根目录执行安装代码：</p>
<pre><code>npm install hexo-neat --save</code></pre><p>紧接着在站点根目录下的配置文件添加如下代码：</p>
<pre><code>neat_enable: true
neat_html:
  enable: true
  exclude:
neat_css:
  enable: true
  exclude:
    - &#39;*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;*.min.js&#39;</code></pre><p>然后直接 hexo cl&amp;&amp;hexo g 就可以了，会自动压缩文件 。<br>补充：为了解决以上 Bug，对于<code>halo</code>主题（其他主题自行解决）需要将以上默认配置修改为：</p>
<pre><code>#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）
neat_enable: true
neat_html:
  enable: true
  exclude:
    - &#39;**/*.md&#39;
neat_css:
  enable: true
  exclude:
    - &#39;**/*.min.css&#39;
neat_js:
  enable: true
  mangle: true
  output:
  compress:
  exclude:
    - &#39;**/*.min.js&#39;
    - &#39;**/**/instantpage.js&#39;
    - &#39;**/matery.js&#39;</code></pre><p>###</p>
<h3 id="外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）"><a href="#外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）"></a>外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）</h3><blockquote>
<p><a href="https://github.com/hvnobug/hexo-external-link" target="_blank" rel="noopener">hexo-external-link</a>是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置<code>target=’_blank’</code>, <code>rel=’external nofollow noopener noreferrer’</code>告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p>
</blockquote>
<p>安装:</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>external<span class="token operator">-</span>link <span class="token operator">--</span>save</code></pre>
<p>配置插件 在 Hexo 根目录的_config.yml 文件中添加如下配置。</p>
<pre class=" language-javascript"><code class="language-javascript">hexo_external_link<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  enable_base64_encode<span class="token punctuation">:</span> <span class="token boolean">true</span>
  url_param_name<span class="token punctuation">:</span> <span class="token string">'u'</span>
  html_file_name<span class="token punctuation">:</span> <span class="token string">'go.html'</span>
  target_blank<span class="token punctuation">:</span> <span class="token boolean">true</span>
  link_rel<span class="token punctuation">:</span> <span class="token string">'external nofollow noopener noreferrer'</span>
  domain<span class="token punctuation">:</span> <span class="token string">'your_domain'</span> # 如果开启了防盗链
  safety_chain<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre>
<ul>
<li>enable：是否开启 hexo_external_link 插件 - 默认 false</li>
<li>enable_base64_encode：是否对跳转 url 使用 base64 编码 - 默认 fasle</li>
<li>url_param_name：url 参数名,在跳转到外链传递给 html_file_name 的参数名 - 默认 ‘u’</li>
<li>html_file_name：跳转到外链的页面文件路径 - 默认 ‘go.html’</li>
<li>target_blank：是否为外链的 a 标签添加 target=’_blank’ - 默认 true</li>
<li>link_rel：设置外链的 a 标签的 rel 属性 - 默认 ‘external nofollow noopener noreferrer’</li>
<li>domain：如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li>
<li>safety_chain：go.html 为了防止外链盗用 对域名进行的判断 - 默认 false 即关闭防盗链</li>
</ul>
<p>###</p>
<h3 id="添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）"></a>添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>feed <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">feed<span class="token punctuation">:</span> type<span class="token punctuation">:</span> atom<span class="token punctuation">;</span>
path<span class="token punctuation">:</span> atom<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>
limit<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span>
hub<span class="token punctuation">:</span> content<span class="token punctuation">:</span> content_limit<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">;</span>
content_limit_delim<span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
order_by<span class="token punctuation">:</span> <span class="token operator">-</span>date<span class="token punctuation">;</span></code></pre>
<h3 id="添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）"></a>添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 的 Hexo 插件来做 <code>Sitemap</code>，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>sitemap <span class="token operator">--</span>save</code></pre>
<p>访问地址：/sitemap.xml</p>
<h3 id="中文链接转拼音（可选安装）"><a href="#中文链接转拼音（可选安装）" class="headerlink" title="中文链接转拼音（可选安装）"></a>中文链接转拼音（可选安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>这里为可选安装，因为我希望使用<code>urlname</code>进行连接访问，中文链接转拼音由一个缺点就是当文章名字过长会显示十分臃肿。<code>urlname</code>的方式见下文。<br>安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span></code></pre>
<blockquote>
<p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>
</blockquote>
<p>###</p>
<p>###</p>
<h3 id="添加-emoji-表情支持（可选安装）"><a href="#添加-emoji-表情支持（可选安装）" class="headerlink" title="添加 emoji 表情支持（可选安装）"></a>添加 emoji 表情支持（可选安装）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>filter<span class="token operator">-</span>github<span class="token operator">-</span>emojis <span class="token operator">--</span>save</code></pre>
<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>
<pre class=" language-javascript"><code class="language-javascript">githubEmojis<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  className<span class="token punctuation">:</span> github<span class="token operator">-</span>emoji
  inject<span class="token punctuation">:</span> <span class="token boolean">true</span>
  styles<span class="token punctuation">:</span>
  customEmojis<span class="token punctuation">:</span></code></pre>
<h3 id="deploy-发布插件（可选安装）（部署到-github-需要安装）"><a href="#deploy-发布插件（可选安装）（部署到-github-需要安装）" class="headerlink" title="deploy 发布插件（可选安装）（部署到 github 需要安装）"></a>deploy 发布插件（可选安装）（部署到 github 需要安装）</h3><p>如果你想通过<code>deploy</code>的方式进行推送<code>public文件夹</code>到托管网站，你需要安装</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<p>当然你也可以选择不装，使用 Github Actions、docker 等方式<br>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>
<h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>
<h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ej``s</code> 文件中，包括站点、使用的主题、访问量等。</p>
<h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre>
<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>
<ul>
<li>Facebook: <code>fab fa-facebook</code></li>
<li>Twitter: <code>fab fa-twitter</code></li>
<li>Google-plus: <code>fab fa-google-plus</code></li>
<li>Linkedin: <code>fab fa-linkedin</code></li>
<li>Tumblr: <code>fab fa-tumblr</code></li>
<li>Medium: <code>fab fa-medium</code></li>
<li>Slack: <code>fab fa-slack</code></li>
<li>Sina Weibo: <code>fab fa-weibo</code></li>
<li>Wechat: <code>fab fa-weixin</code></li>
<li>QQ: <code>fab fa-qq</code></li>
<li>Zhihu: <code>fab fa-zhihu</code><blockquote>
<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>
</blockquote>
</li>
</ul>
<h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>
<h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。<br>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>
    artist<span class="token punctuation">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>
    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>
    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p>
</blockquote>
<p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p>
<h1 id="是否在首页显示音乐"><a href="#是否在首页显示音乐" class="headerlink" title="是否在首页显示音乐."></a>是否在首页显示音乐.</h1><pre class=" language-javascript"><code class="language-javascript"># 是否在首页显示音乐<span class="token punctuation">.</span>
music<span class="token punctuation">:</span>
  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>
  showTitle<span class="token punctuation">:</span> <span class="token boolean">false</span>
  title<span class="token punctuation">:</span> 听听音乐
  fixed<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否开启吸底模式
  autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否自动播放
  theme<span class="token punctuation">:</span> <span class="token string">'#42b983'</span>
  loop<span class="token punctuation">:</span> <span class="token string">'all'</span> # 音频循环播放<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'none'</span>
  order<span class="token punctuation">:</span> <span class="token string">'list'</span> # 音频循环顺序<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'random'</span>
  preload<span class="token punctuation">:</span> <span class="token string">'auto'</span> # 预加载，可选值<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span> <span class="token string">'metadata'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span>
  volume<span class="token punctuation">:</span> <span class="token number">0.7</span> # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效
  listFolded<span class="token punctuation">:</span> <span class="token boolean">false</span> # 列表默认折叠
  listMaxHeight<span class="token punctuation">:</span> # 列表最大高度</code></pre>
<h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><ol>
<li><strong>直接将<code>themes/halo/config/scaffolds</code>内所有内容拷贝到**</strong><code>Hexo</code>根目录下*<strong>*的<code>scaffolds</code>文件夹内替换</strong></li>
<li>或者自己重新修改，修改请参考下面</li>
</ol>
<h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 、<code>urlname</code> 和 <code>date</code> 的值。</p>
<table>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td><code>Markdown</code> 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 <code>_config.yml</code> 中的 <code>author</code></td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td><code>featureImages</code> 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>[http://xxx.com/xxx.jpg](http://xxx.com/xxx.jpg)</code></td>
</tr>
<tr>
<td>top</td>
<td><code>true</code></td>
<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>
</tr>
<tr>
<td>cover</td>
<td><code>false</code></td>
<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>
</tr>
<tr>
<td>urlname</td>
<td>index</td>
<td>文章访问路径，需要在<code>Hexo</code>根目录下<code>_config.yml</code>文件中使用<code>permalink: :urlname/</code>和<code>permalink_defaults:</code></td>
</tr>
<tr>
<td><code>urlname: index</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>toc</td>
<td><code>true</code></td>
<td>permalink_defaults:是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td><code>false</code></td>
<td>urlname: index 是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
<tr>
<td>keywords</td>
<td>文章标题</td>
<td>文章关键字，SEO 时需要</td>
</tr>
<tr>
<td>reprintPolicy</td>
<td>cc_by</td>
<td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意</strong>:</p>
<ol>
<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>
<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>
<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li>
<li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li>
</ol>
</blockquote>
<p>以下为文章的 <code>Front-matter</code> 示例。</p>
<h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>
<ul>
<li>菜单</li>
<li>我的梦想</li>
<li>首页的音乐播放器和视频播放器配置</li>
<li>是否显示推荐文章名称和按钮配置</li>
<li><code>favicon</code> 和 <code>Logo</code></li>
<li>个人信息</li>
<li>TOC 目录</li>
<li>文章打赏信息</li>
<li>复制文章内容时追加版权信息</li>
<li>MathJax</li>
<li>文章字数统计、阅读时长</li>
<li>点击页面的’爱心’效果</li>
<li>我的项目</li>
<li>我的技能</li>
<li>我的相册</li>
<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>
<li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>
<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>
</ul>
<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>
<h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span>
<span class="token punctuation">.</span>bg<span class="token operator">-</span>color <span class="token punctuation">{</span>
    background<span class="token operator">-</span>image<span class="token punctuation">:</span> linear<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">,</span> #0f9d58 <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

@<span class="token operator">-</span>webkit<span class="token operator">-</span>keyframes rainbow <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
<span class="token punctuation">}</span>

@keyframes rainbow <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span>
<span class="token punctuation">}</span></code></pre>
<p>/</p>
<h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>
  <span class="token string">"background-image"</span><span class="token punctuation">,</span>
  <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>
<h3 id="修改文章访问路径-urlname"><a href="#修改文章访问路径-urlname" class="headerlink" title="修改文章访问路径 urlname"></a>修改文章访问路径 urlname</h3><p>在<code>Hexo</code>根目录<code>_config.yaml</code>中添加以下配置</p>
<pre><code># permalink: :year/:month/:day/:title/
permalink: :urlname/
permalink_defaults:
  urlname: index</code></pre><p>##</p>
<h3 id="全站-CDN"><a href="#全站-CDN" class="headerlink" title="全站 CDN"></a>全站 CDN</h3><blockquote>
<p>CDN 的全称是<code>Content Delivery Network</code>，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。——百度百科</p>
</blockquote>
<p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用。</p>
<p>用法：<br><a href="https://cdn.jsdelivr.net/gh/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/</a>你的用户名/你的仓库名@发布的版本号/文件路径</p>
<p>如：<br><a href="http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/" target="_blank" rel="noopener">http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/</a>12.jpg<br>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，如果需要版本，请创建<code>releases</code>然后按照格式添加<br>当然最直接的办法就是使用 <code>username/username.github.io/</code></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>vue通信-组件传值</title>
    <url>/leader755/37560.html</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>1&gt;在介绍组件传值之前先明确三种组件关系：父子组件、兄弟组件、无关系组件。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1618494684099-7a3e6abf-2cfd-487b-8f3f-ebbc486a16e0.png#clientId=u61c9fd98-4143-4&from=paste&height=282&id=u6c55617f&margin=%5Bobject%20Object%5D&originHeight=282&originWidth=353&originalType=url&status=done&style=none&taskId=u3a4ddea2-6c4c-4183-b961-c5d8c23d1bd&width=353" alt=""><br>如上图所示：</p>
<ol>
<li>父子关系：A 和 B、B 和 C、B 和 D 都是父子关系；</li>
<li>兄弟关系：C 和 D 是兄弟关系，</li>
<li>无关系：A 和 C、A 和 D 是隔代关系（可能隔多代）。</li>
</ol>
<p><strong>2.常见使用场景可以分为三类：</strong></p>
<ul>
<li><strong>父子组件通信:</strong> props/$emit；ref ； $parent/$children；provide/inject ；$attrs/$listeners</li>
<li>*<em>兄弟组件通信: *</em>eventBus ; vuex</li>
<li>*<em>跨级通信: *</em>eventBus；Vuex；本地传值；provide/inject ；$attrs/$listeners；</li>
</ul>
<h2 id="一、props-emit"><a href="#一、props-emit" class="headerlink" title="一、props / $emit"></a>一、props / $emit</h2><blockquote>
<p>父组件通过 props 的方式向子组件传递数据，而通过$emit  子组件可以向父组件通信。</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1618554158485-ad8c6f9d-5e42-41e2-9ea9-e9f6a4f6b6d9.png#clientId=uf8ffac8a-683a-4&from=paste&height=456&id=udf0c2ef9&margin=%5Bobject%20Object%5D&originHeight=515&originWidth=526&originalType=url&status=done&style=none&taskId=uaf95e67e-0a90-4a3e-afc8-5ce96d63a76&width=466" alt=""></p>
<h3 id="1-父传子（属性传值）必须掌握"><a href="#1-父传子（属性传值）必须掌握" class="headerlink" title="1.父传子（属性传值）必须掌握"></a>1.父传子（属性传值）必须掌握</h3><p>即父组件通过属性的方式向子组件传值，子组件通过 props 来接收。</p>
<p>父组件 parent：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childeren</span> <span class="token attr-name">:message</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>父组件给子组件传值了<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>childeren</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">import</span> <span class="token string">'children'</span> <span class="token keyword">from</span> <span class="token string">'./children.vue'</span> <span class="token comment" spellcheck="true">//引入子组件</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
     components<span class="token punctuation">:</span><span class="token punctuation">{</span>childeren<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//使用组件</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>子组件 children.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//props:[message], //简写</span>
    props<span class="token punctuation">:</span><span class="token punctuation">{</span>
        <span class="token string">'message'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>
            type<span class="token punctuation">:</span><span class="token string">'String'</span><span class="token punctuation">,</span>
          <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token string">''</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<blockquote>
<p>总结： prop 只可以从上一级组件传递到下一级组件（父子组件），即所谓的单向数据流。而且 prop 只读，不可被修改，所有修改都会失效并警告。</p>
</blockquote>
<h3 id="2-子传父（通过事件形式）必须掌握"><a href="#2-子传父（通过事件形式）必须掌握" class="headerlink" title="2. 子传父（通过事件形式）必须掌握"></a>2. 子传父（通过事件形式）必须掌握</h3><blockquote>
<p>子组件通过事件向父组件传值，子组件绑定一个事件，通过 this.$emit() 来触发</p>
</blockquote>
<p>子组件 children.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
     <span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token string">"childEvent"</span><span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
      <span class="token function">childEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'childEvent'</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>父组件 parent：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childeren</span> <span class="token attr-name">@childEvent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>childEvent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>childeren</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">
  <span class="token keyword">import</span> <span class="token string">'children'</span> <span class="token keyword">from</span> <span class="token string">'./children.vue'</span> <span class="token comment" spellcheck="true">//引入子组件</span>
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
     components<span class="token punctuation">:</span><span class="token punctuation">{</span>childeren<span class="token punctuation">}</span> <span class="token punctuation">,</span><span class="token comment" spellcheck="true">//使用组件</span>
     methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
          <span class="token function">childEvent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
       <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre>
<p>###</p>
<h3 id="3-父子数据同步-修饰符-sync"><a href="#3-父子数据同步-修饰符-sync" class="headerlink" title="3.父子数据同步(修饰符.sync)"></a>3.父子数据同步(修饰符.sync)</h3><h4 id="1-通过-emit-去同步子元素和父元素"><a href="#1-通过-emit-去同步子元素和父元素" class="headerlink" title="1.通过$emit()去同步子元素和父元素"></a>1.通过$emit()去同步子元素和父元素</h4><p>通过以上三种方式， 我想你应该能解决绝大多数父子组件通信的场景了，但让我们再仔细考虑一下上面的通信场景，就会发现<strong>它们还可能存在的问题：</strong><br><strong>从子组件向父组件传递数据时，父子组件中的数据仍不是每时每刻都同步的,</strong></p>
<p>但<strong>在某些特殊的需求场景下，我们可能会希望父子组件中的数据时刻保持同步</strong>， 这时候你可能会像下面这样做：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//这是父组件中的template:</span>
<span class="token operator">&lt;</span>son <span class="token punctuation">:</span>foo<span class="token operator">=</span><span class="token string">"bar"</span> v<span class="token operator">-</span>on<span class="token punctuation">:</span>update<span class="token operator">=</span><span class="token string">"val => bar = val"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span></code></pre>
<p>同时每当子组件中数据改变的时候,通过</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>把参数 newValue 传递给父组件 template 中监听函数中的”val”。然后通过</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>bar <span class="token operator">=</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>表达式 val =&gt; bar = val 意味着强制让父组件的数据等于子组件传递过来的数据</strong>， 这个时候，我们发现<strong>父子组件的地位是平等的。 父可以改变子（数据）， 子也可以改变父（数据）</strong></p>
<h4 id="2-通过-sync-实现数据双向绑定，-从而同步父子组件数据"><a href="#2-通过-sync-实现数据双向绑定，-从而同步父子组件数据" class="headerlink" title="2.通过 sync 实现数据双向绑定， 从而同步父子组件数据"></a>2.通过 sync 实现数据双向绑定， 从而同步父子组件数据</h4><p>parent.vue<br>父组件 :msg.sync=”fatherValue”</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>son <span class="token punctuation">:</span>msg<span class="token punctuation">.</span>sync<span class="token operator">=</span><span class="token string">"fatherValue"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>son<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">import</span> son <span class="token keyword">from</span> <span class="token string">'./son.vue'</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      fatherValue<span class="token punctuation">:</span> <span class="token string">''</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    son<span class="token punctuation">:</span> son
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>child.vue<br>子组件：this.$emit(‘update:msg’, this.msg))</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>p<span class="token operator">></span>智力： <span class="token punctuation">{</span><span class="token punctuation">{</span> wisdom <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"changeChild('msg')"</span><span class="token operator">></span>子组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>

<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  props<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    msg<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 父组件传递的值</span>
        type<span class="token punctuation">:</span>Number
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    changeChild <span class="token punctuation">(</span>dataName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`update:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>dataName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h2 id="二、兄弟组件传值（eventBus，vuex，本地传值）"><a href="#二、兄弟组件传值（eventBus，vuex，本地传值）" class="headerlink" title="二、兄弟组件传值（eventBus，vuex，本地传值）"></a>二、兄弟组件传值（eventBus，vuex，本地传值）</h2><blockquote>
<p>不同组件之间传值，通过 eventBus（小项目少页面用 eventBus，大项目多页面使用 vuex，简单的用本地传值）</p>
</blockquote>
<h3 id="1-eventBus（事件总线）必须掌握"><a href="#1-eventBus（事件总线）必须掌握" class="headerlink" title="1.eventBus（事件总线）必须掌握"></a>1.eventBus（事件总线）必须掌握</h3><blockquote>
<p>vue 中可以使用它来作为沟通桥梁的概念, 就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，包括父子、兄弟、跨级。<br>eventBus 也有不方便之处, 当项目较大,就容易造成难以维护的灾难。</p>
</blockquote>
<h4 id="1-gt-安装并在-main-js-中引用"><a href="#1-gt-安装并在-main-js-中引用" class="headerlink" title="1&gt;.安装并在 main.js 中引用"></a>1&gt;.安装并在 main.js 中引用</h4><pre class=" language-html"><code class="language-html">npm install vue-bus //main.js import VueBus from 'vue-bus' Vue.use(VueBus);</code></pre>
<h4 id="2-gt-使用"><a href="#2-gt-使用" class="headerlink" title="2&gt;.使用"></a>2&gt;.使用</h4><p>a.vue 分发事件的组件</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//分发事件的组件(传递方法和值)</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"changeEvent"</span><span class="token punctuation">,</span> <span class="token string">"测试传值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>b.vue 监听 a.vue 传递过来的事件和值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//监听的组件</span>
<span class="token comment" spellcheck="true">// ...</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'changeEvent'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取传递的参数并进行操作</span>
      <span class="token comment" spellcheck="true">//todo something</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment" spellcheck="true">// 清除事件监听</span>
beforeDestroy <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 最好在组件销毁前</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'changeEvent'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre>
<h4 id="3-gt-方法使用总结："><a href="#3-gt-方法使用总结：" class="headerlink" title="3&gt;.方法使用总结："></a>3&gt;.方法使用总结：</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//...</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'changeEvent'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
    <span class="token function">change</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//测试传值</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment" spellcheck="true">// 移除事件监听者</span>
beforeDestroy <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 最好在组件销毁前</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'changeEvent'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<h3 id="2-vuex（必须掌握）"><a href="#2-vuex（必须掌握）" class="headerlink" title="2.vuex（必须掌握）"></a>2.vuex（必须掌握）</h3><h4 id="1-gt-vuex-介绍："><a href="#1-gt-vuex-介绍：" class="headerlink" title="1&gt;vuex 介绍："></a>1&gt;vuex 介绍：</h4><blockquote>
<p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化.<br>Vuex 解决了多个视图依赖于同一状态和来自不同视图的行为需要变更同一状态的问题，将开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上</p>
</blockquote>
<h4 id="2-gt-vuex-的原理"><a href="#2-gt-vuex-的原理" class="headerlink" title="2&gt;vuex 的原理"></a>2&gt;vuex 的原理</h4><blockquote>
<p>Vuex 实现了一个单向数据流，在全局拥有一个 State 存放数据，当组件要更改 State 中的数据时，必须通过 Mutation 进行，Mutation 同时提供了订阅者模式供外部插件调用获取 State 数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走 Action，但 Action 也是无法直接修改 State 的，还是需要通过 Mutation 来修改 State 的数据。最后，根据 State 的变化，渲染到视图上。</p>
</blockquote>
<h4 id="3-gt-Vuex-各个模块"><a href="#3-gt-Vuex-各个模块" class="headerlink" title="3&gt; Vuex 各个模块"></a>3&gt; Vuex 各个模块</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/241787/1618554395655-b8217444-41c0-488c-aaa3-cf5b948f9e66.png#clientId=uf8ffac8a-683a-4&from=paste&height=464&id=zb0iG&margin=%5Bobject%20Object%5D&originHeight=464&originWidth=761&originalType=url&status=done&style=none&taskId=u08ad4ad2-7f9f-47cb-ab82-b7592dfdd85&width=761" alt=""></p>
<ul>
<li><strong>state：</strong>用于数据的存储，是 store 中的唯一数据源;</li>
<li><strong>getters：</strong>state 对象读取方法，如 vue 中的计算属性一样，常用于数据的筛选和多个数据的相关性计算；</li>
<li><strong>mutations：</strong>状态改变操作方法，改变 state 数据的唯一途径，只能进行同步操作，且方法名只能全局唯一；<ul>
<li>由 actions 中的 commit(‘mutation 名称’)来触发。</li>
<li>commit<strong>：</strong>状态改变提交操作方法。对 mutation 进行提交，是唯一能执行 mutation 的方法。</li>
<li>Vue Components：Vue 组件。HTML 页面上，负责接收用户操作等交互行为，执行 dispatch 方法触发对应 action 进行回应。</li>
</ul>
</li>
<li><strong>actions：</strong>操作行为处理模块,，用于触发 mutation 调用，间接更新 state，包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发；<ul>
<li>由组件中的$store.dispatch(‘action 名称’, data1)来触发。然后由 commit()来触发 mutation 的调用 , 间接更新 state。该模块提供了 Promise 的封装，以支持 action 的链式触发。</li>
<li>dispatch<strong>：</strong>操作行为触发方法，是唯一能执行 action 的方法。</li>
</ul>
</li>
<li><strong>modules：</strong>类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护。</li>
</ul>
<h4 id="3-gt-应用"><a href="#3-gt-应用" class="headerlink" title="3&gt;应用"></a>3&gt;应用</h4><p>3.1 安装 vuex</p>
<pre class=" language-javascript"><code class="language-javascript"> cnpm install vuex <span class="token operator">--</span>save</code></pre>
<p>3.2 在 src 新建一个 store 文件夹<br>3.3 store 文件夹里新建一个 index.js 并写入</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    show<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>3.4 在 main.js 入引入</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//vuex</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//实例化Vue对象时加入store 对象</span>
<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>
  router<span class="token punctuation">,</span>
  store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//使用store</span>
  template<span class="token punctuation">:</span> <span class="token string">"&lt;App/>"</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>$store.state.show 无论哪个组件都可以使用 , 那组件多了之后 , 状态也多了 , 这么多状态都堆在 store 文件夹下的 index.js 不好维护怎么办 ?<br>我们可以使用 vuex 的 modules, 把 store 文件夹下的 index.js 改成</p>
</blockquote>
<p>store/index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> defaultState <span class="token keyword">from</span> <span class="token string">"./state/state"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//state状态模块</span>
<span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">"./getters/getters"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//getter模块</span>
<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"./mutations/mutations"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//mutations模块</span>
<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"./actions/actions"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//actions模块</span>

<span class="token comment" spellcheck="true">//modules模块</span>
<span class="token keyword">import</span> app <span class="token keyword">from</span> <span class="token string">"./modules/app"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">"./modules/user"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> shop <span class="token keyword">from</span> <span class="token string">"./modules/shop"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  state<span class="token punctuation">:</span> defaultState<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">,</span>
    user<span class="token punctuation">,</span>
    shop<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment" spellcheck="true">// 模块， 相当于里面又进行了一个vuex</span>
  <span class="token comment" spellcheck="true">// modules: {</span>
  <span class="token comment" spellcheck="true">//   a: moduleA,</span>
  <span class="token comment" spellcheck="true">//   b: moduleB</span>
  <span class="token comment" spellcheck="true">// }</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>举例：modules/app.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    count<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span>
    products<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'大米'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'小米'</span><span class="token punctuation">,</span>price<span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'黑米'</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 将方法写在store的getters中，供其他组件调用(减少冗余)</span>
    saleProducts<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">var</span> saleProducts <span class="token operator">=</span> state<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>product <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用map遍历生成新的数组</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'***'</span> <span class="token operator">+</span> product<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'**'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> saleProducts
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//只能做同步操作,参数为state和传入的参数Payload</span>
       <span class="token function">updateCount</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>
       state<span class="token punctuation">.</span>count <span class="token operator">=</span> count
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//只能做异步操作，且actions提交到mutations来改变state.</span>
     <span class="token function">updateCountSync</span><span class="token punctuation">(</span><span class="token punctuation">{</span>commit<span class="token punctuation">,</span>state<span class="token punctuation">}</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         increment <span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> app</code></pre>
<p>在组件 home.vue 中使用</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">'ProductListOne'</span><span class="token punctuation">,</span>
  computed<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//注意获取state中值的要写在computed计算属性中，否则不能及时更新的。</span>
    <span class="token comment" spellcheck="true">/***1.获取state中的值****/</span>
    <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">/***获取state中的值****/</span>

    <span class="token comment" spellcheck="true">/****2.获取getters中的值,2种方案等同***/</span>
    <span class="token function">saleProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>saleProducts<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment" spellcheck="true">//简写</span>
    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
      <span class="token string">'saleProducts'</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">/****获取getters中的值,2种方案等同***/</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        number<span class="token punctuation">:</span><span class="token number">1</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    reducePrice <span class="token punctuation">(</span>amount<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 使用this.$store.commit('')来store传递一个事件</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>products<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>product <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
         product<span class="token punctuation">.</span>price <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>
       <span class="token punctuation">}</span><span class="token punctuation">)</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'reducePrice'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// commit是mutations的同步方法</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'reducePriceSync'</span><span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// dispatch分发是actions中异步的方法</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>

     <span class="token comment" spellcheck="true">/**在组件中同步触发muations和异步触发actions**/</span>
     <span class="token function">plus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>

       <span class="token comment" spellcheck="true">/**3.使用commit进行同步执行muations**/</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateCount'</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>
       <span class="token comment" spellcheck="true">/**使用commit进行同步执行muations**/</span>

       <span class="token comment" spellcheck="true">/**4.使用dispatch进行异步执行actions**/</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateCountSync'</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span>
       <span class="token comment" spellcheck="true">/**使用dispatch进行异步执行actions**/</span>
     <span class="token punctuation">}</span>
       <span class="token comment" spellcheck="true">/**在组件中同步触发muations和异步触发actions**/</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<h3 id="3-本地传值-localStorage-sessionStorage-cookie-（必须掌握）"><a href="#3-本地传值-localStorage-sessionStorage-cookie-（必须掌握）" class="headerlink" title="3.本地传值 localStorage / sessionStorage / cookie （必须掌握）"></a>3.本地传值 localStorage / sessionStorage / cookie （必须掌握）</h3><ul>
<li>通信比较简单,缺点是数据和状态比较混乱,不太容易维护</li>
<li>注意用 JSON.parse() / JSON.stringify()  做数据格式转换</li>
<li>localStorage / sessionStorage 可以结合 vuex, 实现数据的持久保存,同时使用 vuex 解决数据和状态混乱问题.</li>
</ul>
<p>存：</p>
<pre class=" language-javascript"><code class="language-javascript">localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"tolist"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tolist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>取：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tolist <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"tolist"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>三者的异同</strong></p>
<table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>sessionStorage</strong></th>
<th><strong>localStorage</strong></th>
<th><strong>Cookie</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>数据的生命期</strong></td>
<td>仅在当前会话下有效，关闭页面或浏览器后被清除</td>
<td>除非被清除，否则永久保存</td>
<td>一般由服务器生成，可设置失效时间。如果在浏览器端生成 Cookie，默认是关闭浏览器后失效</td>
</tr>
<tr>
<td><strong>存放数据大小</strong></td>
<td>4K 左右</td>
<td>一般为 5MB</td>
<td></td>
</tr>
<tr>
<td><strong>与服务器端通信</strong></td>
<td>每次都会携带在 HTTP 头中，如果使用 cookie 保存过多数据会带来性能问题</td>
<td>仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td></td>
</tr>
<tr>
<td><strong>易用性</strong></td>
<td>需要自己封装，源生的 Cookie 接口不友好</td>
<td>源生接口可以接受，亦可再次封装来对 Object 和 Array 有更好的支持</td>
<td></td>
</tr>
</tbody></table>
<p>####</p>
<h2 id="三、路由传值-（必须掌握）"><a href="#三、路由传值-（必须掌握）" class="headerlink" title="三、路由传值 （必须掌握）"></a>三、路由传值 （必须掌握）</h2><blockquote>
<p>1.父组件 push 使用 this.$router.push<br>2.在子组件中获取参数的时候是this.$route.params</p>
</blockquote>
<p>###</p>
<h3 id="1-gt-Query-传参-参数在-URL-路径拼接显示"><a href="#1-gt-Query-传参-参数在-URL-路径拼接显示" class="headerlink" title="1&gt;Query 传参(参数在 URL 路径拼接显示)"></a>1&gt;Query 传参(参数在 URL 路径拼接显示)</h3><p>1.传值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种写法 :</span>
     <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{name:'Log',query:{id:6}}"</span><span class="token operator">></span>显示登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>

<span class="token comment" spellcheck="true">//第二种写法 :</span>
  <span class="token function">goToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'Log'</span><span class="token punctuation">,</span>query<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>2.取值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在对应页面取值</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果:{id:6} 刷新页面参数丢失</span>

<span class="token comment" spellcheck="true">//网页地址显示为</span>
 http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>#<span class="token operator">/</span>log<span class="token operator">?</span>id<span class="token operator">=</span><span class="token number">6</span></code></pre>
<h3 id="2-gt-动态路由传值-刷新不丢失参数"><a href="#2-gt-动态路由传值-刷新不丢失参数" class="headerlink" title="2&gt;动态路由传值(刷新不丢失参数)"></a>2&gt;动态路由传值(刷新不丢失参数)</h3><p>1&gt;配置动态路由</p>
<pre class=" language-javascript"><code class="language-javascript">routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>
  <span class="token comment" spellcheck="true">//动态路由参数  以冒号开头</span>
  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user/:id"</span><span class="token punctuation">,</span> conponent<span class="token punctuation">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>
<p>2.传值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种写法 :</span>
    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"'/user/'+item.id"</span><span class="token operator">></span>传值<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>

<span class="token comment" spellcheck="true">//第二种写法 :</span>
  <span class="token function">goToUser</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>path<span class="token punctuation">:</span><span class="token string">'/user/'</span><span class="token operator">+</span>id<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>3.取值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在对应页面取值</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果:{id:123}</span>

<span class="token comment" spellcheck="true">//网页地址显示为</span>
 http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>#<span class="token operator">/</span>log<span class="token operator">/</span><span class="token number">123</span></code></pre>
<p>###</p>
<h3 id="3-gt-params-传参（参数不在-URL-路径拼接显示）"><a href="#3-gt-params-传参（参数不在-URL-路径拼接显示）" class="headerlink" title="3&gt;params 传参（参数不在 URL 路径拼接显示）"></a>3&gt;params 传参（参数不在 URL 路径拼接显示）</h3><blockquote>
<p>注意：上述这种利用 params 不显示 url 传参的方式会导致在刷新页面的时候，传递的值会丢失</p>
</blockquote>
<p>1.传值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//第一种写法 :</span>
     <span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{name:'Log',params:{id:6}}"</span><span class="token operator">></span>显示登录页面<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>

<span class="token comment" spellcheck="true">//第二种写法 :</span>
  <span class="token function">goToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">'Log'</span><span class="token punctuation">,</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>id<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span></code></pre>
<p>2.取值</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在对应页面取值</span>
 <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果:{id:6} 刷新页面参数丢失</span>

<span class="token comment" spellcheck="true">//网页地址显示为</span>
 http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">8080</span><span class="token operator">/</span>#<span class="token operator">/</span>log</code></pre>
<p>###</p>
<h2 id="四、ref-refs-children-parent"><a href="#四、ref-refs-children-parent" class="headerlink" title="四、ref / refs , $children / $parent"></a>四、ref / refs , $children / $parent</h2><blockquote>
<p>通过$refs，$parent，$children 就可以访问组件的实例，拿到实例代表什么？代表可以访问此组件的所有方法和 data。</p>
</blockquote>
<h3 id="1-gt-ref-refs"><a href="#1-gt-ref-refs" class="headerlink" title="1&gt;ref , refs"></a>1&gt;ref , refs</h3><blockquote>
<p>ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例，可以通过实例直接调用组件的方法或访问数据， 我们看一个 ref  来访问组件的例子:</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  在我们需要获取实例的地方定义ref</span>
<span class="token operator">&lt;</span>my<span class="token operator">-</span>component ref<span class="token operator">=</span><span class="token string">"myRef"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">></span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 然后我们在js中通过$refs方式获取该实例</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>myRef<span class="token punctuation">;</span></code></pre>
<p>###</p>
<h3 id="2-gt-parent，-children"><a href="#2-gt-parent，-children" class="headerlink" title="2&gt;$parent，$children"></a>2&gt;$parent，$children</h3><blockquote>
<p>要注意边界情况，如在#app 上拿$parent得到的是new Vue()的实例，在这实例上再拿$parent 得到的是 undefined，而在最底层的子组件拿$children是个空数组。也要注意得到$parent 和$children的值不一样，$children  的值是数组，而$parent 是个对象。</p>
</blockquote>
<p>父组件：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>my<span class="token operator">-</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>my<span class="token operator">-</span>component<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">{</span>
                msg<span class="token punctuation">:</span> <span class="token string">'this is old'</span><span class="token punctuation">,</span>
                  num<span class="token punctuation">:</span><span class="token number">0</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>
            <span class="token function">changeChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>messageChild<span class="token operator">=</span><span class="token string">'this is new value'</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>子组件：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>我是子组件<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>获取父组件的值为：<span class="token punctuation">{</span><span class="token punctuation">{</span>parentVal<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">{</span>
                <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
              messageChild<span class="token punctuation">:</span><span class="token string">'this is value'</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        computed<span class="token punctuation">:</span><span class="token punctuation">{</span>
             <span class="token function">parentVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               <span class="token comment" spellcheck="true">// 通过$parent我们可以获取父组件实例，且可以更改父组件的值</span>
                  <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
               <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>msg<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<blockquote>
<p><strong>如果子组件是公共组件，会被多个父组件调用，那么$parent 会怎么获取？改变他们的属性将会怎么变化？父组件中没有这个属性怎么办？</strong></p>
<ol>
<li>针对不同父组件调用，子组件会每次都会生成一个实例，这也是 Vue 的重要机制。$parent 会获取每个调用它的父组件实例。</li>
<li>子组件中通过$parent 会改变每个调用它的父组件中的对应属性。</li>
</ol>
</blockquote>
<blockquote>
<p>总结：上面两种方式用于父子组件之间的通信， 而使用 props 进行父子组件通信更加普遍; 二者皆不能用于非父子组件之间的通信</p>
</blockquote>
<p>##</p>
<h2 id="五、provide-inject"><a href="#五、provide-inject" class="headerlink" title="五、provide/ inject"></a>五、provide/ inject</h2><blockquote>
<p>概念：provide/ inject 是 vue2.2.0 新增的 api, 简单来说就是父组件中通过 provide 来提供变量, 然后再子组件中通过 reject 来注入变量。</p>
</blockquote>
<p>A.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templete<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>comB<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>comB<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">import</span> comB <span class="token keyword">from</span> <span class="token string">'./B.vue'</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'A'</span><span class="token punctuation">,</span>
  provide<span class="token punctuation">:</span><span class="token punctuation">{</span> forData<span class="token punctuation">:</span><span class="token string">'demo'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span><span class="token punctuation">{</span>comB<span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<p>B.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templete<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token punctuation">{</span><span class="token punctuation">{</span>demo<span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span>comC<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>comC<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">import</span> comC <span class="token keyword">from</span> <span class="token string">'./C.vue'</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'B'</span><span class="token punctuation">,</span>
  inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'forData'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span><span class="token punctuation">{</span>comC<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        demo<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>forData
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<p>C.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templete<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token punctuation">{</span><span class="token punctuation">{</span>demo<span class="token punctuation">}</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">,</span>
  inject<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'forData'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span><span class="token punctuation">{</span>comC<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        demo<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>forData
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<h2 id="六、-attrs与-listeners"><a href="#六、-attrs与-listeners" class="headerlink" title="六、$attrs与 $listeners"></a>六、$attrs与 $listeners</h2><p>多级组件嵌套需要传递数据时，通常使用的方法是通过 vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。为此 Vue2.4 版本提供了另一种方法—-$attrs/$listeners， 新增了 inheritAttrs  选项。</p>
<blockquote>
<ul>
<li>$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件。通常配合 interitAttrs 选项一起使用。</li>
<li>$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件</li>
</ul>
</blockquote>
<p>index.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templet<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>childA <span class="token punctuation">:</span>name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token punctuation">:</span>age<span class="token operator">=</span><span class="token string">"age"</span> <span class="token punctuation">:</span>sex<span class="token operator">=</span><span class="token string">"sex"</span> <span class="token punctuation">:</span>weight<span class="token operator">=</span><span class="token string">"weight"</span> title<span class="token operator">=</span><span class="token string">"这是一个属性"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>childA<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">const</span> childA<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./childA.vue'</span><span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'index'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span><span class="token punctuation">{</span>childA<span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        name<span class="token punctuation">:</span><span class="token string">'Jacke'</span><span class="token punctuation">,</span>
      age<span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>
      sex<span class="token punctuation">:</span><span class="token string">'女'</span><span class="token punctuation">,</span>
      weight<span class="token punctuation">:</span><span class="token string">'93'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<p>childA.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templet<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>P<span class="token operator">></span>name：<span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>chilA的$attrs：<span class="token punctuation">{</span><span class="token punctuation">{</span>$attrs<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
      <span class="token operator">&lt;</span>childB v<span class="token operator">-</span>bind<span class="token operator">=</span><span class="token string">"$attrs"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>childB<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">const</span> childA<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./childB.vue'</span><span class="token punctuation">)</span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'childB'</span><span class="token punctuation">,</span>
  components<span class="token punctuation">:</span><span class="token punctuation">{</span>childB<span class="token punctuation">}</span><span class="token punctuation">,</span>
  inheritAttrs <span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以关闭自动挂载到组件根元素上的没有在props上申明的属性</span>
  props<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>String<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// name作为props的属性绑定</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        nmae<span class="token punctuation">:</span><span class="token string">'Jacke'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//{ "age":"18","sex":'女', "weight":"93",title:'这是一个属性'}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<p>childB.vue</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>templet<span class="token operator">></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>P<span class="token operator">></span>age：<span class="token punctuation">{</span><span class="token punctuation">{</span>age<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>P<span class="token operator">></span>
        <span class="token operator">&lt;</span>p<span class="token operator">></span>chilB的$attrs：<span class="token punctuation">{</span><span class="token punctuation">{</span>$attrs<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>templete<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
 <span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
     name<span class="token punctuation">:</span><span class="token string">'childB'</span><span class="token punctuation">,</span>
  inheritAttrs <span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//可以关闭,自动挂载到组件根元素上的没有在props上申明的属性</span>
  props<span class="token punctuation">:</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span>String<span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// name作为props的属性绑定</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        age<span class="token punctuation">:</span><span class="token string">'Jacke'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$attrs<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">//{"name":"Jacke", "sex":'女', "weight":"93",title:'这是一个属性'}</span>
  <span class="token punctuation">}</span>
 <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span>script<span class="token operator">></span></code></pre>
<p>##</p>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://www.bilibili.com/read/cv2898813/" target="_blank" rel="noopener">https://www.bilibili.com/read/cv2898813/</a><br><a href="https://www.jianshu.com/p/0fb563e04f61" target="_blank" rel="noopener">https://www.jianshu.com/p/0fb563e04f61</a><br><a href="https://blog.fundebug.com/2019/05/18/6-ways-for-vue-communication/" target="_blank" rel="noopener">https://blog.fundebug.com/2019/05/18/6-ways-for-vue-communication/</a></p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue 通信</tag>
        <tag>组件传值</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（1）H5+css</title>
    <url>/leader755/2877.html</url>
    <content><![CDATA[<h2 id="HTML-amp-CSS："><a href="#HTML-amp-CSS：" class="headerlink" title="HTML&amp;CSS："></a>HTML&amp;CSS：</h2><ul>
<li>浏览器内核</li>
<li>盒模型、flex 布局、两/三栏布局、水平/垂直居中；</li>
<li>BFC、清除浮动；</li>
<li>css3 的选择器；css 的继承</li>
<li>css3 动画、H5 新特性。</li>
</ul>
<h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p><strong>主流浏览器有五大款，分别是 IE、Firefox、Google Chrome、Safari、Opera。</strong><br><strong>最常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</strong></p>
<ul>
<li>IE/Eadge 浏览器：Trident 内核</li>
<li>chrome 浏览器：Webkit/Blink 内核</li>
<li>FirefoxL 浏览器：Gecko 内核</li>
<li>Safari 浏览器：Webkit 内核</li>
<li>Opera 浏览器： Presto 内核</li>
</ul>
<h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>CSS<strong>盒模型</strong>本质上<strong>是</strong>一个盒子，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容，可以简单表述为 盒模型由 content，padding，margin，border 几部分组成。<br>盒模型=标准盒模型+IE 盒模型<br>标准盒模型：<strong>标准盒模型下盒子的大小</strong>  =** width(content)** + <strong>border</strong> + <strong>padding</strong> + <strong>margin;</strong><br><strong>IE 盒模型：  IE 盒模型下盒子的大小=width（content + border + padding） + margin;</strong><br><strong>CSS 如何设置标准模型和 IE 模型:</strong></p>
<blockquote>
<p>如果 doctype 协议缺失，会由浏览器自己界定，在 IE 浏览器中 IE9 以下（IE6.IE7.IE8）的版本触发怪异模式，其他浏览器中会默认为 W3c 标准模式。</p>
</blockquote>
<p>box-sizing: content-box;  标准盒模型<br>box-sizing: border-box;  IE 盒模型</p>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC:"></a>BFC:</h3><p>块级格式化上下文</p>
<blockquote>
<p><strong>BFC 布局规则是？</strong></p>
<ol>
<li>内部的 Box 会在垂直方向，一个接一个地放置。</li>
<li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li>
<li>BFC 的区域不会与 float box 重叠。</li>
<li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算 BFC 的高度时，浮动元素也参与计算</li>
</ol>
</blockquote>
<blockquote>
</blockquote>
<h1 id="只要元素满足下面任一条件即可触发-BFC-特性："><a href="#只要元素满足下面任一条件即可触发-BFC-特性：" class="headerlink" title="只要元素满足下面任一条件即可触发 BFC 特性："></a>只要元素满足下面任一条件即可触发 BFC 特性：</h1><blockquote>
<ul>
<li>body 根元素</li>
<li>浮动元素：float 除 none 以外的值</li>
<li>绝对定位元素：position (absolute、fixed)</li>
<li>display 为 inline-block、table-cells、flex</li>
<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<h1 id="BFC-常见作用"><a href="#BFC-常见作用" class="headerlink" title="BFC 常见作用"></a><strong>BFC 常见作用</strong></h1><blockquote>
<p><strong>阻止外边距 margin 折叠塌陷</strong></p>
</blockquote>
<blockquote>
<p>1、阻止外边距折叠 margin 塌陷问题：在标准文档流中，块级标签之间竖直方向的 margin 会以大的为准，这就是 margin 的塌陷现象。可以用 overflow：hidden 产生 bfc 来解决。</p>
</blockquote>
<h1 id="阻止元素被浮动元素覆盖和高度坍塌"><a href="#阻止元素被浮动元素覆盖和高度坍塌" class="headerlink" title="阻止元素被浮动元素覆盖和高度坍塌"></a>阻止元素被浮动元素覆盖和高度坍塌</h1><blockquote>
<ol start="2">
<li>阻止浮动元素造成的父级元素高度坍塌问题和遮挡其他元素问题 高度塌陷问题，这时就可以用 BFC 来清除浮动了。</li>
</ol>
</blockquote>
<p>** <strong>[</strong>点击查看 BFC 块级上下文演示案例**](//code.h5jun.com/bajo/8/embed?html,css)</p>
<h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>利用 clear:both; 清除浮动</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>利用伪类：after 清除浮动</p>
<pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*万能清除浮动代码*/</span>
<span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*添加一个看不见的元素*/</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>
  <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*兼容 ie*/</span>
<span class="token punctuation">}</span></code></pre>
<p>利用 overflow:hidden;</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>Flexible Box 模型，通常被称为 flexbox，是一种弹性布局。</p>
<h3 id="css-两栏布局、三栏布局"><a href="#css-两栏布局、三栏布局" class="headerlink" title="css 两栏布局、三栏布局"></a>css 两栏布局、三栏布局</h3><h4 id="两栏布局，已知左侧宽度，右边自适应"><a href="#两栏布局，已知左侧宽度，右边自适应" class="headerlink" title="两栏布局，已知左侧宽度，右边自适应"></a>两栏布局，已知左侧宽度，右边自适应</h4><p>1&gt; 双 inline-block  左右盒子均设置为 display：inline-block; 左盒子设置固定宽高，右盒子使用 calc(100% - width 左);</p>
<p>2&gt;使用浮动双 float  左盒子浮动，右盒子浮动，右盒子宽度设置用 calc(100% - width 左)可以无缝衔接不会有被覆盖的内容。</p>
<p>3&gt;使用定位双定位 在左右盒子外侧设置一个大盒子，不必设置大盒子的宽高，直接设置 position:relative;左盒子设置 position:absolute;固定宽高，右盒子设置 position:absolute;left:width 左;width:calc(100% - width 左)可实现无缝衔接。</p>
<p>4&gt;使用定位单定位   左盒子设置绝对定位，设置右盒子 margin-left:width(左)，右盒子不必设置宽度。</p>
<p>5&gt;使用 flex 布局   外侧盒子 display:flex;align-items:flex-start/center;左盒子设置宽高即可，右盒子 flex:1 1 auto;右盒子设置为放大缩小均为 1，占据空间是剩下的空间。</p>
<p>6&gt;.使用 grid 网格   外层盒子设置 display:grid;grid-template-rows:100px;grid-template-columns:100px auto;设置了一行两列的网格，且右边网格的大小自适应。</p>
<p>7&gt;BFC 外侧盒子设置为 overflow:auto，内部左盒子设置 float:left;对左侧进行浮动，继续设置左侧盒子的大小，右盒子设置 overflow:auto;对左盒子触发 BFC，右盒子触发 BFC，左盒子设置右外边距，右盒子设置左外边距(不设置也可)，右盒子不需要设置 width;</p>
<h4 id="三栏布局，已知左右侧宽度，中间自适应"><a href="#三栏布局，已知左右侧宽度，中间自适应" class="headerlink" title="三栏布局，已知左右侧宽度，中间自适应"></a>三栏布局，已知左右侧宽度，中间自适应</h4><p>1.<strong>使用定位</strong> 三个盒子外侧设置大盒子，大盒子使用相对定位，下面一层三个盒子均采用绝对定位，左盒子固定宽高，右盒子固定宽高并设置<code>right: 0px;</code>使右盒子靠右，中间盒子设置<code>width: calc(100% - width左-width右相加);</code>即可。</p>
<p>2.<strong>使用浮动</strong>  左盒子设置左浮动，右盒子设置右浮动，中间盒子设置<code>margin:auto;display: inline-block;width: calc(100% - width左 - width 右);</code>无缝衔接<code>margin:auto;</code>在这里不管左右盒子是否一样大都可。</p>
<p>3&gt;<strong>使用 grid 网格</strong>  设置外层盒子为<code>display:grid;grid-template-rows:100px;grid-template-columns:100px auto 100px;</code>即可。grid 网格好厉害！！！</p>
<p>4&gt;<strong>使用 flex</strong>  设置外层盒子为<code>display:flex;align-items:center</code>中间盒子设置<code>flex:1 1 auto</code>左右盒子在盒子内部设置内容有大小即可。</p>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>需求：</p>
<ul>
<li>1.两边固定，中间自适应；</li>
<li>2.先加载 middle 内容；</li>
<li>3.三列等高布局；</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
  <span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span> //设置总宽度
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">150</span>px <span class="token number">0</span> <span class="token number">100</span>px<span class="token punctuation">;</span> //为左右<span class="token number">2</span>侧留出空间
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token id">#left</span>,
  <span class="token id">#right</span> </span><span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token id">#middle</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token id">#middle</span>,
  <span class="token id">#left</span>,
  <span class="token id">#right</span> </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">10000</span>px<span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">10000</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 偏移的距离和宽度 */</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*偏移的距离和宽度*/</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p>还有一件事就是他们在单独部分内容扩充的时候，童鞋们可能发现了 底部会参差不齐。</p>
<blockquote>
<p>给 left、middle、right 设置上 padding-bottom: 9999px; margin-bottom: -9999px;</p>
</blockquote>
<p><a href="//code.h5jun.com/puja/33/edit?html,css,output" target="_blank" rel="noopener"><strong>点击查看圣杯布局演示案例</strong></a></p>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p>需求：</p>
<ul>
<li>1.两边固定，中间自适应；</li>
<li>2.先加载 middle 内容；</li>
<li>3.三列等高布局；</li>
</ul>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
  <span class="token comment" spellcheck="true">/*float流*/</span>
  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector"><span class="token class">.left</span>,
  <span class="token class">.middle</span>,
  <span class="token class">.right</span> </span><span class="token punctuation">{</span>
    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*解决底部参差不齐的问题**/</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右侧设置宽度和距离*/</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">220</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右侧设置宽度和距离*/</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">220</span>px <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*用middle 内部的元素通过 margin 留出空间**/</span>
    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">
  <span class="token comment" spellcheck="true">/*双飞翼 flex布局*/</span>
  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.sub</span> </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.extra</span> </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*自动占满剩余空间*/</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.sub</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*指定宽度，方压缩*/</span>
    <span class="token property">order</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*越小越靠前*/</span>
  <span class="token punctuation">}</span>
  <span class="token selector"><span class="token class">.extra</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*指定宽度，方压缩*/</span>
    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*越大越靠后*/</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">/*
    flex=>flex-grow:是否占满剩余空间,flex-shrink：是否压缩,flex-basis: 基准宽度
    */</span>
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre>
<p><a href="//code.h5jun.com/yenew/edit?html,css,output" target="_blank" rel="noopener"><strong>双飞翼布局 float 流演示案例</strong></a><br><a href="//code.h5jun.com/xogos/edit?html,css,output" target="_blank" rel="noopener"><strong>双飞翼布局 flex 流演示案例</strong></a></p>
<blockquote>
<p>总结：</p>
<ul>
<li>相同点：</li>
</ul>
<p>圣杯布局和双飞翼布局解决的问题是一样的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。<br>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部 float 浮动，但左右两栏加上负 margin 让其跟中间栏 div 并排，以形成三栏布局。</p>
</blockquote>
<blockquote>
<ul>
<li>不同点：</li>
</ul>
<ol>
<li>双飞翼布局给主面板添加了一个父标签用来通过 margin 给子面板腾出空间。</li>
<li>圣杯采用的是 padding，而双飞翼采用的 margin，解决了圣杯布局的问题。</li>
<li>双飞翼布局不用设置相对布局，以及对应的 left 和 right 值。</li>
</ol>
</blockquote>
<h3 id="水平-垂直居中"><a href="#水平-垂直居中" class="headerlink" title="水平/垂直居中"></a>水平/垂直居中</h3><h4 id="1-绝对定位-margin-auto"><a href="#1-绝对定位-margin-auto" class="headerlink" title="1.绝对定位+margin:auto"></a>1.绝对定位+margin:auto</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">div </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>

  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-绝对定位-负-margin"><a href="#2-绝对定位-负-margin" class="headerlink" title="2.绝对定位+负 margin"></a>2.绝对定位+负 margin</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">div </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>

  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="3-绝对定位-transform"><a href="#3-绝对定位-transform" class="headerlink" title="3.绝对定位+transform"></a>3.绝对定位+transform</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>

  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 定位父级的50% */</span>
  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*自己的50% */</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="4-flex-布局"><a href="#4-flex-布局" class="headerlink" title="4.flex 布局"></a>4.flex 布局</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>

  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> //子元素水平居中
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> //子元素垂直居中
  <span class="token comment" spellcheck="true">/* aa只要三句话就可以实现不定宽高水平垂直居中。 */</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.box</span> > div </span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="5-table-cell-实现居中"><a href="#5-table-cell-实现居中" class="headerlink" title="5.table-cell 实现居中"></a>5.table-cell 实现居中</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div
  class="outter"
  > &lt;div
  class="inner"
  > &lt;div
  class="foo"
  > 999
  &lt;/div
  > &lt;div
  > &lt;/div
  > <span class="token class">.outter</span> </span><span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">/**定义最外层盒子的 table(非必须)，使用百分比时使用*/</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*控制子元素垂直居中*/</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.foo</span> </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*必须为行内元素*/</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="css-的选择器"><a href="#css-的选择器" class="headerlink" title="css 的选择器"></a>css 的选择器</h3><ul>
<li><p>标签选择器，类选择器，id 选择器，后代选择器，</p>
</li>
<li><p>属性选择器：属性选择器的标志性符号是  []，匹配含义：^：开头 $：结尾 *：包含。E[title=”abc”]选中页面的 E 元素，并且 E 需要带有 title 属性，且属性值完全等于 abc。</p>
</li>
<li><p>结构伪类选择器：</p>
<table>
<thead>
<tr>
<th>选择符号</th>
<th>含义</th>
<th>相同点</th>
</tr>
</thead>
<tbody><tr>
<td>E:first-child</td>
<td>匹配父元素的第一个子元素 E</td>
<td>带有 child，以 E 元素的父元素为参考</td>
</tr>
<tr>
<td>E:last-child</td>
<td>匹配父元素的最后一个子元素 E</td>
<td></td>
</tr>
<tr>
<td>E:nth-child(n)</td>
<td>匹配父元素的第 n 个子元素 E</td>
<td></td>
</tr>
<tr>
<td>E:nth-child(odd)</td>
<td>匹配奇数</td>
<td></td>
</tr>
<tr>
<td>E:nth-child(even)</td>
<td>匹配偶数</td>
<td></td>
</tr>
<tr>
<td>E:nth-last-child(n)</td>
<td>匹配父元素的倒数第 n 个子元素 E</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>E:first-of-type</td>
<td>匹配同类型中的第一个同级兄弟元素 E。</td>
<td>带有 type，我们可以这样理解：先在同级里找到所有的 E 类型，然后根据 n 进行匹配。</td>
</tr>
<tr>
<td>E:last-of-type</td>
<td>匹配同类型中的最后一个同级兄弟元素 E。</td>
<td></td>
</tr>
<tr>
<td>E:nth-of-type(n)</td>
<td>匹配同类型中的第 n 个同级兄弟元素 E。</td>
<td></td>
</tr>
<tr>
<td>E:nth-last-of-type(n)</td>
<td>匹配同类型中的倒数第 n 个同级兄弟元素 E。</td>
<td></td>
</tr>
</tbody></table>
</li>
<li><p>伪元素选择器：</p>
<ul>
<li><code>E::before</code> 设置在 元素 E 前面（依据对象树的逻辑结构）的内容，配合 content 属性一起使用。</li>
<li><code>E::after</code> 设置在 元素 E 后面（依据对象树的逻辑结构）的内容，配合 content 属性一起使用。</li>
</ul>
</li>
</ul>
<p>点击查看详细：<a href="https://www.cnblogs.com/qianguyihao/p/8426799.html" target="_blank" rel="noopener">https://www.cnblogs.com/qianguyihao/p/8426799.html</a></p>
<p>###</p>
<h3 id="position-的值"><a href="#position-的值" class="headerlink" title="position 的值"></a>position 的值</h3><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>absolute</td>
<td>生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</td>
</tr>
<tr>
<td>fixed</td>
<td>生成绝对定位的元素，相对于浏览器窗口进行定位。</td>
</tr>
<tr>
<td>relative</td>
<td>生成相对定位的元素，相对于其正常位置进行定位。</td>
</tr>
<tr>
<td>sticky</td>
<td>粘性吸顶布局</td>
</tr>
</tbody></table>
<h3 id="css-的继承性的属性："><a href="#css-的继承性的属性：" class="headerlink" title="css 的继承性的属性："></a>css 的继承性的属性：</h3><table>
<thead>
<tr>
<th>类型</th>
<th>继承属性</th>
</tr>
</thead>
<tbody><tr>
<td>字体系列属性</td>
<td>font：组合字体；</td>
</tr>
</tbody></table>
<p>font-family：字体系列<br>font-family：字体系列<br>font-weight：设置字体的粗细<br>font-size：设置字体的尺寸<br>font-style：定义字体的风格 |<br>| 文本系列属性 | text-indent：文本缩进<br>text-align：文本水平对齐<br>text-shadow：设置文本阴影<br>line-height：行高<br>word-spacing：字间隔<br>letter-spacing：字符间距<br>direction：规定文本的书写方向<br>color：文本颜色 |<br>| 元素可见性 | visibility |<br>| 列表属性 | list-style-type |<br>| 光标属性 | cursor |</p>
<h3 id="css-动画"><a href="#css-动画" class="headerlink" title="css 动画"></a>css 动画</h3><p>可以参考<a href="https://juejin.im/post/6844903845470945294" target="_blank" rel="noopener">https://juejin.im/post/6844903845470945294</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597274198391-d9f1533b-f045-4a81-a964-52dbb24b0f35.png#height=476&id=vNV1b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=482&originalType=binary&size=127188&status=done&style=none&width=357" alt="image.png"></p>
<p>animation: move 2s linear 3 alternate both;</p>
<p>| <em>animation-name（</em> keyframe 动画名称<em>）</em> | <em>animation-duration（动画持续时间）</em> | <em>animation-timing-function _<br>_指定动画计时函数，即动画的速度曲线</em> | <em>animation-delay （运动延迟）单位 s</em> | animation-iteration-count (动画播放的次数,默认 1) | animation-direction（动画播放的方向。） | animation-fill-mode 指定动画填充模式。 | <strong>animation-play-state（</strong>指定动画播放状态，正在运行或暂停。) |<br>| — | — | — | — | — | — | — | — |<br>|   | | ease（默认值） | 0（默认延迟 0s） | 1（动画播放默认的次数为 1） | normal  （默认值） | none（默认值，回到动画没开始时的状态。） | running 通过 running 将暂停的动画重新播放（默认值） |<br>| | | linear 匀速动画 | | <code>number (设置播放的次数）</code><br>`</p>
<p><code>| reverse | forwards：动画完成后，元素状态保持为最后一帧的状态。 | paused 通过paused将正在播放的动画停下了 | | | | ease-in | |</code>infinite (无限播放)<code>| alternate | backwards：表示，有动画延迟时，动画开始前，元素状态保持为第一帧的状态。 | | | | | ease-out | | | alternate | both: 表示上述二者效果都有 | | | | | ease-in-out | | | alternate-reverse | | | | | |</code>cubic-bezier(n,n,n,n)`  的特例。它们被称为贝塞尔曲线   (<a href="https://cubic-bezier.com/#.17,.67,.83,.67" target="_blank" rel="noopener">https://cubic-bezier.com/</a>) | | | | | |</p>
<h3 id="css-动画和-js-动画的区别："><a href="#css-动画和-js-动画的区别：" class="headerlink" title="css 动画和 js 动画的区别："></a>css 动画和 js 动画的区别：</h3><h4 id="CSS3-动画的优点和缺点"><a href="#CSS3-动画的优点和缺点" class="headerlink" title="CSS3 动画的优点和缺点"></a>CSS3 动画的优点和缺点</h4><p>优点：</p>
<ol>
<li>CSS3 动画在性能上会稍微好一些，浏览器会对 CSS3 的动画做一些优化(比如专门新建一个图层用来跑动画)</li>
<li>代码相对简单</li>
</ol>
<p>缺点：</p>
<ol>
<li>在动画控制上不够灵活</li>
<li>兼容性不好</li>
<li>部分动画功能无法实现(如滚动动画，视差滚动等)</li>
</ol>
<h4 id="JS-动画的优缺点"><a href="#JS-动画的优缺点" class="headerlink" title="JS 动画的优缺点"></a>JS 动画的优缺点</h4><p>优点：<br>JavaScript 动画正好弥补了这两个缺点。</p>
<ol>
<li>控制能力强，可以单帧的控制和变换</li>
<li>写的好，写的好的话，完全可以兼容 IE6</li>
</ol>
<p>缺点：<br>1.JS 运算预渲染性能不如 CSS3 动画，因为 CSS 动画的 transform 矩阵，是 C++级的，必然要比 JavaScript 级的计算要快</p>
<ol start="2">
<li>还有就是对库比较依赖</li>
<li>编码较为繁琐</li>
</ol>
<h4 id="综上所述"><a href="#综上所述" class="headerlink" title="综上所述"></a>综上所述</h4><ul>
<li>对于一些需要复杂控制的动画，使用 JavaScript 比较靠谱</li>
<li>如果是一些小的，简单的动画，就使用 CSS3 动画</li>
</ul>
<h3 id="H5-新特性"><a href="#H5-新特性" class="headerlink" title="H5 新特性"></a>H5 新特性</h3><h4 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h4><p>1.语意特性,添加<code>&lt;header&gt;&lt;header/&gt;&lt;nav&gt;&lt;nav&gt;</code>等标签 2.多媒体， 用于媒介回放的 video 和 audio 元素 3.图像效果，用于绘画的 canvas 元素，svg 元素等 4.离线 &amp; 存储,对本地离线存储的更好的支持,local Store,Cookies 等 5.设备兼容特性 ，HTML5 提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连， 6.连接特性，更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现。HTML5 拥有更有效的服务器推送技术，Server-Sent Event 和 WebSockets 就是其中的两个特性，这两个特性能够帮助我们实现服务器将数据“推送”到客户端的功能 7.性能与集成特性，HTML5 会通过 XMLHttpRequest2 等技术，帮助您的 Web 应用和网站在多样化的环境中更快速的工作</p>
<h4 id="新增标签"><a href="#新增标签" class="headerlink" title="新增标签"></a>新增标签</h4><p>1.多媒体：<code>&lt;audio&gt;&lt;/audio&gt;, &lt;video&gt;&lt;video&gt;,&lt;source&gt;&lt;/source&gt;, &lt;embed&gt;&lt;/embed&gt;, &lt;track&gt;&lt;/track&gt;</code> 2.新表单元素：<code>&lt;datalist&gt; ,&lt;output&gt; , &lt;keygen&gt;</code> 3.新文档节段和纲要:<code>&lt;header&gt;页面头部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部</code>等</p>
<h4 id="Input-有哪些新增类型？"><a href="#Input-有哪些新增类型？" class="headerlink" title="Input 有哪些新增类型？"></a>Input 有哪些新增类型？</h4><ul>
<li>color,选择颜色</li>
<li>date 选择日期</li>
<li>email 用于检测输入的是否为 email 格式的地址</li>
<li>month 选择月份</li>
<li>number 用于应该包含数值的输入域，可以设定对输入值的限定</li>
<li>range 用于定义一个滑动条，表示范围</li>
<li>search 用于搜索，比如站点搜索或 Google 搜索</li>
<li>tel 输入电话号码<br>-time 选择时间</li>
<li>url 输入网址</li>
<li>week 选择周和年</li>
</ul>
<h4 id="浏览器本地存储中-cookie-，localStorage-有什么区别？"><a href="#浏览器本地存储中-cookie-，localStorage-有什么区别？" class="headerlink" title="浏览器本地存储中 cookie ，localStorage 有什么区别？"></a>浏览器本地存储中 cookie ，localStorage 有什么区别？</h4><h4 id="session-sessionId-，token（令牌），cookie，sessionStorage，localStorage"><a href="#session-sessionId-，token（令牌），cookie，sessionStorage，localStorage" class="headerlink" title="session(sessionId)，token（令牌），cookie，sessionStorage，localStorage"></a>session(sessionId)，token（令牌），cookie，sessionStorage，localStorage</h4><ul>
<li>共同点：sessionStorage、localStorage 和 cookie 都由浏览器存储在本地的数据，session 存储在服务端。</li>
<li>sessionStorage：页面关闭，缓存消失，最大 5M.</li>
<li>localStorage：除非手动删除，否则永远存在本地，最大 5M.</li>
<li>cookie：存储在客户端，最大 4kb。<ul>
<li><strong>Cookie 主要是由服务器生成</strong>，且前端也可以设置，保存在客户端本地的一个文件，通过 response 响应头的 set-Cookie 字段进行设置，且 Cookie 的内容自动在请求的时候被传递给服务器。如下：</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596695630377-bc927c6f-e053-425f-a451-a8176853b439.png#height=259&id=SrLx8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=518&originWidth=1474&originalType=binary&size=101224&status=done&style=none&width=737" alt="image.png"></p>
<ul>
<li>session:<ul>
<li>session 存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号 sessionId，通常存放于 cookie 中。每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。服务器收到 cookie 后解析出 sessionId，再去 session 列表中查找，才能找到相应 session。依赖 cookie</li>
<li>cookie 只是实现 session 的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用 cookie 后还有其他方法存储，比如放在 url 中</li>
<li>现在大多都是 Session + Cookie，但是只用 session 不用 cookie，或是只用 cookie，不用 session 在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用</li>
<li>如果只用 cookie 不用 session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大</li>
</ul>
</li>
<li>token<ul>
<li>token 也称作令牌，由 uid+time+sign[+固定参数]</li>
<li>token 的认证方式类似于<strong>临时的证书签名</strong>, 并且是一种服务端无状态的认证方式, 非常适合于 REST API   的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。</li>
<li>token 在客户端一般存放于 localStorage，cookie，或 sessionStorage 中。在服务器一般存于数据库中</li>
<li>一般 token 放入 header 中</li>
</ul>
</li>
</ul>
<h4 id="分布式情况下的-session-和-token"><a href="#分布式情况下的-session-和-token" class="headerlink" title="分布式情况下的 session 和 token"></a>分布式情况下的 session 和 token</h4><p>session 是有状态的，一般存于服务器内存或硬盘中，当服务器采用分布式或集群时，session 就会面对负载均衡问题。</p>
<ul>
<li>负载均衡多服务器的情况，不好确认当前用户是否登录，因为多服务器不共享 session。这个问题也可以将 session 存在一个服务器中来解决，但是就不能完全达到负载均衡的效果。当今的几种<a href="http://blog.51cto.com/zhibeiwang/1965018" target="_blank" rel="noopener">解决 session 负载均衡</a>的方法。</li>
</ul>
<p>而 token 是无状态的，token 字符串里就保存了所有的用户信息</p>
<ul>
<li>客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将 token 存放于 localStroage 等容器中。客户端每次访问都传递 token，服务端解密 token，就知道这个用户是谁了。通过 cpu 加解密，服务端就不需要存储 session 占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做<a href="https://huanqiang.wang/2017/12/28/JWT%20%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">JWT(Json Web Token)</a></li>
</ul>
<blockquote>
<p>总结：</p>
<ul>
<li>session 存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号 sessionId，通常存放于 cookie 中。服务器收到 cookie 后解析出 sessionId，再去 session 列表中查找，才能找到相应 session。依赖 cookie</li>
<li>cookie 类似一个令牌，装有 sessionId，存储在客户端，浏览器通常会自动添加。</li>
<li>token 也类似一个令牌，无状态，用户信息都被加密到 token 中，一般 token 放到请求头 header 中，服务器收到 token 后解密就可知道是哪个用户。需要开发者手动添加。</li>
<li>jwt 只是一个跨域认证的方案</li>
</ul>
</blockquote>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.jianshu.com/p/c435f52fb95f" target="_blank" rel="noopener">https://www.jianshu.com/p/c435f52fb95f</a><br><a href="https://juejin.im/post/6844903817104850952" target="_blank" rel="noopener">https://juejin.im/post/6844903817104850952</a><br><a href="https://juejin.im/post/6844904000756809736" target="_blank" rel="noopener">https://juejin.im/post/6844904000756809736</a><br><a href="https://www.jianshu.com/p/34044e3c9317" target="_blank" rel="noopener">https://www.jianshu.com/p/34044e3c9317</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（4）less，sass，stylus</title>
    <url>/leader755/60928.html</url>
    <content><![CDATA[<p>###</p>
<p>##</p>
<h2 id="预编译：less，sass，stylus"><a href="#预编译：less，sass，stylus" class="headerlink" title="预编译：less，sass，stylus"></a>预编译：less，sass，stylus</h2><h3 id="预处理语言的诞生"><a href="#预处理语言的诞生" class="headerlink" title="预处理语言的诞生"></a>预处理语言的诞生</h3><p>其中 就我所知的有三门语言：Sass、Less 、Stylus 。</p>
<ol>
<li>Sass 诞生于 2007 年，Ruby 编写，其语法功能都十分全面，可以说 它完全把 CSS 变成了一门编程语言。另外 在国内外都很受欢迎，并且它的项目团队很是强大 ，是一款十分优秀的预处理语言。</li>
<li>Stylus 诞生于 2010 年，来自 Node.js 社区，语法功能也和 Sass 不相伯仲，是一门十分独特的创新型语言。</li>
<li>Less 诞生于 2009 年，受 Sass 的影响创建的一个开源项目。 它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充（_引用于官网_）。</li>
</ol>
<h3 id="选择预处理语言"><a href="#选择预处理语言" class="headerlink" title="选择预处理语言"></a>选择预处理语言</h3><blockquote>
<p>这是一个十分纠结的问题。</p>
<ol>
<li>在网上讨论看来，Sass 与 Stylus 相比于 Less 功能更为丰富，但对于学习成本以及适应时间 ，Less 稍胜一筹，这也是我选择 Less 的原因。</li>
<li>Less 没有去掉任何 CSS 的功能，而是在现有的语法上，增添了许多额外的功能特性，所以学习 Less 是一件非常舒服的事情。</li>
</ol>
</blockquote>
<h2 id="sass-用法"><a href="#sass-用法" class="headerlink" title="sass 用法"></a>sass 用法</h2><h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1.基本用法"></a>1.基本用法</h3><h4 id="1-gt-变量"><a href="#1-gt-变量" class="headerlink" title="1 &gt;变量"></a>1 &gt;变量</h4><p>SASS 允许使用变量，所有变量以$开头。</p>
<pre class=" language-ruby"><code class="language-ruby">　<span class="token variable">$blue</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#1875e7;　</span>

　　div <span class="token punctuation">{</span>
　　　color <span class="token punctuation">:</span> <span class="token variable">$blue</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>如果变量需要镶嵌在字符串之中，就必须需要写在#{}之中。</p>
<pre class=" language-ruby"><code class="language-ruby">　<span class="token variable">$side</span> <span class="token punctuation">:</span> left<span class="token punctuation">;</span>

　　<span class="token punctuation">.</span>rounded <span class="token punctuation">{</span>
　　　　border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$side</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<h4 id="2-gt-计算功能"><a href="#2-gt-计算功能" class="headerlink" title="2&gt; 计算功能"></a>2&gt; 计算功能</h4><p>SASS 允许在代码中使用算式：</p>
<pre class=" language-ruby"><code class="language-ruby">body <span class="token punctuation">{</span>
　　　　margin<span class="token punctuation">:</span> <span class="token punctuation">(</span>14px<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　　　top<span class="token punctuation">:</span> 50px <span class="token operator">+</span> 100px<span class="token punctuation">;</span>
　　　　right<span class="token punctuation">:</span> <span class="token variable">$var</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<h4 id="3-gt-嵌套"><a href="#3-gt-嵌套" class="headerlink" title="3&gt; 嵌套"></a>3&gt; 嵌套</h4><p>SASS 允许选择器嵌套。比如，下面的 CSS 代码：</p>
<pre class=" language-ruby"><code class="language-ruby">　div h1 <span class="token punctuation">{</span>
　　　　color <span class="token punctuation">:</span> red<span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>可以写成：</p>
<pre class=" language-ruby"><code class="language-ruby">　div <span class="token punctuation">{</span>
　　　　hi <span class="token punctuation">{</span>
　　　　　　color<span class="token symbol">:red</span><span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>
　　<span class="token punctuation">}</span></code></pre>
<p>属性也可以嵌套，比如 border-color 属性，可以写成：</p>
<pre class=" language-ruby"><code class="language-ruby">　p <span class="token punctuation">{</span>
　　　　border<span class="token punctuation">:</span> <span class="token punctuation">{</span>
　　　　　　color<span class="token punctuation">:</span> red<span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>
　　<span class="token punctuation">}</span></code></pre>
<p>注意，border 后面必须加上冒号。<br>在嵌套的代码块内，可以使用&amp;引用父元素。比如 a:hover 伪类，可以写成：</p>
<pre class=" language-ruby"><code class="language-ruby">a <span class="token punctuation">{</span>
　　　　<span class="token operator">&amp;</span><span class="token symbol">:hover</span> <span class="token punctuation">{</span> color<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#ffb3ff; }</span>
　　<span class="token punctuation">}</span></code></pre>
<h4 id="4-gt-注释"><a href="#4-gt-注释" class="headerlink" title="4&gt;注释"></a>4&gt;注释</h4><p>SASS 共有两种注释风格。<br>标准的 CSS 注释 /_ comment _/ ，会保留到编译后的文件。<br>单行注释 // comment，只保留在 SASS 源文件中，编译后被省略。<br>在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p>
<pre class=" language-ruby"><code class="language-ruby">     <span class="token operator">/</span><span class="token operator">*</span><span class="token operator">!</span>
　　　　重要注释！
　　<span class="token operator">*</span><span class="token operator">/</span></code></pre>
<h3 id="2-代码的重用"><a href="#2-代码的重用" class="headerlink" title="2.代码的重用"></a>2.代码的重用</h3><h4 id="1-gt-继承"><a href="#1-gt-继承" class="headerlink" title="1&gt; 继承"></a>1&gt; 继承</h4><p>SASS 允许一个选择器，继承另一个选择器。比如，现有 class1：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">.</span>class1 <span class="token punctuation">{</span>
　　　　border<span class="token punctuation">:</span> 1px solid <span class="token comment" spellcheck="true">#ddd;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>class2 要继承 class1，就要使用@extend 命令：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">.</span>class2 <span class="token punctuation">{</span>
　　　　<span class="token variable">@extend</span> <span class="token punctuation">.</span>class1<span class="token punctuation">;</span>
　　　　font<span class="token operator">-</span>size<span class="token punctuation">:</span><span class="token number">120</span><span class="token operator">%</span><span class="token punctuation">;</span>
　<span class="token punctuation">}</span></code></pre>
<h4 id="2-gt-Mixin"><a href="#2-gt-Mixin" class="headerlink" title="2&gt; Mixin"></a>2&gt; Mixin</h4><p>Mixin 有点像 C 语言的宏（macro），是可以重用的代码块。<br>使用@mixin 命令，定义一个代码块。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@mixin</span> left <span class="token punctuation">{</span>
　　　　float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>
　　　　margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>使用@include 命令，调用这个 mixin。</p>
<pre class=" language-ruby"><code class="language-ruby">div <span class="token punctuation">{</span>
　　　　<span class="token variable">@include</span> left<span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>mixin 的强大之处，在于可以指定参数和缺省值。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@mixin</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">:</span> 10px<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>
　　　　margin<span class="token operator">-</span>right<span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>使用的时候，根据需要加入参数：</p>
<pre class=" language-ruby"><code class="language-ruby">div <span class="token punctuation">{</span>
　　　　<span class="token variable">@include</span> <span class="token function">left</span><span class="token punctuation">(</span>20px<span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>下面是一个 mixin 的实例，用来生成浏览器前缀。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@mixin</span> <span class="token function">rounded</span><span class="token punctuation">(</span><span class="token variable">$vert</span><span class="token punctuation">,</span> <span class="token variable">$horz</span><span class="token punctuation">,</span> <span class="token variable">$radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span><span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
　　　　<span class="token operator">-</span>moz<span class="token operator">-</span>border<span class="token operator">-</span>radius<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
　　　　<span class="token operator">-</span>webkit<span class="token operator">-</span>border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span><span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>使用的时候，可以像下面这样调用：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#navbar li { @include rounded(top, left); }</span>
<span class="token comment" spellcheck="true">#footer { @include rounded(top, left, 5px); }</span></code></pre>
<h4 id="3-gt-颜色函数"><a href="#3-gt-颜色函数" class="headerlink" title="3&gt; 颜色函数"></a>3&gt; 颜色函数</h4><p>SASS 提供了一些内置的颜色函数，以便生成系列颜色。</p>
<pre class=" language-ruby"><code class="language-ruby">     <span class="token function">lighten</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#cc3, 10%) // #d6d65c</span>
　　<span class="token function">darken</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#cc3, 10%) // #a3a329</span>
　　<span class="token function">grayscale</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#cc3) // #808080</span>
　　<span class="token function">complement</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">#cc3) // #33c</span></code></pre>
<h4 id="4-gt-插入文件"><a href="#4-gt-插入文件" class="headerlink" title="4&gt; 插入文件"></a>4&gt; 插入文件</h4><p>@import 命令，用来插入外部文件。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@import</span> <span class="token string">"path/filename.scss"</span><span class="token punctuation">;</span></code></pre>
<p>如果插入的是.css 文件，则等同于 css 的 import 命令。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@import</span> <span class="token string">"foo.css"</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-高级用法"><a href="#3-高级用法" class="headerlink" title="3.高级用法"></a>3.高级用法</h3><h4 id="1-gt-条件语句"><a href="#1-gt-条件语句" class="headerlink" title="1&gt; 条件语句"></a>1&gt; 条件语句</h4><p>@if 可以用来判断：</p>
<pre class=" language-ruby"><code class="language-ruby">p <span class="token punctuation">{</span>
　　　　<span class="token variable">@if</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span> border<span class="token punctuation">:</span> 1px solid<span class="token punctuation">;</span> <span class="token punctuation">}</span>
　　　　<span class="token variable">@if</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span> border<span class="token punctuation">:</span> 2px dotted<span class="token punctuation">;</span> <span class="token punctuation">}</span>
　　<span class="token punctuation">}</span></code></pre>
<p>配套的还有@else 命令：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@if</span> <span class="token function">lightness</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token operator">%</span> <span class="token punctuation">{</span>
　　　　background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#000;</span>
　　<span class="token punctuation">}</span> <span class="token variable">@else</span> <span class="token punctuation">{</span>
　　　　background<span class="token operator">-</span>color<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#fff;</span>
　　<span class="token punctuation">}</span></code></pre>
<h4 id="2-gt-循环语句"><a href="#2-gt-循环语句" class="headerlink" title="2&gt; 循环语句"></a>2&gt; 循环语句</h4><p>SASS 支持 for 循环：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@for</span> <span class="token variable">$i</span> from <span class="token number">1</span> to <span class="token number">10</span> <span class="token punctuation">{</span>
　　　　<span class="token punctuation">.</span>border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
　　　　　　border<span class="token punctuation">:</span> #<span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span>px solid blue<span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>
　　<span class="token punctuation">}</span></code></pre>
<p>也支持 while 循环：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">$i</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">;</span>
　　<span class="token variable">@while</span> <span class="token variable">$i</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>
　　　　<span class="token punctuation">.</span>item<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$i</span><span class="token punctuation">}</span> <span class="token punctuation">{</span> width<span class="token punctuation">:</span> 2em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
　　　　<span class="token variable">$i</span><span class="token punctuation">:</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<p>each 命令，作用与 for 类似：</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@each</span> <span class="token variable">$member</span> <span class="token keyword">in</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token punctuation">{</span>
　　　　<span class="token punctuation">.</span>#<span class="token punctuation">{</span><span class="token variable">$member</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>
　　　　　　background<span class="token operator">-</span>image<span class="token punctuation">:</span> <span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"/image/<span class="token interpolation"><span class="token delimiter tag">#{</span>$member<span class="token delimiter tag">}</span></span>.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>
　　<span class="token punctuation">}</span></code></pre>
<h4 id="3-gt-自定义函数"><a href="#3-gt-自定义函数" class="headerlink" title="3&gt; 自定义函数"></a>3&gt; 自定义函数</h4><p>SASS 允许用户编写自己的函数。</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　<span class="token variable">@return</span> <span class="token variable">$n</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span>
　　<span class="token comment" spellcheck="true">#sidebar {</span>
　　　　width<span class="token punctuation">:</span> <span class="token function">double</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token punctuation">}</span></code></pre>
<h3 id="关于-sass-的常见使用总结："><a href="#关于-sass-的常见使用总结：" class="headerlink" title="关于 sass 的常见使用总结："></a>关于 sass 的常见使用总结：</h3><h4 id="1-gt-变量-1"><a href="#1-gt-变量-1" class="headerlink" title="1&gt;变量"></a>1&gt;变量</h4><pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>定义变量
<span class="token variable">$blue</span> <span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#1875e7;</span>
<span class="token variable">$side</span> <span class="token punctuation">:</span> left<span class="token punctuation">;</span>

<span class="token operator">/</span><span class="token operator">/</span>常规使用
div <span class="token punctuation">{</span>  　
          color <span class="token punctuation">:</span> <span class="token variable">$blue</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>

<span class="token operator">/</span><span class="token operator">/</span>字符串中使用 #<span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">.</span>rounded <span class="token punctuation">{</span>
　　border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$side</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> 5px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="2-gt-继承"><a href="#2-gt-继承" class="headerlink" title="2&gt;继承"></a>2&gt;继承</h4><p>使用@extend 来实现一个类对另一个类的继承</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token punctuation">.</span>class1 <span class="token punctuation">{</span>
　　　　border<span class="token punctuation">:</span> 1px solid <span class="token comment" spellcheck="true">#ddd;</span>
 <span class="token punctuation">}</span>

<span class="token operator">/</span><span class="token operator">/</span>class2 继承 class1<span class="token punctuation">,</span>使用 <span class="token variable">@extend</span>
<span class="token punctuation">.</span>class2 <span class="token punctuation">{</span>
　　　　<span class="token variable">@extend</span> <span class="token punctuation">.</span>class1<span class="token punctuation">;</span>
　　　　font<span class="token operator">-</span>size<span class="token punctuation">:</span><span class="token number">120</span><span class="token operator">%</span><span class="token punctuation">;</span>
　<span class="token punctuation">}</span></code></pre>
<h4 id="3-gt-mixin"><a href="#3-gt-mixin" class="headerlink" title="3&gt;mixin"></a>3&gt;mixin</h4><p><strong>使用@mixin 定义一个代码块，使用@include 命令，调用这个 mixin</strong></p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span>常规使用
<span class="token variable">@mixin</span> left<span class="token punctuation">{</span>
      float<span class="token punctuation">:</span> left<span class="token punctuation">;</span>
　　 margin<span class="token operator">-</span>left<span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

div <span class="token punctuation">{</span>
　　<span class="token variable">@include</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token operator">/</span><span class="token operator">/</span>用来生成浏览器的前缀，可设置变量和变量默认值
<span class="token variable">@mixin</span> <span class="token function">rounded</span><span class="token punctuation">(</span><span class="token variable">$vert</span><span class="token punctuation">,</span> <span class="token variable">$horz</span><span class="token punctuation">,</span> <span class="token variable">$radius</span><span class="token punctuation">:</span> 10px<span class="token punctuation">)</span> <span class="token punctuation">{</span>
　　　　border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span><span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
　　　　<span class="token operator">-</span>moz<span class="token operator">-</span>border<span class="token operator">-</span>radius<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
　　　　<span class="token operator">-</span>webkit<span class="token operator">-</span>border<span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$vert</span><span class="token punctuation">}</span><span class="token operator">-</span>#<span class="token punctuation">{</span><span class="token variable">$horz</span><span class="token punctuation">}</span><span class="token operator">-</span>radius<span class="token punctuation">:</span> <span class="token variable">$radius</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#navbar li {</span>
    <span class="token variable">@include</span> <span class="token function">rounded</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">#footer {</span>
    <span class="token variable">@include</span> <span class="token function">rounded</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> left<span class="token punctuation">,</span> 5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>** 4&gt;自定义函数**</p>
<pre class=" language-ruby"><code class="language-ruby"><span class="token variable">@function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
　<span class="token variable">@return</span> <span class="token variable">$n</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">#sidebar {</span>
　　width<span class="token punctuation">:</span> <span class="token function">double</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="less-用法："><a href="#less-用法：" class="headerlink" title="less 用法："></a>less 用法：</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><strong>1&gt;值变量</strong></p>
<pre class=" language-less"><code class="language-less"><span class="token variable">@color<span class="token punctuation">:</span></span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>2&gt;选择器变量(</strong>变量名 必须使用大括号包裹 @{变量名}<strong>)</strong></p>
<pre class=" language-less"><code class="language-less"><span class="token variable">@Wrap<span class="token punctuation">:</span></span> wrap<span class="token punctuation">;</span>
<span class="token variable">@mySelector<span class="token punctuation">:</span></span> #wrap<span class="token punctuation">;</span>

<span class="token selector">@{mySelector}</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#999</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.@{Wrap}</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#@{Wrap}</span><span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span><span class="token hexcode">#666</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre>
<p>3&gt;<strong>属性变量(</strong>变量名 必须使用大括号包裹 @{变量名}<strong>)</strong></p>
<pre class=" language-less"><code class="language-less"><span class="token variable">@borderStyle<span class="token punctuation">:</span></span> border<span class="token operator">-</span>style<span class="token punctuation">;</span>
<span class="token variable">@Soild<span class="token punctuation">:</span></span> solid<span class="token punctuation">;</span>

<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">@{borderStyle}</span><span class="token punctuation">:</span> <span class="token variable">@Soild</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量名 必须使用大括号包裹</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>4&gt; url 变量</strong></p>
<pre class=" language-less"><code class="language-less"><span class="token variable">@images<span class="token punctuation">:</span></span> <span class="token string">"../img"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要加引号</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url("@{images}/dog.png")</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//变量名 必须使用大括号包裹</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>5&gt;声明变量(引用一段代码)</strong><br>有点类似于 下面的 混合方法</p>
<ul>
<li>结构: @name: { 属性: 值 ;};</li>
<li>使用：@name();</li>
</ul>
<pre class=" language-less"><code class="language-less"><span class="token atrule">@background<span class="token punctuation">:</span></span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token variable">@background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>6&gt;变量运算</strong></p>
<ul>
<li>加减法时 以第一个数据的单位为基准</li>
<li>乘除法时 注意单位一定要统一</li>
</ul>
<pre class=" language-less"><code class="language-less"><span class="token variable">@width<span class="token punctuation">:</span></span> <span class="token number">300</span>px<span class="token punctuation">;</span>
<span class="token variable">@color<span class="token punctuation">:</span></span> <span class="token hexcode">#222</span><span class="token punctuation">;</span>

<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width-20</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@width-20</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token variable">@width-20</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span> <span class="token operator">+</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">280</span>px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">1400</span>px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#444</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>7&gt;变量作用域</strong><br>一句话理解就是：<strong>就近原则</strong>，不要跟我提闭包。</p>
<pre class=" language-less"><code class="language-less"><span class="token variable">@var<span class="token punctuation">:</span></span> <span class="token variable">@a</span><span class="token punctuation">;</span>
<span class="token variable">@a<span class="token punctuation">:</span></span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@var</span><span class="token punctuation">;</span>
  <span class="token variable">@a<span class="token punctuation">:</span></span> <span class="token number">9%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">9%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>8&gt;<strong>用变量去定义变量</strong></p>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token variable">@fnord<span class="token punctuation">:</span></span> <span class="token string">"I am fnord."</span><span class="token punctuation">;</span>
<span class="token variable">@var<span class="token punctuation">:</span></span> <span class="token string">"fnord"</span><span class="token punctuation">;</span>
<span class="token selector">#wrap::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token variable">@@var</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将@var替换为其值 content:@fnord;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#wrap::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"I am fnord."</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p><strong>1&gt; &amp; 的妙用</strong><br>&amp; ：代表的上一层选择器的名字，此例便是<code>header</code>。</p>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#header</span> <span class="token punctuation">{</span>
  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Less is more!"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.title</span> <span class="token punctuation">{</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">&amp;_content</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//理解方式：直接把 &amp; 替换成 #header</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#header::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Less is more!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#header .title</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//嵌套了</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#header_content</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//没有嵌套！</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p><strong>2&gt;媒体查询</strong><br>在以往的工作中，我们使用 媒体查询，都要把一个元素 分开写</p>
<pre class=" language-less"><code class="language-less"><span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token atrule">@media screen and <span class="token punctuation">(</span>max-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">#wrap</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>Less 提供了一个十分便捷的方式</li>
</ul>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//something...</span>
  <span class="token atrule">@media screen</span> <span class="token punctuation">{</span>
    <span class="token atrule">@media <span class="token punctuation">(</span>max-width<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token atrule">@media tv</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token atrule">@media screen and <span class="token punctuation">(</span>maxwidth<span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token selector">#main</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token atrule">@media tv</span> <span class="token punctuation">{</span>
  <span class="token selector">#main</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2000</span>px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>唯一的缺点就是 每一个元素都会编译出自己 <code>@media</code> 声明，并不会合并。</li>
<li></li>
</ul>
<p><strong>3&gt;实战技巧</strong><br>可以借助 Less 在元素中，去定义自己的私有样式。</p>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// something..</span>
  <span class="token selector">&amp;.show</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">.show</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-less"><code class="language-less">const main = document<span class="token number">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
main<span class="token number">.</span>classList<span class="token number">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"show"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
复制代码</code></pre>
<ul>
<li>结果：</li>
</ul>
<pre class=" language-less"><code class="language-less"><span class="token selector">#main.show</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.show</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//会被覆盖。</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="混合方法"><a href="#混合方法" class="headerlink" title="混合方法"></a>混合方法</h3><ol>
<li><strong>无参数方法</strong>方法犹如 声明的集合，使用时 直接键入名称即可。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.card</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 等价于 .card()</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f6f6f6</span><span class="token punctuation">;</span>
    <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
  <span class="token mixin-usage function">.card</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于.card();</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#f6f6f6</span><span class="token punctuation">;</span>
  <span class="token property">-webkit-box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>px <span class="token number">2</span>px <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">.58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li>其中 <code>.card</code> 与 <code>.card()</code> 是等价的。 个人建议，为了避免 代码混淆，应写成 :</li>
</ol>
<pre><code>.card(){
  //something...
}
#wrap{
  .card();
}
复制代码</code></pre><ol>
<li>要点：<ul>
<li><code>.</code> 与 <code>#</code> 皆可作为 方法前缀。</li>
<li>方法后写不写 <code>()</code> 看个人习惯。</li>
</ul>
</li>
<li><strong>默认参数方法</strong><ul>
<li>Less 可以使用默认参数，如果 没有传参数，那么将使用默认参数。</li>
<li><code>@arguments</code> 犹如 JS 中的 <code>arguments</code> 指代的是 全部参数。</li>
<li>传的参数中 必须带着单位。</li>
</ul>
</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.border(<span class="token variable">@a</span>:10px,<span class="token variable">@b</span>:50px,<span class="token variable">@c</span>:30px,<span class="token variable">@color</span>:#000)</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token variable">@color</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指代的是 全部参数</span>
<span class="token punctuation">}</span>

<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">.border</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">,</span><span class="token number">5</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须带着单位</span>
<span class="token punctuation">}</span>

<span class="token selector">#wrap</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">.border</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#content</span><span class="token punctuation">{</span>
  <span class="token mixin-usage function">.border</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于 .border()</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px red<span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px<span class="token punctuation">,</span><span class="token number">5</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">50</span>px <span class="token number">30</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#content</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token number">1</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">50</span>px <span class="token number">30</span>px <span class="token hexcode">#000</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>方法的匹配模式</strong>与 面向对象中的多态 很相似</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.triangle(top,<span class="token variable">@width</span>:20px,<span class="token variable">@color</span>:#000)</span> <span class="token punctuation">{</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent <span class="token variable">@color</span> transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.triangle(right,<span class="token variable">@width</span>:20px,<span class="token variable">@color</span>:#000)</span> <span class="token punctuation">{</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent <span class="token variable">@color</span> transparent transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.triangle(bottom,<span class="token variable">@width</span>:20px,<span class="token variable">@color</span>:#000)</span> <span class="token punctuation">{</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token variable">@color</span> transparent transparent transparent<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.triangle(left,<span class="token variable">@width</span>:20px,<span class="token variable">@color</span>:#000)</span> <span class="token punctuation">{</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent transparent <span class="token variable">@color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.triangle(<span class="token variable">@_</span>,<span class="token variable">@width</span>:20px,<span class="token variable">@color</span>:#000)</span> <span class="token punctuation">{</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token mixin-usage function">.triangle</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">50</span>px<span class="token punctuation">,</span> <span class="token hexcode">#999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token property">border-color</span><span class="token punctuation">:</span> transparent transparent transparent <span class="token hexcode">#999</span><span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> solid<span class="token punctuation">;</span>
  <span class="token property">border-width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ol>
<li>要点<ul>
<li>第一个参数 <code>left</code> 要会找到方法中匹配程度最高的，如果匹配程度相同，将全部选择，并存在着样式覆盖替换。</li>
<li>如果匹配的参数 是变量，则将会匹配，如 <code>@_</code> 。</li>
</ul>
</li>
<li><strong>方法的命名空间</strong>让方法更加规范</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#card()</span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#723232</span><span class="token punctuation">;</span>
    <span class="token selector">.d(<span class="token variable">@w</span>:300px)</span><span class="token punctuation">{</span>
        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@w</span><span class="token punctuation">;</span>

        <span class="token selector">#a(<span class="token variable">@h</span>:300px)</span><span class="token punctuation">{</span>
            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@h</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以使用上一层传进来的方法</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">#card > .d > #a</span><span class="token punctuation">(</span><span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父元素不能加 括号</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">#card .d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#con</span><span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//不得单独使用命名空间的方法</span>
    <span class="token comment" spellcheck="true">//.d() 如果前面没有引入命名空间 #card ，将会报错</span>

    #card<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等价于 #card();</span>
    <span class="token number">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">20</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//必须先引入 #card</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
  <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#con</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li>要点<ul>
<li>在 CSS 中<code>&gt;</code> 选择器，选择的是 儿子元素，就是 必须与父元素 有直接血源的元素。</li>
<li>在引入命令空间时，如使用 <code>&gt;</code> 选择器，父元素不能加 括号。</li>
<li>不得单独使用命名空间的方法 必须先引入命名空间，才能使用 其中方法。</li>
<li>子方法 可以使用上一层传进来的方法</li>
</ul>
</li>
<li><strong>方法的条件筛选</strong>Less 没有 if else，可是它有 <code>when</code></li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#card</span><span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// and 运算符 ，相当于 与运算 &amp;&amp;，必须条件全部符合才会执行</span>
    <span class="token selector">.border(<span class="token variable">@width</span>,<span class="token variable">@color</span>,<span class="token variable">@style</span>) when (<span class="token variable">@width</span>>100px) and(<span class="token variable">@color</span>=#999)</span><span class="token punctuation">{</span>
        <span class="token property">border</span><span class="token punctuation">:</span><span class="token variable">@style</span> <span class="token variable">@color</span> <span class="token variable">@width</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// not 运算符，相当于 非运算 !，条件为 不符合才会执行</span>
    <span class="token selector">.background(<span class="token variable">@color</span>) when not (<span class="token variable">@color</span>>=#222)</span><span class="token punctuation">{</span>
        <span class="token property">background</span><span class="token punctuation">:</span><span class="token variable">@color</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">// , 逗号分隔符：相当于 或运算 ||，只要有一个符合条件就会执行</span>
    <span class="token selector">.font(<span class="token variable">@size</span>:20px) when (<span class="token variable">@size</span>>50px) , (<span class="token variable">@size</span>&lt;100px)</span><span class="token punctuation">{</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">@size</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">#card>.border</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">,</span><span class="token hexcode">#999</span><span class="token punctuation">,</span>solid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token mixin-usage function">#card .background</span><span class="token punctuation">(</span><span class="token hexcode">#111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token mixin-usage function">#card > .font</span><span class="token punctuation">(</span><span class="token number">40</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span>solid <span class="token hexcode">#999</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#111</span><span class="token punctuation">;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">40</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li>要点<ul>
<li>比较运算有： &gt; &gt;= = =&lt; &lt;。</li>
<li>= 代表的是等于</li>
<li>除去关键字 true 以外的值都被视为 false：</li>
</ul>
</li>
<li><strong>数量不定的参数</strong><br>如果你希望你的方法接受数量不定的参数，你可以使用… ，犹如 ES6 的扩展运算符。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.boxShadow(...)</span><span class="token punctuation">{</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.textShadow(<span class="token variable">@a</span>,...)</span><span class="token punctuation">{</span>
    <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token variable">@arguments</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">.boxShadow</span><span class="token punctuation">(</span><span class="token number">1</span>px<span class="token punctuation">,</span><span class="token number">4</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token mixin-usage function">.textShadow</span><span class="token punctuation">(</span><span class="token number">1</span>px<span class="token punctuation">,</span><span class="token number">4</span>px<span class="token punctuation">,</span><span class="token number">30</span>px<span class="token punctuation">,</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">4</span>px <span class="token number">30</span>px red<span class="token punctuation">;</span>
  <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">4</span>px <span class="token number">30</span>px red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>方法使用 important！</strong><br>使用方法 非常简单，在方法名后 加上关键字即可。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.border</span><span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px red<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
    <span class="token mixin-usage function">.border</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
    <span class="token property">border</span><span class="token punctuation">:</span> solid <span class="token number">1</span>px red <span class="token important">!important</span><span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>循环方法</strong><br>Less 并没有提供 for 循环功能，但这也难不倒 聪明的程序员，使用递归去实现。 下面是官网中的一个 Demo，模拟了生成栅格系统。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.generate-columns(4);
.generate-columns(<span class="token variable">@n</span>, <span class="token variable">@i</span>: 1) when (<span class="token variable">@i</span> =&lt; <span class="token variable">@n</span>)</span> <span class="token punctuation">{</span>
  <span class="token selector">.column-@{i}</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token variable">@i</span> <span class="token operator">*</span> <span class="token number">100%</span> <span class="token operator">/</span> <span class="token variable">@n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token number">.</span><span class="token function">generate-columns</span><span class="token punctuation">(</span><span class="token variable">@n</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">@i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">.column-1</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.column-2</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.column-3</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">75%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.column-4</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>属性拼接方法</strong><code>+_</code> 代表的是 空格；<code>+</code> 代表的是 逗号。<ul>
<li>逗号</li>
</ul>
</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.boxShadow()</span> <span class="token punctuation">{</span>
    <span class="token property">box-shadow+</span><span class="token punctuation">:</span> inset <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token hexcode">#555</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.main</span> <span class="token punctuation">{</span>
  <span class="token mixin-usage function">.boxShadow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow+</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">.main</span> <span class="token punctuation">{</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> inset <span class="token number">0</span> <span class="token number">0</span> <span class="token number">10</span>px <span class="token hexcode">#555</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">20</span>px black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ul>
<li>空格</li>
</ul>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.Animation()</span> <span class="token punctuation">{</span>
  <span class="token property">transform+_</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.main</span> <span class="token punctuation">{</span>
  <span class="token mixin-usage function">.Animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">transform+_</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">15</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">.main</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">15</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>实战技巧</strong><br>下面是官网中的一个非常赞的 Demo</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.average(<span class="token variable">@x</span>, <span class="token variable">@y</span>)</span> <span class="token punctuation">{</span>
  <span class="token variable">@average<span class="token punctuation">:</span></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">@x</span> <span class="token operator">+</span> <span class="token variable">@y</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token mixin-usage function">.average</span><span class="token punctuation">(</span><span class="token number">16</span>px<span class="token punctuation">,</span> <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用 方法</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token variable">@average</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用返回值</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">33</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<p>可以说 Less 是一门优雅编程语言。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>extend 是 Less 的一个伪类。它可继承 所匹配声明中的全部样式。</p>
<ol>
<li><strong>extend 关键字的使用</strong></li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.animation</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease<span class="token operator">-</span>out<span class="token punctuation">;</span>
  <span class="token selector">.hide</span> <span class="token punctuation">{</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
  &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>animation<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#con</span> <span class="token punctuation">{</span>
  &amp;<span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token number">.</span>animation <span class="token number">.</span>hide<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">.animation,
#main</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.3</span>s ease<span class="token operator">-</span>out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.animation .hide,
#con</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ol>
<li><strong>all 全局搜索替换</strong><br>使用选择器匹配到的 全部声明。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span> <span class="token punctuation">{</span>
  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap:extend(#main all)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#main,#wrap</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#main:after, #wrap:after</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Less is good!"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>减少代码的重复性</strong><br>从表面 看来，extend 与 方法 最大的差别，就是 extend 是同个选择器共用同一个声明，而 方法 是使用自己的声明，这无疑 增加了代码的重复性。<br>方法示例 与上面的 extend 进行对比：</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">.Method</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>
      <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token mixin-usage function">.Method</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
  <span class="token mixin-usage function">.Method</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成的 CSS */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token selector">&amp;:after</span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token selector">&amp;:after</span><span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"Less is good!"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li><strong>要点</strong><em>翻译官网</em><ul>
<li>选择器和扩展之间 是允许有空格的：pre:hover :extend(div pre).</li>
<li>可以有多个扩展: pre:hover:extend(div pre):extend(.bucket tr) - 注意这与 pre:hover:extend(div pre, .bucket tr)一样。</li>
<li>这是不可以的，扩展必须在最后 : pre:hover:extend(div pre).nth-child(odd)。</li>
<li>如果一个规则集包含多个选择器，所有选择器都可以使用 extend 关键字。</li>
</ul>
</li>
<li>导入<ol>
<li>导入 less 文件 可省略后缀</li>
</ol>
</li>
</ol>
<pre class=" language-less"><code class="language-less">import <span class="token string">"main"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//等价于</span>
import <span class="token string">"main.less"</span><span class="token punctuation">;</span>
复制代码</code></pre>
<ol>
<li><code>@import</code> 的位置可随意放置</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token variable">@import</span> <span class="token string">"style"</span><span class="token punctuation">;</span>
复制代码</code></pre>
<ol>
<li><strong>reference</strong><br>Less 中 最强大的特性 使用 引入的 Less 文件，但不会 编译它。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token atrule">@import <span class="token punctuation">(</span>reference<span class="token punctuation">)</span> "bootstrap.less";
#wrap<span class="token punctuation">:</span>extend<span class="token punctuation">(</span>.navbar all<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span></code></pre>
<ol>
<li><p>翻译官网：</p>
<blockquote>
<p>使用@import (reference)导入外部文件，但不会添加 把导入的文件 编译到最终输出中，只引用。</p>
</blockquote>
</li>
<li><p><strong>once</strong></p>
<blockquote>
<p>@import 语句的默认行为。这表明相同的文件只会被导入一次，而随后的导入文件的重复代码都不会解析。</p>
</blockquote>
</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token variable">@import</span> <span class="token punctuation">(</span>once<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span>
<span class="token variable">@import</span> <span class="token punctuation">(</span>once<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// this statement will be ignored</span>
复制代码</code></pre>
<ol>
<li><strong>multiple</strong><blockquote>
<p>使用@import (multiple)允许导入多个同名文件。</p>
</blockquote>
</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token comment" spellcheck="true">// file: foo.less</span>
<span class="token selector">.a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// file: main.less</span>
<span class="token variable">@import</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span>
<span class="token variable">@import</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token string">"foo.less"</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">.a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol>
<li><strong>判断类型</strong><ul>
<li>isnumber<blockquote>
<p>判断给定的值 是否 是一个数字。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token hexcode">#ff0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span>blue<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">56</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token number">7.8%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span>keyword<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span>
<span class="token function">isnumber</span><span class="token punctuation">(</span><span class="token url">url(...)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>
复制代码</code></pre>
<ul>
<li><p>iscolor</p>
<blockquote>
<p>判断给定的值 是否 是一个颜色。</p>
</blockquote>
</li>
<li><p>isurl</p>
<blockquote>
<p>判断给定的值 是否 是一个 url 。</p>
</blockquote>
</li>
</ul>
<ol>
<li><p><strong>颜色操作</strong></p>
<ul>
<li><p>saturate</p>
<blockquote>
<p>增加一定数值的颜色饱和度。</p>
</blockquote>
</li>
<li><p>lighten</p>
<blockquote>
<p>增加一定数值的颜色亮度。</p>
</blockquote>
</li>
<li><p>darken</p>
<blockquote>
<p>降低一定数值的颜色亮度。</p>
</blockquote>
</li>
<li><p>fade</p>
<blockquote>
<p>给颜色设定一定数值的透明度。</p>
</blockquote>
</li>
<li><p>mix</p>
<blockquote>
<p>根据比例混合两种颜色。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>数学函数</strong></p>
<ul>
<li><p>ceil</p>
<blockquote>
<p>向上取整。</p>
</blockquote>
</li>
<li><p>floor</p>
<blockquote>
<p>向下取整。</p>
</blockquote>
</li>
<li><p>percentage</p>
<blockquote>
<p>将浮点数转换为百分比字符串。</p>
</blockquote>
</li>
<li><p>round</p>
<blockquote>
<p>四舍五入。</p>
</blockquote>
</li>
<li><p>sqrt</p>
<blockquote>
<p>计算一个数的平方根。</p>
</blockquote>
</li>
<li><p>abs</p>
<blockquote>
<p>计算数字的绝对值，原样保持单位。</p>
</blockquote>
</li>
<li><p>pow</p>
<blockquote>
<p>计算一个数的乘方。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
<p>由于 文章 篇幅有限，所以 只能介绍一些 使用效率高的函数。<br>如果你想了解更多，可以去官网的<a href="http://lesscss.cn/functions/" target="_blank" rel="noopener">函数链接</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><strong>注释</strong><ul>
<li>/* */ CSS 原生注释，会被编译在 CSS 文件中。</li>
<li>/   / Less 提供的一种注释，不会被编译在 CSS 文件中。</li>
</ul>
</li>
<li><strong>避免编译</strong></li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span>~<span class="token string">'calc(300px-30px)'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token selector">#main</span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span><span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">300</span>px<span class="token operator">-</span><span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li>结构： <code>~&#39; 值 &#39;</code></li>
<li><strong>变量拼串</strong><br>在平时工作中，这种需求 太常见了。 在下面例子中， 实现了不同的 transtion-delay、animation、@keyframes</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token selector">.judge(<span class="token variable">@i</span>) when(<span class="token variable">@i</span>=1)</span><span class="token punctuation">{</span>
  <span class="token variable">@size<span class="token punctuation">:</span></span><span class="token number">15</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.judge(<span class="token variable">@i</span>) when(<span class="token variable">@i</span>>1)</span><span class="token punctuation">{</span>
  <span class="token variable">@size<span class="token punctuation">:</span></span><span class="token number">16</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.loopAnimation(<span class="token variable">@i</span>) when (<span class="token variable">@i</span>&lt;16)</span> <span class="token punctuation">{</span>

  <span class="token selector">.circle:nth-child(@{i})</span><span class="token punctuation">{</span>
      <span class="token mixin-usage function">.judeg</span><span class="token punctuation">(</span><span class="token variable">@i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token variable">@size</span> <span class="token variable">@size</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token property">animation</span><span class="token punctuation">:</span> ~<span class="token string">"circle-@{i}"</span> <span class="token variable">@duration</span> infinite <span class="token variable">@ease</span><span class="token punctuation">;</span>
      <span class="token property">transition-delay</span><span class="token punctuation">:</span>~<span class="token string">"@{i}ms"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token atrule">@keyframes ~"circle-@</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token selector">"</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// do something...</span>
  <span class="token punctuation">}</span>
  <span class="token number">.</span><span class="token function">loopAnimation</span><span class="token punctuation">(</span><span class="token variable">@i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
复制代码</code></pre>
<ol>
<li>结构： <code>~&quot;字符@{变量}字符&quot;</code>;</li>
<li><strong>使用 JS</strong><br>因为 Less 是由 JS 编写，所以 Less 有一得天独厚的特性：代码中使用 Javascript 。</li>
</ol>
<pre class=" language-less"><code class="language-less"><span class="token comment" spellcheck="true">/* Less */</span>
<span class="token variable">@content<span class="token punctuation">:</span></span>` <span class="token string">"aaa"</span><span class="token number">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>`<span class="token punctuation">;</span>
<span class="token selector">#randomColor</span> <span class="token punctuation">{</span>
  <span class="token variable">@randomColor<span class="token punctuation">:</span></span> ~<span class="token string">"rgb(`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`,`Math.round(Math.random() * 256)`)"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> ~<span class="token string">"`Math.round(Math.random() * 100)`px"</span><span class="token punctuation">;</span>
  <span class="token selector">&amp;:after</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token variable">@content</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token property">height</span><span class="token punctuation">:</span> ~<span class="token string">"`window.innerHeight`px"</span><span class="token punctuation">;</span>
  <span class="token property">alert</span><span class="token punctuation">:</span> ~<span class="token string">"`alert(1)`"</span><span class="token punctuation">;</span>
  <span class="token mixin-usage function">#randomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">@randomColor</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">/* 生成后的 CSS */</span>
<span class="token comment" spellcheck="true">// 弹出 1</span>
<span class="token selector">#wrap</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 随机值（<span class="token number">0</span>~<span class="token number">100</span>）px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">743</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//由电脑而异</span>
  <span class="token property">background</span><span class="token punctuation">:</span> 随机颜色<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">#wrap::after</span> <span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://www.ruanyifeng.com/blog/2012/06/sass.html" target="_blank" rel="noopener">https://www.ruanyifeng.com/blog/2012/06/sass.html</a><br><a href="https://juejin.im/post/6844903520441729037" target="_blank" rel="noopener">https://juejin.im/post/6844903520441729037</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>less</tag>
        <tag>sass</tag>
        <tag>scss</tag>
        <tag>stylus</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（5）http，https</title>
    <url>/leader755/5102.html</url>
    <content><![CDATA[<h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><p>http 状态码是表示服务器对请求的响应状态，主要分为以下几个部分<br>1<strong>：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。<br>2</strong>：表示请求成功，<br>3<strong>：表示重定向<br>4</strong>：表示客户端错误<br>5**：表示服务器端错误<br>100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收<br>200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。<br>202（Accepted），服务器已接受请求，但尚未处理。<br>204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容<br>205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与 204 响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。<br>206（Partial-Content），服务器已经成功处理了部分 GET 请求。<br>301（Moved-Permanently），永久性重定向<br>302（Moved-Temporarily），暂时性重定向<br>304（Not-Modified），浏览器端缓存的资源依然有效<br>400（Bad-Reques），请求有误，当前请求无法被服务器理解。<br>401（Unauthorized），当前请求需要用户验证。<br>403（Forbidden），服务器已经理解请求，但是拒绝执行它。<br>404（Not-Found），请求的资源没有被找到<br>500（Interval Server Error），服务器内部错误<br>502（Bad GateWay），网关出错<br>503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。<br>504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI 标识出的服务器，例如 HTTP、FTP、LDAP）或者辅助服务器（例如 DNS）收到响应。</p>
<h1 id="HTTP-之状态码"><a href="#HTTP-之状态码" class="headerlink" title="HTTP 之状态码"></a>HTTP 之状态码</h1><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p>
<h6 id="1xx：指示信息–表示请求已接收，继续处理"><a href="#1xx：指示信息–表示请求已接收，继续处理" class="headerlink" title="1xx：指示信息–表示请求已接收，继续处理"></a>1xx：指示信息–表示请求已接收，继续处理</h6><h6 id="2xx：成功–表示请求已被成功接收、理解、接受"><a href="#2xx：成功–表示请求已被成功接收、理解、接受" class="headerlink" title="2xx：成功–表示请求已被成功接收、理解、接受"></a>2xx：成功–表示请求已被成功接收、理解、接受</h6><h6 id="3xx：重定向–要完成请求必须进行更进一步的操作"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作"></a>3xx：重定向–要完成请求必须进行更进一步的操作</h6><h6 id="4xx：客户端错误–请求有语法错误或请求无法实现"><a href="#4xx：客户端错误–请求有语法错误或请求无法实现" class="headerlink" title="4xx：客户端错误–请求有语法错误或请求无法实现"></a>4xx：客户端错误–请求有语法错误或请求无法实现</h6><h6 id="5xx：服务器端错误–服务器未能实现合法的请求"><a href="#5xx：服务器端错误–服务器未能实现合法的请求" class="headerlink" title="5xx：服务器端错误–服务器未能实现合法的请求"></a>5xx：服务器端错误–服务器未能实现合法的请求</h6><p>常见状态码：</p>
<pre><code>200 OK                        //客户端请求成功
400 Bad Request               //客户端请求有语法错误，不能被服务器所理解
401 Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
403 Forbidden                 //服务器收到请求，但是拒绝提供服务
404 Not Found                 //请求资源不存在，eg：输入了错误的URL
500 Internal Server Error     //服务器发生不可预期的错误
503 Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常</code></pre><p>更多状态码<a href="https://link.jianshu.com?t=http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">http://www.runoob.com/http/http-status-codes.html</a></p>
<h1 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h1><p>根据 HTTP 标准，HTTP 请求可以使用多种请求方法。<br>HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD 方法。<br>HTTP1.1 新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<pre><code>GET  请求指定的页面信息，并返回实体主体。
HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。
PUT  从客户端向服务器传送的数据取代指定的文档的内容。
DELETE   请求服务器删除指定的页面。
CONNECT  HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。
OPTIONS  允许客户端查看服务器的性能。
TRACE    回显服务器收到的请求，主要用于测试或诊断。</code></pre><p>作者：RaphetS<br>链接：<a href="https://www.jianshu.com/p/80e25cb1d81a" target="_blank" rel="noopener">https://www.jianshu.com/p/80e25cb1d81a</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>##</p>
<h2 id="https-和-http"><a href="#https-和-http" class="headerlink" title="https 和 http"></a>https 和 http</h2><p>说一下 http 和 https<br>https 的 SSL 加密是在传输层实现的。 (1)http 和 https 的基本概念<br>http: 超文本传输协议，是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从 WWW 服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。<br>https: 是以安全为目标的 HTTP 通道，简单讲是 HTTP 的安全版，即 HTTP 下加入 SSL 层，HTTPS 的安全基础是 SSL，因此加密的详细内容就需要 SSL。<br>https 协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性。<br>(2)http 和 https 的区别？<br>http 传输的数据都是未加密的，也就是明文的，网景公司设置了 SSL 协议来对 http 协议传输的数据进行加密处理，简单来说 https 协议是由 http 和 ssl 协议构建的可进行加密传输和身份认证的网络协议，比 http 协议的安全性更高。 主要的区别如下：<br>Https 协议需要 ca 证书，费用较高。<br>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。<br>使用不同的链接方式，端口也不同，一般而言，http 协议的端口为 80，https 的端口为 443<br>http 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全。<br>(3)https 协议的工作原理<br>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤，如图所示。<br>客户使用 https url 访问服务器，则要求 web 服务器建立 ssl 链接。<br>web 服务器接收到客户端的请求之后，会将网站的证书（证书中包含了公钥），返回或者说传输给客户端。<br>客户端和 web 服务器端开始协商 SSL 链接的安全等级，也就是加密等级。<br>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥来加密会话密钥，并传送给网站。<br>web 服务器通过自己的私钥解密出会话密钥。<br>web 服务器通过会话密钥加密与客户端之间的通信。<br>(4)https 协议的优点<br>使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；<br>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性。<br>HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。<br>谷歌曾在 2014 年 8 月份调整搜索引擎算法，并称“比起同等 HTTP 网站，采用 HTTPS 加密的网站在搜索结果中的排名将会更高”。<br>(5)https 协议的缺点<br>https 握手阶段比较费时，会使页面加载时间延长 50%，增加 10%~20%的耗电。<br>https 缓存不如 http 高效，会增加数据开销。<br>SSL 证书也需要钱，功能越强大的证书费用越高。<br>SSL 证书需要绑定 IP，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。</p>
<h2 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h2><p>在讲解 HTTP 与 HTTPS 之前,有个知识点必须提前讲解下,那就是 TCP/IP 协议.<br>从字面意义上讲，有人可能会认为 TCP/IP 是指 TCP 和 IP 两种协议。实际生活当中有时也确实就是指这两种协议。然而在很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。具体来说，IP 或 ICMP、TCP 或 UDP、TELNET 或 FTP、以及 HTTP 等都属于 TCP/IP 协议。他们与 TCP 或 IP 的关系紧密，是互联网必不可少的组成部分。TCP/IP 一词泛指这些协议，因此，有时也称 <strong>TCP/IP 为网际协议群。</strong><br>互联网进行通信时，需要相应的网络协议，TCP/IP 原本就是为使用互联网而开发制定的协议族。因此，<strong>互联网的协议就是 TCP/IP，TCP/IP 就是互联网的协议。</strong><br>更详细全面的可以查看 <a href="https://juejin.im/post/6844903510509633550" target="_blank" rel="noopener">一篇文章带你熟悉 TCP/IP 协议（网络协议篇二）</a></p>
<h3 id="TCP-协议（传输控制协议）-应用程序之间的通信"><a href="#TCP-协议（传输控制协议）-应用程序之间的通信" class="headerlink" title="TCP 协议（传输控制协议）:应用程序之间的通信"></a>TCP 协议（传输控制协议）:应用程序之间的通信</h3><p><strong>TCP 确保数据包以正确的次序到达，并且尝试确认数据包的内容没有改变。</strong> TCP 在 IP 地址之上引端口（port），它允许计算机通过网络提供各种服务。一些端口号为不同的服务保留，而且这些端口号是众所周知。<br>服务或者守护进程：在提供服务的机器上，有程序监听特定端口上的通信流。例如大多数电子邮件通信流出现在端口 25 上，用于 wwww 的 HTTP 通信流出现在 80 端口上。<br>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信，占用两个计算机之间整个的通信线路。TCP 用于从应用程序到网络的数据传输控制。TCP 负责在数据传送之前将它们分割为 IP 包，然后在它们到达的时候将它们重组。<br><strong>TCP/IP 就是 TCP 和 IP 两个协议在一起协同工作，有上下层次的关系。</strong><br>TCP 负责应用软件（比如你的浏览器）和网络软件之间的通信。IP 负责计算机之间的通信。<strong>TCP 负责将数据分割并装入 IP 包，IP 负责将包发送至接受者</strong>，传输过程要经 IP 路由器负责根据通信量、网络中的错误或者其他参数来进行正确地寻址，然后在它们到达的时候重新组合它们。</p>
<h3 id="IP-协议（网际协议）-计算机之间的通信"><a href="#IP-协议（网际协议）-计算机之间的通信" class="headerlink" title="IP 协议（网际协议）:计算机之间的通信"></a>IP 协议（网际协议）:计算机之间的通信</h3><p>IP 协议是计算机用来相互识别的通信的一种机制，每台计算机都有一个 IP.用来在 internet 上标识这台计算机。 <strong>IP 负责在因特网上发送和接收数据包。</strong> 通过 IP，消息（或者其他数据）被分割为小的独立的包，并通过因特网在计算机之间传送。<strong>IP 负责将每个包路由至它的目的地。</strong><br><strong>IP 协议仅仅是允许计算机相互发消息，但它并不检查消息是否以发送的次序到达而且没有损坏（只检查关键的头数据）。为了提供消息检验功能，直接在 IP 协议上设计了传输控制协议 TCP。</strong></p>
<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>HTTP 协议（HyperText Transfer Protocol，超文本传输协议）是用于从 WWW 服务器传输超文本到本地浏览器的传输协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。<br><strong>HTTP 是客户端浏览器或其他程序与 Web 服务器之间的应用层通信协议。</strong> 在 Internet 上的 Web 服务器上存放的都是超文本信息，客户机需要通过 HTTP 协议传输所要访问的超文本信息。HTTP 包含命令和传输信息，不仅可用于 Web 访问，也可以用于其他因特网/内联网应用系统之间的通信，从而实现各类应用资源超媒体访问的集成。<br>我们在浏览器的地址栏里输入的网站地址叫做 URL (Uniform Resource Locator，统一资源定位符)。就像每家每户都有一个门牌地址一样，每个网页也都有一个 Internet 地址。当你在浏览器的地址框中输入一个 URL 或是单击一个超级链接时，URL 就确定了要浏览的地址。<strong>浏览器通过超文本传输协议(HTTP)，将 Web 服务器上站点的网页代码提取出来，并翻译成漂亮的网页。</strong></p>
<h3 id="HTTP-协议基础"><a href="#HTTP-协议基础" class="headerlink" title="HTTP 协议基础"></a>HTTP 协议基础</h3><ul>
<li><strong>永远都是客户端发起请求，服务器回送响应</strong>应用 HTTP 协议时，必定是一端担任客户端角色，另一端担任服务器端角色。仅从一条通信线路来说，服务器端和客服端的角色是确定的。HTTP 协议规定，请求从客户端发出，最后服务器端响应该请求并返回。<strong>换句话说，肯定是先从客户端开始建立通信的，服务器端在没有接收到请求之前不会发送响应。</strong></li>
<li><strong>无状态的协议 HTTP 是一种无状态协议。协议自身不对请求和响应之间的通信状态进行保存。</strong> 也就是说在 HTTP 这个级别，协议对于发送过的请求或响应都不做持久化处理。这是为了更快地处理大量事务，确保协议的可伸缩性，而特意把 HTTP 协议设计成如此简单的。可是随着 Web 的不断发展，我们的很多业务都需要对通信状态进行保存。于是我们引入了 Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</li>
<li><strong>Cookie 管理状态</strong>Cookie 技术通过<strong>在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</strong> Cookie 会根据从服务器端发送的响应报文内的一个叫做 Set-Cookie 的首部字段信息，通知客户端保存 Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入 Cookie 值后发送出去。服务器端发现客户端发送过来的 Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</li>
<li><strong>URI 定位资源</strong>HTTP 协议使用 URI 定位互联网上的资源。正是因为 URI 的特定功能，在互联网上任意位置的资源都能访问到。</li>
<li><strong>持久连接</strong>HTTP 协议的初始版本中，每进行一个 HTTP 通信都要断开一次 TCP 连接。比如使用浏览器浏览一个包含多张图片的 HTML 页面时，在发送请求访问 HTML 页面资源的同时，也会请求该 HTML 页面里包含的其他资源。因此，每次的请求都会造成无畏的 TCP 连接建立和断开，增加通信量的开销。 为了解决上述 TCP 连接的问题，HTTP/1.1 和部分 HTTP/1.0 想出了持久连接的方法。其特点是，<strong>只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。旨在建立一次 TCP 连接后进行多次请求和响应的交互。在 HTTP/1.1 中，所有的连接默认都是持久连接。</strong></li>
<li><strong>管线化</strong>持久连接使得多数请求以管线化方式发送成为可能。以前发送请求后需等待并接收到响应，才能发送下一个请求。管线化技术出现后，不用等待亦可发送下一个请求。这样就能<strong>做到同时并行发送多个请求，而不需要一个接一个地等待响应了。</strong>比如，当请求一个包含多张图片的 HTML 页面时，与挨个连接相比，用持久连接可以让请求更快结束。而管线化技术要比持久连接速度更快。请求数越多，时间差就越明显。</li>
</ul>
<h3 id="HTTP-工作过程"><a href="#HTTP-工作过程" class="headerlink" title="HTTP 工作过程"></a>HTTP 工作过程</h3><ul>
<li>1,地址解析</li>
</ul>
<p>如用客户端浏览器请求这个页面：<code>localhost.com:8080/index.htm</code>从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</p>
<pre><code>协议名：http
主机名：localhost.com
端口：8080
对象路径：/index.htm
复制代码
复制代码</code></pre><p>在这一步，需要域名系统 DNS 解析域名,得主机的 IP 地址。</p>
<ul>
<li>2,封装 HTTP 请求数据包</li>
</ul>
<p>把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包</p>
<ul>
<li>3,封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）</li>
</ul>
<p>在 HTTP 工作开始之前，客户机（Web 浏览器）首先要通过网络与服务器建立连接，该连接是通过 TCP 来完成的，该协议与 IP 协议共同构建 Internet，即著名的 TCP/IP 协议族，因此 Internet 又被称作是 TCP/IP 网络。HTTP 是比 TCP 更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立 TCP 连接，一般 TCP 连接的端口号是 80。这里是 8080 端口。</p>
<ul>
<li>4,客户端向服务器发送请求命令</li>
</ul>
<p>建立 TCP 连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可内容。</p>
<ul>
<li>5,服务器响应</li>
</ul>
<p>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。<br>实体消息是服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以 Content-Type 应答头信息所描述的格式发送用户所请求的实际数据.</p>
<ul>
<li>6,服务器关闭 TCP 连接</li>
</ul>
<p>一般情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP 连接，然后如果客户端或者服务器在其头信息加入了这行代码 Connection:keep-alive ，TCP 连接在发送后将仍然保持打开状态，于是，客户端可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>
<h3 id="HTTP-协议报文结构与头部"><a href="#HTTP-协议报文结构与头部" class="headerlink" title="HTTP 协议报文结构与头部"></a>HTTP 协议报文结构与头部</h3><p>这部分涉及到的知识特别繁琐,受限于篇幅,这里就不赘述了.可以参考<a href="https://www.jianshu.com/p/6e9e4156ece3" target="_blank" rel="noopener">这篇文章的四,五,六章作了超详尽的说明.</a></p>
<h3 id="HTTP-的请求方法"><a href="#HTTP-的请求方法" class="headerlink" title="HTTP 的请求方法"></a>HTTP 的请求方法</h3><pre><code>GET: 获取URL指定的资源；
POST：传输实体信息
PUT：上传文件
DELETE：删除文件
HEAD：获取报文首部，与GET相比，不返回报文主体部分
OPTIONS：询问支持的方法
TRACE：追踪请求的路径；
CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信。主要使用SSL和TLS将数据加密后通过网络隧道进行传输。
复制代码</code></pre><h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><p><a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">菜鸟教程里有完整的说明.</a></p>
<h3 id="HTTP-缺点"><a href="#HTTP-缺点" class="headerlink" title="HTTP 缺点"></a>HTTP 缺点</h3><ul>
<li>通信使用明文，容易被窃听</li>
<li>不验证通信方的身份，可能遭遇伪装</li>
<li>无法证明报文的完整性，有可能遭遇篡改</li>
</ul>
<h2 id="HTTPS-协议"><a href="#HTTPS-协议" class="headerlink" title="HTTPS 协议"></a>HTTPS 协议</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>超文本传输安全协议（英语：Hypertext Transfer Protocol Secure，缩写：HTTPS，常称为 HTTP over TLS，HTTP over SSL 或 HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。<br>HTTPS 经由 HTTP 进行通信，但<strong>利用 SSL/TLS 来加密数据包。</strong><br>HTTPS 开发的主要目的，是提供<strong>对网站服务器的身份认证，保护交换数据的隐私与完整性。</strong><br><strong>简而言之:</strong> HTTPS 是在 HTTP 上建立 SSL 加密层，并对传输数据进行加密，是 HTTP 协议的安全版。<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597799218782-b68ff5d2-772e-46e2-a7b3-65277257e435.webp#height=302&id=lvC1q&originHeight=302&originWidth=534&originalType=binary&size=0&status=done&style=none&width=534" alt=""><br><strong>HTTPS 比 HTTP 多了一层 TLS/SSL 协议</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597799218723-4c0e7d6b-f3dc-4a40-9bdd-d3af8a2af1b9.webp#height=212&id=IogBd&originHeight=212&originWidth=412&originalType=binary&size=0&status=done&style=none&width=412" alt=""><br>TLS/SSL 全称安全传输层协议 Transport Layer Security, 是介于 TCP 和 HTTP 之间的一层安全协议，不影响原有的 TCP 协议和 HTTP 协议，所以使用 HTTPS 基本上不需要对 HTTP 页面进行太多的改造。</p>
<h3 id="HTTPS-原理"><a href="#HTTPS-原理" class="headerlink" title="HTTPS 原理"></a>HTTPS 原理</h3><p>这部分细说起来,真的很多.这里我归纳简单说一下:</p>
<ul>
<li>客户端向服务器端索要并验证公钥。这一阶段使用的是<strong>非对称加密传输</strong>(RSA),服务端将数字证书发给客户端.其中数字证书包括:公钥和数字签名.客户端在拿到后对两者进行校验.</li>
<li>在非对称加密传输中,两端协商生成”对话密钥”。</li>
<li>双方采用”对话密钥”进行对称加密通信。</li>
</ul>
<p>受限于篇幅,我就不展开了.要不然就太多太多了.这里我推荐几篇文章大家全面理解:</p>
<ul>
<li>以通俗易懂的方式理解 https 原理: <a href="https://juejin.im/post/6844903504046211079" target="_blank" rel="noopener">文章</a></li>
<li>关于 SSL/TLS 原理的详细说明:<a href="https://segmentfault.com/a/1190000002554673" target="_blank" rel="noopener">文章</a></li>
<li>关于 PKI 体系与证书的说明:<a href="https://www.jianshu.com/p/ffe8c203a471" target="_blank" rel="noopener">文章</a></li>
</ul>
<h3 id="HTTP-与-HTTPS-的区别"><a href="#HTTP-与-HTTPS-的区别" class="headerlink" title="HTTP 与 HTTPS 的区别"></a>HTTP 与 HTTPS 的区别</h3><ul>
<li>HTTP 是明文传输，HTTPS 通过 SSL\TLS 进行了加密</li>
<li>HTTP 的端口号是 80，HTTPS 是 443</li>
<li>HTTPS 需要到 CA 申请证书，一般免费证书很少，需要交费</li>
<li>HTTP 的连接很简单，是无状态的；HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。</li>
</ul>
<h3 id="HTTPS-主要作用是："><a href="#HTTPS-主要作用是：" class="headerlink" title="HTTPS 主要作用是："></a>HTTPS 主要作用是：</h3><ul>
<li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全</li>
<li>对网站服务器进行真实身份认证</li>
</ul>
<h3 id="HTTPS-缺点"><a href="#HTTPS-缺点" class="headerlink" title="HTTPS 缺点"></a>HTTPS 缺点</h3><ul>
<li>HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近 50%，增加 10%到 20%的耗电；</li>
<li>https 连接缓存不如 http 高效，如果是大流量网站,则会造成流量成本太高。</li>
<li>https 连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本，如果全部采用 https，基于大部分计算资源闲置的假设的 VPS 的平均成本会上去。</li>
<li>SSL 证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用。</li>
<li>SSL 证书通常需要绑定 IP，不能再同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗(SSL 有扩展可以部分解决这个问题，但是比较麻烦，而且要求浏览器、操作系统支持，Windows XP 就不支持这个扩展，考虑到 XP 的装机量，这个特性几乎没用)。</li>
</ul>
<h3 id="HTTPS-接入优化"><a href="#HTTPS-接入优化" class="headerlink" title="HTTPS 接入优化"></a>HTTPS 接入优化</h3><p><strong>CDN 接入</strong><br>HTTPS 增加的延时主要是传输延时 RTT，RTT 的特点是节点越近延时越小，CDN 天然离用户最近，因此选择使用 CDN 作为 HTTPS 接入的入口，将能够极大减少接入延时。CDN 节点通过和业务服务器维持长连接、会话复用和链路质量优化等可控方法，极大减少 HTTPS 带来的延时。<br><strong>会话缓存</strong><br>虽然前文提到 HTTPS 即使采用会话缓存也要至少 1*RTT 的延时，但是至少延时已经减少为原来的一半，明显的延时优化;同时，基于会话缓存建立的 HTTPS 连接不需要服务器使用 RSA 私钥解密获取 Pre-master 信息，可以省去 CPU 的消耗。如果业务访问连接集中，缓存命中率高，则 HTTPS 的接入能力讲明显提升。当前 TRP 平台的缓存命中率高峰时期大于 30%，10k/s 的接入资源实际可以承载 13k/的接入，收效非常可观。<br><strong>硬件加速</strong><br>为接入服务器安装专用的 SSL 硬件加速卡，作用类似 GPU，释放 CPU，能够具有更高的 HTTPS 接入能力且不影响业务程序的。测试某硬件加速卡单卡可以提供 35k 的解密能力，相当于 175 核 CPU，至少相当于 7 台 24 核的服务器，考虑到接入服务器其它程序的开销，一张硬件卡可以实现接近 10 台服务器的接入能力。<br><strong>远程解密</strong><br>本地接入消耗过多的 CPU 资源，浪费了网卡和硬盘等资源，考虑将最消耗 CPU 资源的 RSA 解密计算任务转移到其它服务器，如此则可以充分发挥服务器的接入能力，充分利用带宽与网卡资源。远程解密服务器可以选择 CPU 负载较低的机器充当，实现机器资源复用，也可以是专门优化的高计算性能的服务器。当前也是 CDN 用于大规模 HTTPS 接入的解决方案之一。<br><strong>SPDY/HTTP2</strong><br>前面的方法分别从减少传输延时和单机负载的方法提高 HTTPS 接入性能，但是方法都基于不改变 HTTP 协议的基础上提出的优化方法，SPDY/HTTP2 利用 TLS/SSL 带来的优势，通过修改协议的方法来提升 HTTPS 的性能，提高下载速度等。</p>
<p>作者：shotCat<br>链接：<a href="https://juejin.im/post/6844903781704925198" target="_blank" rel="noopener">https://juejin.im/post/6844903781704925198</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h2 id="从输入-URL-到看到页面发生的全过程-含三握手-四挥手详解"><a href="#从输入-URL-到看到页面发生的全过程-含三握手-四挥手详解" class="headerlink" title="从输入 URL 到看到页面发生的全过程(含三握手,四挥手详解)"></a>从输入 URL 到看到页面发生的全过程(含三握手,四挥手详解)</h2><p>总体来说分为以下几个过程:<br><strong>1.浏览器的地址栏输入 URL 并按下回车。</strong><br><strong>2.浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。</strong><br><strong>3.DNS 解析 URL 对应的 IP。</strong><br><strong>4.根据 IP 建立 TCP 连接（三次握手）。</strong><br><strong>5.HTTP 发起请求。</strong><br><strong>6.服务器处理请求，浏览器接收 HTTP 响应。</strong><br><strong>7.浏览器解析渲染页面。</strong><br><strong>8.关闭 TCP 连接（四次挥手）。</strong></p>
<h3 id="1-输入-URL-并按下回车。"><a href="#1-输入-URL-并按下回车。" class="headerlink" title="1, 输入 URL 并按下回车。"></a>1, 输入 URL 并按下回车。</h3><p>url 一般包含这几个部分.可以顺带提以下知识点<br><strong>知识点:</strong></p>
<ul>
<li>协议：主要是 HTTP 协议，HTTPS 协议，FTP 协议，FILe 协议</li>
<li>域名： 定义因特网<strong>域名</strong>，比如 <a href="http://google.com" target="_blank" rel="noopener">google.com</a></li>
<li>端口号：通常默认都是隐藏的 <strong>http 默认端口号为 80 https 默认端口号为 443</strong></li>
<li>补充: 同源策略 - 在前端进行数据请求时，由于浏览器的同源策略，协议，域名，端口号有一个不同会存在跨域请求，需要进行跨域处理</li>
</ul>
<h3 id="2-浏览器查找当前-URL-是否存在缓存，并比较缓存是否过期。"><a href="#2-浏览器查找当前-URL-是否存在缓存，并比较缓存是否过期。" class="headerlink" title="2.浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。"></a>2.浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。</h3><p>浏览器首先查询当前 URL 是否有缓存,有的话,再查询是否过期,没过期则读缓存.过期了则访问 web 服务器.<br><strong>知识点:</strong> 详细解释可以看本系列的”浏览器缓存”这节.</p>
<h3 id="3-DNS-解析-URL-对应的-IP。"><a href="#3-DNS-解析-URL-对应的-IP。" class="headerlink" title="3.DNS 解析 URL 对应的 IP。"></a>3.DNS 解析 URL 对应的 IP。</h3><h4 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程:"></a><strong>解析过程:</strong></h4><p>1.首先浏览器会查看自己的 DNS 缓存是否存在. 2.如果没有找到,浏览器会<strong>先查找本地 hosts 文件是否有这个网址映射关系</strong>，如果有就调用这个 IP 地址映射，完成域名解析。 3.如果没有找到,则会在操作系统缓存中查找本地的 DNS 解析器缓存，如果找到则返回。 4.如果没有找到,则会在路由器缓存中进行查找,如果找到则返回。 5.如果还是没有找到,则会按 ISP(运营商)DNS 缓存、根域名服务器、顶级域名服务器、主域名服务器的顺序，逐步读取缓存，直到拿到 IP 地址.</p>
<h4 id="为什么要-DNS-解析"><a href="#为什么要-DNS-解析" class="headerlink" title="为什么要 DNS 解析"></a>为什么要 DNS 解析</h4><p>互联网上每一台计算机的唯一标识是它的 IP 地址，但是 IP 地址并不方便记忆。用户更喜欢用方便记忆的网址去寻找互联网上的其它计算机，也就是上面提到的百度的网址。所以互联网设计者需要在用户的方便性与可用性方面做一个权衡，这个权衡就是一个网址到 IP 地址的转换，这个过程就是 DNS 解析，即实现了网址到 IP 地址的转换</p>
<h4 id="IP-地址"><a href="#IP-地址" class="headerlink" title="IP 地址"></a>IP 地址</h4><p>IP 地址是指互联网协议地址，是 IP Address 的缩写。IP 地址是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP 地址是一个 32 位的二进制数，比如 127.0.0.1 为本机 IP。<br><strong>域名就相当于 IP 地址乔装打扮的伪装者，带着一副面具。它的作用就是便于记忆和沟通的一组服务器的地址</strong>。用户通常使用主机名或域名来访问对方的计算机，而不是直接通过 IP 地址访问。<strong>因为与 IP 地址的一组纯数字相比，用字母配合数字的表示形式来指定计算机名更符合人类的记忆习惯。但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。为了解决上述的问题，DNS 服务应运而生。</strong></p>
<h4 id="什么是域名解析"><a href="#什么是域名解析" class="headerlink" title="什么是域名解析"></a>什么是域名解析</h4><p>DNS 协议提供通过域名查找 IP 地址，或逆向从 IP 地址反查域名的服务。<strong>DNS 是一个网络服务器，我们的域名解析简单来说就是在 DNS 上记录一条信息记录</strong>。</p>
<pre class=" language-javascript"><code class="language-javascript">例如 baidu<span class="token punctuation">.</span>com  <span class="token number">220.114</span><span class="token punctuation">.</span><span class="token number">23.56</span>（服务器外网IP地址）<span class="token number">80</span>（服务器端口号）
复制代码</code></pre>
<h4 id="相关名词解释"><a href="#相关名词解释" class="headerlink" title="相关名词解释:"></a><strong>相关名词解释:</strong></h4><ul>
<li>浏览器缓存：浏览器会按照一定的频率缓存 DNS 记录。</li>
<li>hosts 文件: Hosts 是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的 IP 地址建立一个关联“数据库”.一般位于系统盘 C:\Windows\System32\drivers\etc 中，如果进去没有看到 Hos 文件，是因为某些系统将 Host 文件隐藏了。</li>
<li>操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统的 DNS 缓存中读取该域名所对应的 IP 地址。</li>
<li>路由缓存：路由器也有 DNS 缓存。</li>
<li>ISP 的 DNS 服务器：ISP 是互联网服务提供商(Internet Service Provider)的简称，ISP 有专门的 DNS 服务器应对 DNS 查询请求。</li>
<li>根服务器：ISP 的 DNS 服务器还找不到的话，它就会向根服务器发出请求，进行递归查询（DNS 服务器先问根域名服务器<code>.com</code> 域名服务器的 IP 地址，然后再问.baidu 域名服务器，依次类推）</li>
</ul>
<h3 id="4-根据-IP-建立-TCP-连接（三次握手）"><a href="#4-根据-IP-建立-TCP-连接（三次握手）" class="headerlink" title="4.根据 IP 建立 TCP 连接（三次握手）"></a>4.根据 IP 建立 TCP 连接（三次握手）</h3><h4 id="三次握手的过程"><a href="#三次握手的过程" class="headerlink" title="三次握手的过程:"></a><strong>三次握手的过程:</strong></h4><ul>
<li><strong>客户端发送一个 syn 包:即带有 SYN=1，Seq=x 的数据包到服务器端口，并进入 SYN_SENT 状态，等待服务器确认；</strong>（第一次握手，由浏览器发起，告诉服务器我要发送请求了）</li>
<li><strong>服务器收到 syn 包，必须确认客户的 SYN，同时发回一个带 SYN=1， ACK=x+1， Seq=y 的响应包以示传达确认信息,即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</strong>（第二次握手，由服务器发起，告诉浏览器我准备接受了，你赶紧发送吧）</li>
<li><strong>客户端收到服务器的 SYN+ACK 包，向服务器发送确认包 ACK,即回传一个带 ACK=y+1， Seq=Z 的数据包，代表“握手结束”</strong>（第三次握手，由浏览器发送，告诉服务器，我马上就发了，准备接受吧）</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597798820623-044e3740-a989-4d23-810c-0a36c097ffc7.webp#height=274&id=RjrbX&originHeight=274&originWidth=550&originalType=binary&size=0&status=done&style=none&width=550" alt=""><br>完成 TCP 连接后开使向服务器进行请求</p>
<h4 id="为啥需要三次握手"><a href="#为啥需要三次握手" class="headerlink" title="为啥需要三次握手"></a><strong>为啥需要三次握手</strong></h4><p>谢希仁著《计算机网络》中讲“三次握手”的目的是“<strong>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误</strong>”。</p>
<h3 id="5-HTTP-发起请求-amp-amp-6-服务器处理请求，浏览器接收-HTTP-响应。"><a href="#5-HTTP-发起请求-amp-amp-6-服务器处理请求，浏览器接收-HTTP-响应。" class="headerlink" title="5.HTTP 发起请求 &amp;&amp; 6.服务器处理请求，浏览器接收 HTTP 响应。"></a>5.HTTP 发起请求 &amp;&amp; 6.服务器处理请求，浏览器接收 HTTP 响应。</h3><ul>
<li>完整的 HTTP 请求包含请求起始行、请求头部、请求主体三部分。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597798820619-3c03de5d-dfd6-43ed-bb02-162eafd0dfa4.webp#height=243&id=yKTgA&originHeight=243&originWidth=616&originalType=binary&size=0&status=done&style=none&width=616" alt=""></p>
<ul>
<li>服务器在收到浏览器发送的 HTTP 请求之后，会将收到的 HTTP 报文封装成 HTTP 的 Request 对象，并通过不同的 Web 服务器进行处理，处理完的结果以 HTTP 的 Response 对象返回，主要包括状态码，响应头，响应报文三个部分。</li>
<li>综合起来,完整的 HTTP 请报文一般包括了：<strong>通用头部</strong>，<strong>请求/响应头部</strong>，<strong>请求/响应体</strong></li>
</ul>
<h4 id="通用头部"><a href="#通用头部" class="headerlink" title="通用头部"></a><strong>通用头部</strong></h4><p>包括如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//General</span>
Request Url<span class="token punctuation">:</span> 请求的web服务器地址
Request Method<span class="token punctuation">:</span> 请求方式
（Get、POST、OPTIONS、PUT、HEAD、DELETE、CONNECT、TRACE）
Status Code<span class="token punctuation">:</span> 请求的返回状态码，如<span class="token number">200</span>代表成功
Remote Address<span class="token punctuation">:</span> 请求的远程服务器地址（会转为IP）
Referrer Policy<span class="token punctuation">:</span> <span class="token punctuation">(</span>引用策略<span class="token punctuation">)</span>用来监管哪些访问来源信息 <span class="token punctuation">(</span>IE暂不支持<span class="token punctuation">)</span>
复制代码</code></pre>
<h4 id="请求-响应头部"><a href="#请求-响应头部" class="headerlink" title="请求/响应头部:"></a><strong>请求/响应头部:</strong></h4><p>常用的请求头部（部分）：</p>
<pre><code>Accept: 接收类型，表示浏览器支持的MIME类型
（对标服务端返回的Content-Type）
Accept-Encoding：浏览器支持的压缩类型,如gzip等,超出类型不能接收
Content-Type：客户端发送出去实体内容的类型
Cache-Control: 指定请求和响应遵循的缓存机制，如no-cache
If-Modified-Since：对应服务端的Last-Modified，用来匹配看文件是否变动，只能精确到1s之内，http1.0中
Expires：缓存控制，在这个时间内不会请求，直接使用缓存，http1.0，而且是服务端时间
Max-age：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1.1中
If-None-Match：对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1.1中
Cookie: 有cookie并且同域访问时会自动带上
Connection: 当浏览器与服务器通信时对于长连接如何进行处理,如keep-alive
Host：请求的服务器URL
Origin：最初的请求是从哪里发起的（只会精确到端口）,Origin比Referer更尊重隐私
Referer：该页面的来源URL(适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段)
User-Agent：用户客户端的一些必要信息，如UA头部等
复制代码</code></pre><p>常用的响应头部（部分）：</p>
<pre><code>Access-Control-Allow-Headers: 服务器端允许的请求Headers
Access-Control-Allow-Methods: 服务器端允许的请求方法
Access-Control-Allow-Origin: 服务器端允许的请求Origin头部（譬如为*）
Content-Type：服务端返回的实体内容的类型
Date：数据从服务器发送的时间
Cache-Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档
Last-Modified：请求资源的最后修改时间
Expires：应该在什么时候认为文档已经过期,从而不再缓存它
Max-age：客户端的本地资源应该缓存多少秒，开启了Cache-Control后有效
ETag：请求变量的实体标签的当前值
Set-Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端
Keep-Alive：如果客户端有keep-alive，服务端也会有响应（如timeout=38）
Server：服务器的一些相关信息
复制代码</code></pre><p>一般来说，请求头部和响应头部是匹配分析的。<br>譬如，请求头部的 Accept 要和响应头部的 Content-Type 匹配，否则会报错<br>譬如，跨域请求时，请求头部的 Origin 要匹配响应头部的 Access-Control-Allow-Origin，否则会报跨域错误<br>譬如，在使用缓存时，请求头部的 If-Modified-Since、If-None-Match 分别和响应头部的 Last-Modified、ETag 对应</p>
<h4 id="请求-响应实体"><a href="#请求-响应实体" class="headerlink" title="请求/响应实体:"></a><strong>请求/响应实体:</strong></h4><p>http 请求时，除了头部，还有消息实体，一般来说<br>请求实体中会将一些需要的参数都放入进入（用于 post 请求）。<br>譬如实体中可以放参数的序列化形式（<code>a=1&amp;b=2</code>这种），或者直接放表单对象（<code>Form Data</code>对象，上传时可以夹杂参数以及文件），等等<br>而一般响应实体中，就是放服务端需要传给客户端的内容<br>一般现在的接口请求时，实体中就是对于的信息的 json 格式，而像页面请求这种，里面就是直接放了一个 html 字符串，然后浏览器自己解析并渲染。<br><img src="https://cdn.nlark.com/yuque/0/2020/svg/241787/1597798820575-0d549cf1-b07e-401a-a079-e250b77ba498.svg#height=800&id=NwwCl&name=image.svg&originHeight=800&originWidth=596&originalType=binary&size=106&status=done&style=none&width=596" alt="image.svg"></p>
<h3 id="7-浏览器解析渲染页面"><a href="#7-浏览器解析渲染页面" class="headerlink" title="7.浏览器解析渲染页面"></a>7.浏览器解析渲染页面</h3><h4 id="流程简述"><a href="#流程简述" class="headerlink" title="流程简述"></a><strong>流程简述</strong></h4><p>浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span> 解析HTML，构建DOM树
<span class="token number">2</span><span class="token punctuation">.</span> 解析CSS，生成CSS规则树
<span class="token number">3</span><span class="token punctuation">.</span> 合并DOM树和CSS规则，生成render树
<span class="token number">4</span><span class="token punctuation">.</span> 布局render树（Layout<span class="token operator">/</span>reflow），负责各元素尺寸、位置的计算
<span class="token number">5</span><span class="token punctuation">.</span> 绘制render树（paint），绘制页面像素信息
<span class="token number">6</span><span class="token punctuation">.</span> 浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上
PS<span class="token punctuation">:</span>
reflow：也称作layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为reflow。
<span class="token function">repaint：中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候</span><span class="token punctuation">(</span>例如：背景色，边框颜色，文字颜色等<span class="token punctuation">)</span>，此时只需要应用新样式绘制这个元素就可以了。
</code></pre>
<h4 id="1-根据-HTML-解析-DOM-树"><a href="#1-根据-HTML-解析-DOM-树" class="headerlink" title="1.根据 HTML 解析 DOM 树"></a>1.根据 HTML 解析 DOM 树</h4><ul>
<li>根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。</li>
<li>在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。</li>
</ul>
<h4 id="2-根据-CSS-解析生成-CSS-规则树"><a href="#2-根据-CSS-解析生成-CSS-规则树" class="headerlink" title="2.根据 CSS 解析生成 CSS 规则树"></a>2.根据 CSS 解析生成 CSS 规则树</h4><ul>
<li>解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。</li>
<li>浏览器在 CSS 规则树生成之前不会进行渲染。</li>
</ul>
<h4 id="3-结合-DOM-树和-CSS-规则树，生成渲染树"><a href="#3-结合-DOM-树和-CSS-规则树，生成渲染树" class="headerlink" title="3.结合 DOM 树和 CSS 规则树，生成渲染树"></a>3.结合 DOM 树和 CSS 规则树，生成渲染树</h4><ul>
<li>DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。</li>
<li>精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。</li>
</ul>
<h4 id="4-根据渲染树计算每一个节点的信息（布局）"><a href="#4-根据渲染树计算每一个节点的信息（布局）" class="headerlink" title="4.根据渲染树计算每一个节点的信息（布局）"></a>4.根据渲染树计算每一个节点的信息（布局）</h4><ul>
<li>布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸</li>
<li>回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。</li>
</ul>
<h4 id="5-根据计算好的信息绘制页面"><a href="#5-根据计算好的信息绘制页面" class="headerlink" title="5.根据计算好的信息绘制页面"></a>5.根据计算好的信息绘制页面</h4><ul>
<li>绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。</li>
<li>重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。</li>
<li>回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/svg/241787/1597798820594-36226bf6-545b-4f76-80fa-26d7e6c87594.svg#height=258&id=hbG53&name=image.svg&originHeight=258&originWidth=752&originalType=binary&size=106&status=done&style=none&width=752" alt="image.svg"></p>
<h3 id="8-关闭-TCP-连接（四次挥手）"><a href="#8-关闭-TCP-连接（四次挥手）" class="headerlink" title="8.关闭 TCP 连接（四次挥手）"></a>8.关闭 TCP 连接（四次挥手）</h3><p>通过四次挥手关闭连接(FIN ACK, ACK, FIN ACK, ACK)。<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597798820609-5d026504-6792-41b2-a120-30a32cb5916b.webp#height=288&id=Bzbm6&originHeight=288&originWidth=550&originalType=binary&size=0&status=done&style=none&width=550" alt=""></p>
<blockquote>
<ol>
<li>第一次挥手：Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。(第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧)</li>
<li>第二次挥手：Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号+1（与 SYN 相同，一个 FIN 占用一个序号），Server 进入 CLOSE_WAIT 状态。(第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧)</li>
<li>第三次挥手：Server 发送一个 FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)</li>
<li>第四次挥手：Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server，确认序号为收到序号+1，Server 进入 CLOSED 状态，完成四次挥手。(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)</li>
</ol>
</blockquote>
<p>我们看看 GET 和 POST 的区别</p>
<ol>
<li>GET 提交的数据会放在 URL 之后，以?分割 URL 和传输数据，参数之间以&amp;相连，如 EditPosts.aspx?name=test1&amp;id=123456. POST 方法是把提交的数据放在 HTTP 包的 Body 中.</li>
<li>GET 提交的数据大小有限制（因为浏览器对 URL 的长度有限制），而 POST 方法提交的数据没有限制.</li>
<li>GET 方式需要使用 Request.QueryString 来取得变量的值，而 POST 方式通过 Request.Form 来获取变量的值。</li>
<li>GET 方式提交数据，会带来安全问题，比如一个登录页面，通过 GET 方式提交数据时，用户名和密码将出现在 URL 上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li>
</ol>
<p>链接：<br><a href="https://juejin.im/post/6844903782015303693" target="_blank" rel="noopener">https://juejin.im/post/6844903782015303693</a><br><a href="https://juejin.im/post/6844903781704925198" target="_blank" rel="noopener">https://juejin.im/post/6844903781704925198</a><br><a href="https://www.jianshu.com/p/80e25cb1d81a" target="_blank" rel="noopener">https://www.jianshu.com/p/80e25cb1d81a</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>https</tag>
        <tag>tcp</tag>
        <tag>浏览器渲染</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（3）vue</title>
    <url>/leader755/26383.html</url>
    <content><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue:"></a>Vue:</h2><ul>
<li>vue 数据双向绑定原理；</li>
<li>vue computed 原理、watch 和 methods 的区别；</li>
<li>vue 编译器结构图、生命周期、vue 组件通信；</li>
<li>mvc 模式、mvp 模式、mvvm 模式；</li>
<li>vue dom diff、vuex、vue-router</li>
</ul>
<h2 id="数据双向绑定："><a href="#数据双向绑定：" class="headerlink" title="数据双向绑定："></a>数据双向绑定：</h2><pre><code>理解：**vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的.**
原理：是观察者`observer`通过`Object.defineProperty()`来劫持到各个属性的`getter` `setter`，在数据变动的时候，会被`observer`观察到，会通过`Dep`通知数据的订阅者watcher，之后进行相应的视图上面的变化。</code></pre><p><a href="https://juejin.im/entry/6844903479044112391" target="_blank" rel="noopener">https://juejin.im/entry/6844903479044112391</a></p>
<h2 id="computed-原理、computed-和-watch-的区别"><a href="#computed-原理、computed-和-watch-的区别" class="headerlink" title="computed 原理、computed 和 watch 的区别"></a>computed 原理、computed 和 watch 的区别</h2><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><p>定义：是一个计算属性,类似于过滤器,对绑定到 view 的数据进行处理</p>
<blockquote>
<p>适用于重新计算比较费时不用重复数据计算的环境。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。如果一个数据依赖于其他数据，那么把这个数据设计为 computed。</p>
</blockquote>
<h5 id="computed-的常规使用"><a href="#computed-的常规使用" class="headerlink" title="computed 的常规使用"></a>computed 的常规使用</h5><pre class=" language-javascript"><code class="language-javascript">    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    firstName<span class="token punctuation">:</span> <span class="token string">'Foo'</span><span class="token punctuation">,</span>
    lastName<span class="token punctuation">:</span> <span class="token string">'Bar'</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>


  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>

     <span class="token comment" spellcheck="true">//默认使用方式，读取并返回当前的属性值（无法去修改读取到的值）</span>
     fullNameone<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment" spellcheck="true">//使用get 和 set 方去修改获取到的属性值</span>
      fullNameSed：<span class="token punctuation">{</span>
           <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span>
              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
           <span class="token keyword">set</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span>
           <span class="token comment" spellcheck="true">//val就是fullName的最新属性值</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
           <span class="token keyword">const</span> names <span class="token operator">=</span> val<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>
<h5 id="vue-中-computed-的传参：利用闭包："><a href="#vue-中-computed-的传参：利用闭包：" class="headerlink" title="vue 中 computed 的传参：利用闭包："></a>vue 中 computed 的传参：利用闭包：</h5><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Ratedata<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>currentRate<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<p>####</p>
<h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>定义：watch 是一个观察的动作</p>
<h5 id="1-watch-监听数据变化"><a href="#1-watch-监听数据变化" class="headerlink" title="1.watch 监听数据变化"></a>1.watch 监听数据变化</h5><h6 id="1-gt-监听数据-单一数据"><a href="#1-gt-监听数据-单一数据" class="headerlink" title="1&gt;监听数据(单一数据)"></a>1&gt;监听数据(单一数据)</h6><pre class=" language-javascript"><code class="language-javascript"><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
       firstname<span class="token punctuation">:</span><span class="token string">''</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">firstname</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span>oldVal<span class="token punctuation">)</span><span class="token punctuation">{</span>
         <span class="token keyword">this</span><span class="token punctuation">.</span>fullname <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastname
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre>
<h6 id="2-gt-监听对象的属性变化"><a href="#2-gt-监听对象的属性变化" class="headerlink" title="2&gt;监听对象的属性变化"></a>2&gt;监听对象的属性变化</h6><p><strong>1.直接通过 watch 的深度监听去监听对象的属性变化(deep 开启深度监听)</strong><br>**<code>deep</code>的意思就是深入观察，监听器会一层层的往下遍历，给对象的所有属性都加上这个监听器，但是这样性能开销就会非常大了，任何修改<code>obj</code>里面任何一个属性都会触发这个监听器里的 handler。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    formData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      channel<span class="token punctuation">:</span> <span class="token string">"音乐"</span><span class="token punctuation">,</span>
      style<span class="token punctuation">:</span> <span class="token string">"活泼"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    formData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment" spellcheck="true">//监听对象的所有属性(性能开销就会非常大)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">.</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的当前对象</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>优化，使用字符串形式监听,一层一层解析下去，直到遇到属性</strong><code>**a**</code><strong>，然后才给</strong><code>**a**</code><strong>设置监听函数</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    formData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      channel<span class="token punctuation">:</span> <span class="token string">"音乐"</span><span class="token punctuation">,</span>
      style<span class="token punctuation">:</span> <span class="token string">"活泼"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">"formData.channel"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">handler</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回的为当前对象的属性channel的值</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h6 id="3-gt-初始化时就监听，由于初始化时-watch-不执行。"><a href="#3-gt-初始化时就监听，由于初始化时-watch-不执行。" class="headerlink" title="3&gt;初始化时就监听，由于初始化时 watch 不执行。"></a>3&gt;初始化时就监听，由于初始化时 watch 不执行。</h6><pre class=" language-javascript"><code class="language-javascript"> watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'defaultVal'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
      immediate<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// immediate选项可以开启首次赋值监听</span>
      handler <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newVal，oldVal<span class="token punctuation">)</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>selectVal <span class="token operator">=</span> newVal
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span></code></pre>
<h5 id="2-利用-computed-的属性-将对象的属性提取出来进行监听"><a href="#2-利用-computed-的属性-将对象的属性提取出来进行监听" class="headerlink" title="2.利用 computed 的属性(将对象的属性提取出来进行监听)"></a>2.利用 computed 的属性(将对象的属性提取出来进行监听)</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    formData<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      channel<span class="token punctuation">:</span> <span class="token string">"音乐"</span><span class="token punctuation">,</span>
      style<span class="token punctuation">:</span> <span class="token string">"活泼"</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>formData<span class="token punctuation">.</span>channel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">channel</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newval<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h5 id="2-watch-监听路由变化"><a href="#2-watch-监听路由变化" class="headerlink" title="2.watch 监听路由变化"></a>2.watch 监听路由变化</h5><pre class=" language-javascript"><code class="language-javascript">watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>
      <span class="token function">$route</span><span class="token punctuation">(</span> to <span class="token punctuation">,</span> <span class="token keyword">from</span> <span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// to要跳转到的路由的地址 , from 表示从哪跳转</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> to <span class="token punctuation">,</span> <span class="token keyword">from</span> <span class="token punctuation">)</span>

      <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h4 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h4><blockquote>
<ul>
<li>可以使用 methods 来代替 computed，实际上效果是一样；</li>
<li>其中 methods【有括号（）】，computed 不带括号；</li>
<li>computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值；</li>
<li>methods 在重新渲染的时候，函数总会重新调用执行；</li>
<li>使用 computed 会比 methods 方法性能更好。</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<p>1.如果一个数据依赖于其他数据，那么把这个数据设计为 computed 的 。 2.如果你需要在某个数据变化时做一些事情，使用 watch 来观察这个数据变化 3.如果需要实时调用，使用 methods 比 computed 更合适</p>
</blockquote>
<h4 id="computed-和-watch-的区别："><a href="#computed-和-watch-的区别：" class="headerlink" title="computed 和 watch 的区别："></a>computed 和 watch 的区别：</h4><blockquote>
<p>1.computed 是计算属性，watch 是监听，即观察属性。<br>2.comPuted 具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数。watch 每次都会去执行函数。<br>3.computed 是需要返回值的，且一般是对源数据进行过滤，为同步。watch 可监听异步请求返回的值。</p>
</blockquote>
<p>相关文章：<a href="https://www.yuque.com/docs/share/e153d391-2487-4dc7-a442-6a1ef00e6f20?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/e153d391-2487-4dc7-a442-6a1ef00e6f20?#</a> 《vue 的 data,props,computed,watch 详解》</p>
<h2 id="vue-编译器结构图、生命周期"><a href="#vue-编译器结构图、生命周期" class="headerlink" title="vue 编译器结构图、生命周期"></a>vue 编译器结构图、生命周期</h2><h3 id="生命周期详解："><a href="#生命周期详解：" class="headerlink" title="生命周期详解："></a>生命周期详解：</h3><ul>
<li><strong>beforeCreate（初始化界面前）</strong>组件未创建（加载动画）</li>
<li><strong>created（初始化界面后）</strong>组件被创建了（获取数据）</li>
<li><strong>beforeMount（渲染 dom 前）</strong>组件挂载前</li>
<li><strong>mounted（渲染 dom 后）</strong>组件挂载（页面显示完成）</li>
<li><strong>beforeUpdate（更新数据前）</strong>组件更新前调用的函数</li>
<li><strong>updated（更新数据后）</strong>组件更新完毕</li>
<li><strong>beforeDestroy（卸载组件前）</strong>组件销毁之前</li>
<li><strong>destroyed（卸载组件后）</strong>组件销毁之后</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597640375098-b2844b7d-609b-4e9d-a953-9d91bc6bd4a4.png#height=1350&id=ZlORb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=3039&originWidth=1200&originalType=binary&size=204653&status=done&style=none&width=533" alt="image.png"></p>
<p>异步请求数据时应该位于生命周期：<br>一般在  <code>created</code>  里面就可以，如果涉及到需要页面加载完成之后的话就用  <code>mounted</code>。</p>
<h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>定义：$nextTick 是在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后使用 $nextTick，则可以在回调中获取更新后的 DOM.<br>使用场景：在 Vue 生命周期的<code>created()</code>钩子函数进行的 DOM 操作一定要放在<code>Vue.nextTick()</code>的回调函数中  。</p>
<h2 id="vue-组件通信"><a href="#vue-组件通信" class="headerlink" title="vue 组件通信"></a>vue 组件通信</h2><h3 id="父传子："><a href="#父传子：" class="headerlink" title="父传子："></a>父传子：</h3><h3 id="子传父："><a href="#子传父：" class="headerlink" title="子传父："></a>子传父：</h3><h2 id="同步异步父子组件生命周期顺序"><a href="#同步异步父子组件生命周期顺序" class="headerlink" title="同步异步父子组件生命周期顺序"></a>同步异步父子组件生命周期顺序</h2><blockquote>
<p>在单一组件中，钩子的执行顺序是 beforeCreate-&gt; created -&gt; mounted-&gt;… -&gt;destroyed，但当父子组件嵌套时，父组件和子组件各拥有各自独立的钩子函数，<strong>这些父子组件的这些钩子是如何交融执行，且执行顺序又是怎样的呢?</strong></p>
</blockquote>
<h3 id="同步父子组件："><a href="#同步父子组件：" class="headerlink" title="同步父子组件："></a>同步父子组件：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步组件引入方式</span>
<span class="token keyword">import</span> Page <span class="token keyword">from</span> <span class="token string">"@/components/page"</span><span class="token punctuation">;</span></code></pre>
<h4 id="加载渲染过程"><a href="#加载渲染过程" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h4><pre class=" language-javascript"><code class="language-javascript">父beforeCreate<span class="token operator">-</span><span class="token operator">></span>父created<span class="token operator">-</span><span class="token operator">></span>父beforeMount<span class="token operator">-</span><span class="token operator">></span>子beforeCreate<span class="token operator">-</span><span class="token operator">></span>子created<span class="token operator">-</span><span class="token operator">></span>子beforeMount<span class="token operator">-</span><span class="token operator">></span>子mounted<span class="token operator">-</span><span class="token operator">></span>父mounted</code></pre>
<p>####</p>
<h4 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h4><pre class=" language-javascript"><code class="language-javascript">父beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子updated<span class="token operator">-</span><span class="token operator">></span>父updated</code></pre>
<p>####</p>
<h4 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h4><pre class=" language-javascript"><code class="language-javascript">父beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子destroyed<span class="token operator">-</span><span class="token operator">></span>父destroyed</code></pre>
<p>####</p>
<h4 id="常用钩子简易版"><a href="#常用钩子简易版" class="headerlink" title="常用钩子简易版"></a>常用钩子简易版</h4><pre class=" language-javascript"><code class="language-javascript">父create<span class="token operator">-</span><span class="token operator">></span>子created<span class="token operator">-</span><span class="token operator">></span>子mounted<span class="token operator">-</span><span class="token operator">></span>父mounted</code></pre>
<blockquote>
<p><strong>总结：</strong> &gt; <strong>同步父子组件渲染，更新，销毁的生命周期都是在当前父组件的生命周期中执行 父 beforeMount， 父 beforeUpdate，beforeDestory 后，中间插入子组件的生命周期，最后才使用 父 Mounted，父 updated，父 destroyed。</strong></p>
</blockquote>
<h3 id="异步父子组件："><a href="#异步父子组件：" class="headerlink" title="异步父子组件："></a>异步父子组件：</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//异步组件引入</span>
<span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"@/components/page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Page <span class="token operator">=</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"@/components/page"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> page<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="加载渲染过程-1"><a href="#加载渲染过程-1" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h4><pre class=" language-javascript"><code class="language-javascript">父beforeCreate<span class="token operator">-</span><span class="token operator">></span>父created<span class="token operator">-</span><span class="token operator">></span>父beforeMount<span class="token operator">-</span><span class="token operator">></span>父mounted<span class="token operator">-</span><span class="token operator">></span>父beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子beforeCreate<span class="token operator">-</span><span class="token operator">></span>子created<span class="token operator">-</span><span class="token operator">></span>子beforeMount<span class="token operator">-</span><span class="token operator">></span>子mounted<span class="token operator">-</span><span class="token operator">></span>父updated</code></pre>
<p>####</p>
<h4 id="更新过程（异步和同步相同）"><a href="#更新过程（异步和同步相同）" class="headerlink" title="更新过程（异步和同步相同）"></a>更新过程（异步和同步相同）</h4><pre class=" language-javascript"><code class="language-javascript">父beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子beforeUpdate<span class="token operator">-</span><span class="token operator">></span>子updated<span class="token operator">-</span><span class="token operator">></span>父updated</code></pre>
<p>####</p>
<h4 id="销毁过程（异步和同步相同）"><a href="#销毁过程（异步和同步相同）" class="headerlink" title="销毁过程（异步和同步相同）"></a>销毁过程（异步和同步相同）</h4><pre class=" language-javascript"><code class="language-javascript">父beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子beforeDestroy<span class="token operator">-</span><span class="token operator">></span>子destroyed<span class="token operator">-</span><span class="token operator">></span>父destroyed</code></pre>
<blockquote>
<p><strong>总结：</strong><br>异步父子组件的渲染，更新，销毁，更新和销毁的生命周期和同步组件相同，但是渲染与同步的不同，<br>父组件的<code>beforeCreate、created、beforeMount、mounted、``beforeUpdate (其中多了一步 update)</code> –&gt;所有子组件的<code>mounted</code> —-&gt; 父组件的<code>Updated</code></p>
</blockquote>
<h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><blockquote>
</blockquote>
<h5 id="两种引入方式的不同之处在于："><a href="#两种引入方式的不同之处在于：" class="headerlink" title="两种引入方式的不同之处在于："></a>两种引入方式的不同之处在于：</h5><blockquote>
<p>同步引入时生命周期顺序为：父组件的<code>beforeCreate、created、beforeMount</code> –&gt; 所有子组件的<code>beforeCreate、created、beforeMount</code> –&gt; 所有子组件的<code>mounted</code> –&gt; 父组件的<code>mounted</code></p>
</blockquote>
<blockquote>
<p>异步引入时生命周期顺序：父组件的<code>beforeCreate、created、beforeMount、mounted</code> –&gt; 子组件的<code>beforeCreate、created、beforeMount、mounted</code></p>
</blockquote>
<h2 id="mvc、mvp、mvvm"><a href="#mvc、mvp、mvvm" class="headerlink" title="mvc、mvp、mvvm"></a>mvc、mvp、mvvm</h2><blockquote>
<p>MVC，MVP 和 MVVM 都是常见的软件架构设计模式（Architectural Pattern），它通过分离关注点来改进代码的组织方式。不同于设计模式（Design Pattern），只是为了解决一类问题而总结出的抽象方法，一种架构模式往往使用了多种设计模式。<br>要了解 MVC、MVP 和 MVVM，就要知道它们的相同点和不同点。不同部分是 C(Controller)、P(Presenter)、VM(View-Model)，而相同的部分则是 MV(Model-View)。</p>
</blockquote>
<p>Model（数据层）：Model 层用于封装和应用程序的业务逻辑相关的数据以及对数据的处理方法。<br>View（视图层）：主要负责数据的展示</p>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><p>MVC 模式的意思是，软件可以分成三个部分。</p>
<ul>
<li>视图（View）：用户界面。</li>
<li>控制器（Controller）：业务逻辑</li>
<li>模型（Model）：数据保存</li>
</ul>
<p>各部分之间的通信方式如下<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597731631277-85e1a79d-6f5b-414c-affa-d6b574dfbcf3.png#height=365&id=mur3D&originHeight=365&originWidth=601&originalType=binary&size=0&status=done&style=none&width=601" alt=""></p>
<blockquote>
<ol>
<li>MVC 是单向通信。也就是 View 跟 Model，必须通过 Controller 来承上启下。</li>
<li>实例化 View 并向对应的 Model 实例注册，当 Model 发生变化时就去通知 View 做更新，这里用到了观察者模式。</li>
<li>Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。</li>
</ol>
</blockquote>
<ul>
<li>接受用户指令时，MVC 可以分成两种方式：<ul>
<li>通过 View 接受指令，传递给 Controller。</li>
<li>直接通过 controller 接受指令。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597731692262-e83df13a-deea-40e2-aa2e-d5eb523c5752.png#height=255&id=lm7eo&margin=%5Bobject%20Object%5D&name=image.png&originHeight=510&originWidth=583&originalType=binary&size=28897&status=done&style=none&width=291.5" alt="image.png">)<img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597731701799-cc0f8053-b059-49f4-83a3-099a510e7647.png#height=255&id=T3tei&margin=%5Bobject%20Object%5D&name=image.png&originHeight=486&originWidth=562&originalType=binary&size=26205&status=done&style=none&width=295" alt="image.png"></p>
<h3 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h3><p>定义：Model-View-Presenter，<br>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597731802955-171db3ab-b2af-46bd-b2c8-9bfa4356c12c.png#height=323&id=UHb0t&originHeight=323&originWidth=537&originalType=binary&size=0&status=done&style=none&width=537" alt=""></p>
<ol>
<li>各部分之间的通信，都是双向的。</li>
<li>View 与 Model 不发生联系，都通过 Presenter 传递。</li>
<li><strong>View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter 非常厚，所有逻辑都部署在 Presenter。</strong></li>
</ol>
<h3 id="MVVM："><a href="#MVVM：" class="headerlink" title="MVVM："></a>MVVM：</h3><p><strong>定义：指的是 Model - View -ViewModel 的简写，即模型-视图-视图模型</strong><br>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。唯一的区别是，它采用双向绑定（data-binding）：View 的变动，自动反映在 ViewModel，反之亦然。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597731867672-4e25f08d-d2c8-419a-a9bc-5d532b609374.png#height=380&id=DgtZU&originHeight=423&originWidth=556&originalType=binary&size=0&status=done&style=none&width=499" alt=""></p>
<p>优点：</p>
<blockquote>
<p>1、<br><strong>提高可维护性</strong><br>。解决了 MVP 大量的手动 View 和 Model 同步的问题，提供双向绑定机制。2、<br><strong>简化测试。</strong><br>因为同步逻辑是交由 Binder 做的，View 跟着 Model 同时变更，所以只需要保证 Model 的正确性，View 就正确。大大减少了对 View 同步更新的测试。</p>
</blockquote>
<p>缺点：</p>
<blockquote>
<p>1、过于简单的图形界面不适用，或说牛刀杀鸡。2、对于大型的图形应用程序，视图状态较多，ViewModel 的构建和维护的成本都会比较高。3、数据绑定的声明是指令式地写在 View 的模版当中的，这些内容是没办法去打断点 debug 的。</p>
</blockquote>
<h3 id="MVVM-模式及与-MVP-和-MVC-的区别"><a href="#MVVM-模式及与-MVP-和-MVC-的区别" class="headerlink" title="MVVM 模式及与 MVP 和 MVC 的区别"></a>MVVM 模式及与 MVP 和 MVC 的区别</h3><h4 id="MVC-和-MVP-的关系"><a href="#MVC-和-MVP-的关系" class="headerlink" title="MVC 和 MVP 的关系"></a>MVC 和 MVP 的关系</h4><ul>
<li>相同点：MVP 是从经典的模式 MVC 演变而来，它们的基本思想有相通的地方：Controller/Presenter 负责逻辑的处理，Model 提供数 据，View 负责显示。</li>
<li>不同点：在 MVP 中 View 并不直接使用 Model，它们之间的通信是通过 Presenter (MVC 中的 Controller)来进行的，所有的交互都发生在 Presenter 内部，而在 MVC 中 View 会直接从 Model 中读取数据而不是通过 Controller。MVC 全部是单项通信，而 MVP 是双向通信。</li>
</ul>
<h4 id="MVVM-和-MVP-的关系"><a href="#MVVM-和-MVP-的关系" class="headerlink" title="MVVM 和 MVP 的关系"></a>MVVM 和 MVP 的关系</h4><ul>
<li>相同点：MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。 唯一的区别是，</li>
<li>不同点：MVVM 采用双向绑定（data-binding）：View 的变动，自动反映在 ViewModel，反之亦然。这样     开发者就不用处理接收事件和 View 更新的工作。MVVM 把 View 和 Model 的同步逻辑自动化了。以前 Presenter 负责的 View 和 Model 同步不再手动地进行操作，而是交给框架所提供的数据绑定功能进行负责，只需要告诉它 View 显示的数据对应的是 Model 哪一部分即可。简化了业务与界面的依赖，还解决了数据频繁更新的问题（以前用 jQuery 操作 DOM 很繁琐）。</li>
</ul>
<h2 id="vue-数据双向绑定原理"><a href="#vue-数据双向绑定原理" class="headerlink" title="vue 数据双向绑定原理"></a>vue 数据双向绑定原理</h2><p>在 Vue 中，使用了双向绑定技术（Two-Way-Data-Binding），就是 View 的变化能实时让 Model 发生变化，而 Model 的变化也能实时更新到 View。</p>
<p>不同的 MVVM 框架中，实现双向数据绑定的技术有所不同。目前一些主流的前端框架实现数据绑定的方式大致有以下几种：</p>
<ul>
<li>数据劫持 (Vue)</li>
<li>发布-订阅模式 (Knockout、Backbone)</li>
<li>脏值检查 (Angular)</li>
</ul>
<p>我们这里主要讲讲<strong>Vue 的双向绑定</strong>：<br>Vue 采用数据劫持&amp;发布-订阅模式的方式，通过 ES5 提供的 <code>Object.defineProperty()</code> 方法来劫持（监控）各属性的 <code>getter</code> 、<code>setter</code> ，并在数据（对象）发生变动时通知订阅者，触发相应的监听回调。并且，由于是在不同的数据上触发同步，可以精确的将变更发送给绑定的视图，而不是对所有的数据都执行一次检测。 要实现 Vue 中的双向数据绑定，大致可以划分三个模块：Observer、Compile、Watcher，如图：<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597731278950-a02bf7fb-5b5c-4274-ae59-1f9e74e8829b.webp#height=396&id=onbsW&originHeight=396&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt=""></p>
<ul>
<li>Observer 数据监听器<br>负责对数据对象的所有属性进行监听（数据劫持），监听到数据发生变化后通知订阅者。</li>
<li>Compiler 指令解析器<br>扫描模板，并对指令进行解析，然后绑定指定事件。</li>
<li>Watcher 订阅者<br>关联 Observer 和 Compile，能够订阅并收到属性变动的通知，执行指令绑定的相应操作，更新视图。Update()是它自身的一个方法，用于执行 Compile 中绑定的回调，更新视图。</li>
</ul>
<h3 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h3><p>一般对数据的劫持都是通过 Object.defineProperty 方法进行的，Vue 中对应的函数为  <code>defineReactive</code> ，其普通对象的劫持的精简版代码如下：<br>从 MVC –&gt; MVP –&gt; MVVM</p>
<h3 id="vue-的单项数据流："><a href="#vue-的单项数据流：" class="headerlink" title="vue 的单项数据流："></a>vue 的单项数据流：</h3><p>• Vue 是单向数据流，不是双向绑定<br>• Vue 的双向绑定不过是语法糖<br>• Object.definePropert 是劫持属性的 get 和 set 用来做响应式更新的。</p>
<p>vue 还是单向数据流，v-model 只不过是语法糖，它是:value=”sth”和@change=”val =&gt; sth = val”的简写形式。</p>
<h3 id="Vue-是怎么实现数据响应式更新的："><a href="#Vue-是怎么实现数据响应式更新的：" class="headerlink" title="Vue 是怎么实现数据响应式更新的："></a>Vue 是怎么实现数据响应式更新的：</h3><p>面试官期望听到的回答是：<strong>通过 Object.defineProperty()的 get 和 set 方法来实现响应式更新。</strong></p>
<h2 id="Vue-的虚拟-Dom"><a href="#Vue-的虚拟-Dom" class="headerlink" title="Vue 的虚拟 Dom"></a>Vue 的虚拟 Dom</h2><p>浏览器解析一个 html 大致分为五步：<br><strong>创建 DOM tree –&gt; 创建 Style Rules -&gt; 构建 Render tree -&gt; 布局 Layout –&gt; 绘制 Painting。</strong></p>
<p>每次对真实 dom 进行操作的时候，浏览器都会从构建 dom 树开始从头到尾执行一遍流程。真实的 dom 操作代价昂贵，操作频繁还会引起页面卡顿影响用户体验，<strong>虚拟 dom 就是为了解决这个浏览器性能问题才被创造出来</strong><br>虚拟 dom 在执行 dom 的更新操作后，虚拟 dom 不会直接操作真实 dom，而是将更新的 diff 内容保存到本地 js 对象中，然后一次性 attach 到 dom 树上，通知浏览器进行 dom 绘制避免大量无谓的计算。</p>
<p>简单总结：虚拟 DOM 是将真实的 DOM 节点用 JavaScript 模拟出来，将 DOM 变化的对比，放到 Js 层来做。</p>
<h3 id="你的知道浏览器的虚拟-DOM-与真实-DOM-的区别"><a href="#你的知道浏览器的虚拟-DOM-与真实-DOM-的区别" class="headerlink" title="你的知道浏览器的虚拟 DOM 与真实 DOM 的区别"></a>你的知道浏览器的虚拟 DOM 与真实 DOM 的区别</h3><p>（<strong>注意：需不需要虚拟 DOM，其实与框架的 DOM 操作机制有关</strong>）：</p>
<ol>
<li>虚拟 DOM 不会进行排版与重绘操作</li>
<li>虚拟 DOM 进行频繁修改，然后一次性比较并修改真实 DOM 中需要改的部分（注意！），最后并在真实 DOM 中进行排版与重绘，减少过多 DOM 节点排版与重绘损耗</li>
<li>真实 DOM 频繁排版与重绘的效率是相当低的</li>
<li>虚拟 DOM 有效降低大面积（真实 DOM 节点）的重绘与排版，因为最终与真实 DOM 比较差异，可以只渲染局部（同 2）</li>
</ol>
<p>使用虚拟 DOM 的损耗计算：</p>
<pre class=" language-javascript"><code class="language-javascript">总损耗 <span class="token operator">=</span> 虚拟DOM增删改 <span class="token operator">+</span> （与Diff算法效率有关）真实DOM差异增删改 <span class="token operator">+</span> （较少的节点）排版与重绘</code></pre>
<p>直接使用真实 DOM 的损耗计算：</p>
<pre class=" language-javascript"><code class="language-javascript">总损耗 <span class="token operator">=</span> 真实DOM完全增删改 <span class="token operator">+</span> （可能较多的节点）排版与重绘</code></pre>
<p><strong>总之，一切为了减弱频繁的大面积重绘引发的性能问题，不同框架不一定需要虚拟 DOM，关键看框架是否频繁会引发大面积的 DOM 操作</strong></p>
<h3 id="vue-的-diff-是算法"><a href="#vue-的-diff-是算法" class="headerlink" title="vue 的 diff 是算法"></a>vue 的 diff 是算法</h3><p>在采取 diff 算法比较新旧节点的时候，比较只会在同层级进行, 不会跨层级比较。Vue 的 diff 算法是<strong>仅在同级的 vnode 间做 diff，递归地进行同级 vnode 的 diff，最终实现整个 DOM 树的更新</strong>。因为跨层级的操作是非常少的，忽略不计，这样时间复杂度就从 O(n3)变成 O(n)。</p>
<h2 id="JavaScript：回流（重排）与重绘"><a href="#JavaScript：回流（重排）与重绘" class="headerlink" title="JavaScript：回流（重排）与重绘"></a><a href="https://segmentfault.com/a/1190000018452924" target="_blank" rel="noopener">JavaScript：回流（重排）与重绘</a></h2><h3 id="回流（元素的布局位置，规模尺寸，隐藏等改变）"><a href="#回流（元素的布局位置，规模尺寸，隐藏等改变）" class="headerlink" title="回流（元素的布局位置，规模尺寸，隐藏等改变）"></a>回流（元素的布局位置，规模尺寸，隐藏等改变）</h3><p>回流当 render tree 中的一部分或全部因为元素的规模尺寸、布局、隐藏等改变时，浏览器重新渲染部分 DOM 或全部 DOM 的过程。回流也被称为重排，其实从字面上来看，重排更容易让人形象易懂（即重新排版整个页面）。</p>
<h3 id="重绘（不改变元素的位置，只改变元素的样式）"><a href="#重绘（不改变元素的位置，只改变元素的样式）" class="headerlink" title="重绘（不改变元素的位置，只改变元素的样式）"></a>重绘（不改变元素的位置，只改变元素的样式）</h3><p><strong>当页面元素样式改变不影响元素在文档流中的位置时</strong>（如 background-color，border-color，visibility），浏览器只会将新样式赋予元素并进行重新绘制操作。</p>
<p><strong>回流必将引起重绘，而重绘不一定会引起回流。</strong></p>
<h3 id="如何减少回流、重绘"><a href="#如何减少回流、重绘" class="headerlink" title="如何减少回流、重绘"></a>如何减少回流、重绘</h3><h4 id="CSS-中避免回流、重绘"><a href="#CSS-中避免回流、重绘" class="headerlink" title="CSS 中避免回流、重绘"></a>CSS 中避免回流、重绘</h4><p>1.尽可能在 DOM 树的最末端改变 class 2.避免设置多层内联样式 3.动画效果应用到 position 属性为 absolute 或 fixed 的元素上 4.避免使用 table 布局 5.使用 css3 硬件加速，可以让 transform、opacity、filters 等动画效果不会引起回流重绘</p>
<h4 id="JS-操作避免回流、重绘"><a href="#JS-操作避免回流、重绘" class="headerlink" title="JS 操作避免回流、重绘"></a>JS 操作避免回流、重绘</h4><p><strong>1.避免使用 JS 一个样式修改完接着改下一个样式，最好一次性更改 CSS 样式，或者将样式列表定义为 class 的名称</strong> 2.避免频繁操作 DOM，使用文档片段创建一个子树，然后再拷贝到文档中 3.先隐藏元素，进行修改后再显示该元素，因为 display:none 上的 DOM 操作不会引发回流和重绘 4.避免循环读取 offsetLeft 等属性，在循环之前把它们存起来 5.对于复杂动画效果,使用绝对定位让其脱离文档流，否则会引起父元素及后续元素大量的回流</p>
<h4 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h4><p><strong>回流在浏览器中属于一种用户主导的操作，所以知道如何去改进回流时间以及知道各种文档属性（DOM 节点深度，css 的渲染效率，各种各样的样式改变）对回流时间的影响对于前端开发来讲是很有帮助的。有时即便是回流一个单一的元素，也可能要求它的父元素以及任何跟随它的元素也产生回流。例如需要改变某个元素的背景，这就不涉及该元素的属性，所以只发生重绘。</strong></p>
<h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><h3 id="定义：vue-js-应用程序开发的状态管理模式"><a href="#定义：vue-js-应用程序开发的状态管理模式" class="headerlink" title="定义：vue.js 应用程序开发的状态管理模式"></a>定义：vue.js 应用程序开发的状态管理模式</h3><h3 id="vuex-五大核心属性：state，getter，mutation，action，module"><a href="#vuex-五大核心属性：state，getter，mutation，action，module" class="headerlink" title="vuex 五大核心属性：state，getter，mutation，action，module"></a>vuex 五大核心属性：state，getter，mutation，action，module</h3><ul>
<li>state：存储数据，存储状态；在根实例中注册了 store 后，用 this.$store.state  访问数据。</li>
<li>getters: store 的计算属性，它的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算，多用于过滤 state 的数据，用 this.$store.getter 访问数据。</li>
<li>mutation：更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。用 this.$store.commit(‘add’, { amount: 10 })来提交数据。</li>
<li>action：包含任意异步操作，通过提交 mutation 方法，通过 mutation 来改变 state。通过 this.$store.dispatch(‘addCountAction’)发起异步。</li>
<li>module：将 store 分割成模块，每个模块都具有 state、mutation、action、getter、甚至是嵌套子模块。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">└── store
    ├── index<span class="token punctuation">.</span>js          # 我们组装模块并导出 store 的地方
    ├── actions<span class="token punctuation">.</span>js        # 根级别的 action
    ├── mutations<span class="token punctuation">.</span>js      # 根级别的 mutation
    ├── state<span class="token punctuation">.</span>js          # 根级别的 state
    └── modules
        ├── module1<span class="token punctuation">.</span>js   # 模块<span class="token number">1</span>的state树
        └── module2<span class="token punctuation">.</span>js   # 模块<span class="token number">2</span>的state树</code></pre>
<p>module1.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> WIDTH_ADD <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/store/mutation-types.js"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入事件类型</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    height<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function">modulegGetWidth</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">modulegetHeight</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>WIDTH_ADD<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 使用常量替代 Mutation 事件类型</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>width<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">addHeight</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 不使用常量</span>
      <span class="token keyword">return</span> state<span class="token punctuation">.</span>height<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<p>index.js</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">"./getters"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"./mutations"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"./actions"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> module1 <span class="token keyword">from</span> <span class="token string">"./modules/module1.js"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入module1</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">,</span>
  getters<span class="token punctuation">,</span>
  mutations<span class="token punctuation">,</span>
  actions<span class="token punctuation">,</span>
  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    module1<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 注册完成</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p><strong>定义：简单来说路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源（</strong>请求不同的页面是路由的其中一种功能<strong>）</strong>。</p>
<p>异步交互体验的更高级版本就是 SPA —— 单页应用。单页应用不仅仅是在页面交互是无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。</p>
<h3 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h3><h4 id="1-hash-模式"><a href="#1-hash-模式" class="headerlink" title="1. hash 模式"></a>1. hash 模式</h4><p>改变 url 的情况下，保证页面的不刷新。后面 hash 值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次 hash 值的变化，还会触发<code>hashchange</code>  这个事件，通过这个事件我们就可以知道 hash 值发生了哪些变化。然后我们便可以监听<code>hashchange</code>来实现更新页面部分内容的操作：<br><strong>hash 模式背后的原理是</strong><code>**onhashchange**</code><strong>事件,可以在</strong><code>**window**</code><strong>对象上监听这个事件。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//www.xxx.com/#/login</span>

http<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token function">matchAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// todo 匹配 hash 做 dom 更新操作</span>
<span class="token punctuation">}</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"hashchange"</span><span class="token punctuation">,</span> matchAndUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//onhashChange</span>
window<span class="token punctuation">.</span>onhashchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>oldURL<span class="token punctuation">,</span> event<span class="token punctuation">.</span>newURL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> hash<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h4 id="2-history-模式"><a href="#2-history-模式" class="headerlink" title="2. history 模式"></a>2. history 模式</h4><p>因为 HTML5 标准发布，多了两个 API，<code>pushState()</code>  和  <code>replaceState()。</code>通过这两个 API （1）可以改变 url 地址且不会发送请求，（2）不仅可以读取历史记录栈，还可以对<strong>浏览器历史记录栈进行修改。</strong><br>同时还有<code>popstate</code>  事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟 hash 实现相同的。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">matchAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// todo 匹配路径 做 dom 更新操作</span>
<span class="token punctuation">}</span>

window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"popstate"</span><span class="token punctuation">,</span> matchAndUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>

window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span>stateObject<span class="token punctuation">,</span> title<span class="token punctuation">,</span> URL<span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>stateObject<span class="token punctuation">,</span> title<span class="token punctuation">,</span> URL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>用了 HTML5 的实现，单页路由的 url 就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。</p>
</blockquote>
<blockquote>
<p>区别：</p>
<ul>
<li>前面的 hashchange，你只能改变#后面的 url 片段。而 pushState 设置的新 URL 可以是与当前 URL 同源的任意 URL。</li>
<li>history 模式则会将 URL 修改得就和正常请求后端的 URL 一样,如后端没有配置对应/user/id 的路由处理，则会返回 404 错误</li>
</ul>
<p>当用户刷新页面之类的操作时，浏览器会给服务器发送请求，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面。</p>
</blockquote>
<h2 id="vue-路由传参方式"><a href="#vue-路由传参方式" class="headerlink" title="vue 路由传参方式"></a>vue 路由传参方式</h2><h3 id="1-params-传参（刷新参数会丢失）："><a href="#1-params-传参（刷新参数会丢失）：" class="headerlink" title="1.params 传参（刷新参数会丢失）："></a>1.params 传参<strong>（刷新参数会丢失）</strong>：</h3><p><strong>name 与 params 结合使用   相当于 post。</strong><br>传参方式：this.$router.push({name:’路由命名’,params:{参数名:参数值,参数名:参数<strong>值}})</strong><br>url 展现方式：/detail</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件传参</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"Describe"</span><span class="token punctuation">,</span>
  params<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> id<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//子组件接收</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre>
<h3 id="2-query-传参：（刷新不会丢失参数）"><a href="#2-query-传参：（刷新不会丢失参数）" class="headerlink" title="2.query 传参：（刷新不会丢失参数）"></a>2.query 传参：<strong>（刷新不会丢失参数）</strong></h3><p><strong>path 与 query 结合使用，相当于 get，参数会显示在地址栏里</strong><br><strong>传参方式：this.$router.push({path:’路由命名’, query:{ 参数名:参数值 } })</strong><br>url 展现方式：/detail?id=1&amp;user=123&amp;identity=1</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父组件传值</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  path<span class="token punctuation">:</span> <span class="token string">"/describe"</span><span class="token punctuation">,</span>
  query<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> id<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//子组件</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre>
<h3 id="3-params-动态路由传参-刷新不会丢失参数）："><a href="#3-params-动态路由传参-刷新不会丢失参数）：" class="headerlink" title="3.params+动态路由传参(刷新不会丢失参数）："></a>3.params+动态路由传参(<strong>刷新不会丢失参数）</strong>：</h3><p><strong>参数会显示在地址栏</strong><br>**this.$router.push({path:’路由命名’, params:{ 参数名:参数值 } })url 展现方式：/detail/3/1</p>
<p>父组件：</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">//父组件</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          path<span class="token punctuation">:</span> <span class="token string">'/describe'</span><span class="token punctuation">,</span>
          params<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">:</span> id
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true">//路由写法</span>
            <span class="token punctuation">{</span>
                  path<span class="token punctuation">:</span> <span class="token string">'/describe/:id'</span><span class="token punctuation">,</span>
                  name<span class="token punctuation">:</span> <span class="token string">'Describe'</span><span class="token punctuation">,</span>
                  component<span class="token punctuation">:</span> Describe
            <span class="token punctuation">}</span>

            <span class="token comment" spellcheck="true">//子组件</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
</code></pre>
<h3 id="4-router-link-传参"><a href="#4-router-link-传参" class="headerlink" title="4.router-link 传参"></a>4.router-link 传参</h3><p>1.路径：<a href="http://localhost:8081/#/test?name=1" target="_blank" rel="noopener">http://localhost:8081/#/test?name=1</a>(jquery 和 params 的结合)</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//(id是参数)</span>
<span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"{path:'/test',query: {name: id}, params:{id:id}}"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>

<span class="token comment" spellcheck="true">//使用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id
</code></pre>
<p>2.路径：<a href="http://localhost:8081/#/test/1（相当一动态路由传参）" target="_blank" rel="noopener">http://localhost:8081/#/test/1（相当一动态路由传参）</a></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//(id是参数)</span>
<span class="token operator">&lt;</span>router<span class="token operator">-</span>link <span class="token punctuation">:</span>to<span class="token operator">=</span><span class="token string">"'/test/'+id"</span><span class="token operator">></span>跳转<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>

<span class="token comment" spellcheck="true">//路由</span>
<span class="token punctuation">{</span>
    path<span class="token punctuation">:</span><span class="token string">'/test/:id/'</span><span class="token punctuation">,</span>
    name<span class="token punctuation">:</span><span class="token string">'Test'</span><span class="token punctuation">,</span>
      component<span class="token punctuation">:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./components/Test.vue'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">//使用</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id   <span class="token comment" spellcheck="true">// (这个id给上图路由的配置有关）</span>
</code></pre>
<p><strong>注意：router-link 中链接如果是‘/’开始就是从根路由开始，如果开始不带‘/’，则从当前路由开始</strong></p>
<h3 id="5-vuex-传参"><a href="#5-vuex-传参" class="headerlink" title="5.vuex 传参"></a>5.vuex 传参</h3><p>页面刷新 store.state 中的数据消失是不可避免的，那么使用 localStorage 或者 sessionStorage 来避免这个问题。如果是一个一个数据添加实在是太繁琐了。那么就需要一个全局的方法来，将 store 的数据存储在 localStorage 里。<br>App.vue</p>
<pre class=" language-javascript"><code class="language-javascript">created<span class="token punctuation">:</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//在页面刷新时将vuex里的信息保存到localStorage里</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"beforeunload"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"messageStore"</span><span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment" spellcheck="true">//在页面加载时读取localStorage里的状态信息</span>
  localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"messageStore"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span>
      Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">,</span>
        JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"messageStore"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h2 id="router-和-route-区别"><a href="#router-和-route-区别" class="headerlink" title="$router 和 $route 区别"></a>$router 和 $route 区别</h2><h3 id="1-gt-router-和-route-的区别"><a href="#1-gt-router-和-route-的区别" class="headerlink" title="1&gt;router 和 route 的区别"></a>1&gt;router 和 route 的区别</h3><ul>
<li><strong>router：router 为 VueRouter 实例(路由实例)，是路由的操作对象，对象包括了路由的跳转方法，钩子函数等。</strong></li>
<li><strong>route：route 为当前 router 跳转对象, 包含路由信息对象, 只读对象, 包括 path，params，hash，query，fullPath，matched，name 等路由信息参数。</strong></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1、手写完整的 path:</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`/user/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>userId<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//2、用 params 传递(url 不带参数，http:localhost:8080/#/user)：</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">"123"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//3、用 query 传递(url 带参数:http:localhost:8080/#/user?userId=123)：</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/user"</span><span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token punctuation">{</span> userId<span class="token punctuation">:</span> <span class="token string">"123"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>userId<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="vue-的首屏优化"><a href="#vue-的首屏优化" class="headerlink" title="vue 的首屏优化"></a>vue 的首屏优化</h2><h3 id="一、减小-chunk-vendors-js-体积"><a href="#一、减小-chunk-vendors-js-体积" class="headerlink" title="一、减小 chunk-vendors.js 体积"></a>一、减小 chunk-vendors.js 体积</h3><p>解决方式：<br><strong>1、路由懒加载</strong></p>
<pre><code>const Home = () =&gt; import(/* webpackChunkName: &quot;home&quot; */ &#39;@/views/home&#39;);
const Design = () =&gt; import(/* webpackChunkName: &quot;design&quot; */ &#39;@/views/design&#39;);
const HotZone = () =&gt; import(/* webpackChunkName: &quot;hot-zone&quot; */ &#39;@/views/hot-zone&#39;);</code></pre><p><strong>2、lodash 按需加载</strong></p>
<pre><code>import _ from &#39;lodash&#39;; // 或 import lodash from &#39;lodash&#39;
// 改成
import flow from &#39;lodash/flow&#39;;</code></pre><p><strong>3、gd-components 组件按需引入</strong><br>安装<code>babel-plugin-import</code> 插件，修改<code>babel.config.js</code> 文件</p>
<pre><code>module.exports = {
    presets: [&#39;@vue/app&#39;],
    plugins: [
        [&#39;import&#39;, {
            &quot;libraryName&quot;: &#39;@gaoding/gd-components&#39;,
            &quot;libraryDirectory&quot;: &#39;lib/components&#39;
        }]
    ]
};</code></pre><p>4.对 css 和 js 进行压缩</p>
<h3 id="二、DNS预解析"><a href="#二、DNS预解析" class="headerlink" title="二、DNS预解析"></a>二、<code>DNS</code>预解析</h3><pre><code>&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//retcode.alicdn.com&quot;&gt;
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//st-gdx.dancf.com&quot;&gt;
&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//alicdn.huanleguang.com&quot;&gt;</code></pre><p>关于这点，底下有详细的文章介绍，有兴趣的朋友可以点进去了解，这边不多介绍。</p>
<h3 id="三、图片懒加载"><a href="#三、图片懒加载" class="headerlink" title="三、图片懒加载"></a>三、图片懒加载</h3><p><strong>四、减少 dom 数量和请求数</strong><br>由图片 lazy load，我们自然就考虑到了 dom 也可以 lazy load，所以把之前图片懒加载的方式延伸一下，改成 dom lazy load，同时对应的请求也放到后面再执行。<br>优化前的节点数和请求数：<br><strong>可以看到请求数和 dom 节点数都已经大幅度的减少。</strong><br>具体实现的原理很简单，也是利用<code>IntersectionObserver api</code>， 当 dom 刚刚进入视口再开始请求和渲染，对应的代码实现。</p>
<pre><code>lazyLoadTemplate() {
    this.intersectionObservers = new IntersectionObserver(entries =&gt; {
        entries.forEach(e =&gt; {
            if (e.intersectionRatio &lt; this.ratio) return;
            const id = e.target.dataset.id;
            this.loaded[id] = true;
            const funcName = `load${firstUpperCase(id)}`;
            this[funcName] &amp;&amp; this[funcName]();
            this.intersectionObservers.unobserve(e.target);
        });
    }, {
        threshold: [0, 0.1, 0.25, 1]
    });
    const sections = this.$el.querySelectorAll(&#39;.home-sections&#39;);
    [...sections].forEach(item =&gt; {
        this.intersectionObservers.observe(item);
    });
},</code></pre><h3 id="五、-SSR"><a href="#五、-SSR" class="headerlink" title="五、 SSR"></a>五、 SSR</h3><p>与传统 SPA (单页应用程序 (Single-Page Application)) 相比，服务器端渲染 (SSR) 的优势主要在于：</p>
<ul>
<li><strong>更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。</strong></li>
<li><strong>更快的内容到达时间 (time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备</strong>。无需等待所有的 JavaScript 都完成下载并执行，才显示服务器渲染的标记，所以你的用户将会更快速地看到完整渲染的页面。通常可以产生更好的用户体验，并且对于那些「内容到达时间(time-to-content) 与转化率直接相关」的应用程序而言，服务器端渲染 (SSR) 至关重要。</li>
</ul>
<p>服务端渲染实现原理机制：<strong>在服务端拿数据进行解析渲染，直接生成 html 片段返回给前端。然后前端可以通过解析后端返回的 html 片段到前端页面，大致有以下两种形式：</strong><br>1、服务器通过模版引擎直接渲染整个页面，例如 java 后端的 vm 模版引擎，php 后端的 smarty 模版引擎。<br>2、服务渲染生成 html 代码块, 前端通过 AJAX 获取然后使用 js 动态添加。</p>
<p>作者：wqzwh<br>链接：<a href="https://juejin.im/post/6844903545448169479" target="_blank" rel="noopener">https://juejin.im/post/6844903545448169479</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="六-预渲染-prerender-spa-plugin"><a href="#六-预渲染-prerender-spa-plugin" class="headerlink" title="六.预渲染(prerender-spa-plugin)"></a>六.预渲染(<a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a>)</h3><p>我们知道 SPA 有很多优点，不过一个缺点就是对(不是 Google 的)愚蠢的搜索引擎的 SEO 不友好，为了照顾这些引擎，目前主要有两个方案：<strong>服务端渲染</strong>(Server Side Rendering)、<strong>预渲染</strong>(Prerending)。<br>如果你只需要改善少数页面（例如 <code>/</code>, <code>/about</code>, <code>/contact</code> 等）的 <code>SEO</code>，那么你可能需要预渲染。无需使用 web 服务器实时动态编译 HTML (服务端渲染, SSR)，<strong>而是使用预渲染方式，在构建时(build time)简单地生成针对特定路由的静态 HTML 文件。</strong>它主要使用 <a href="https://github.com/chrisvfritz/prerender-spa-plugin" target="_blank" rel="noopener">prerender-spa-plugin</a> 插件，其与 SSR 一样都可以加快页面的加载速度，并且侵入性更小，在已上线的项目稍加改动也可以轻松引入预渲染机制，而 SSR 方案则需要将整个项目结构推翻；<br>访问预渲染出来的页面在访问时与<code>SSR</code>一样快，并且它将服务端编译 HTML 的时机提前到了构建时，因此也降低了服务端的压力，如果你的服务器跟我的一样买的 <strong>1M1G1 核</strong> 的小水管服务器 ( 穷 )，那么预渲染可能更适合你。不过 SSR 和预渲染的使用场景还是有较明显的区别的。预渲染的使用场景更多是简单的静态页面。服务端渲染适用于复杂、较大型、与服务端交互频繁的功能型网站，比如电商网站。</p>
<p>最后如果希望进一步优化生成出来页面的 SEO，可以配合  <a href="https://github.com/muwoo/vue-meta-info" target="_blank" rel="noopener">vue-meta-info</a>  这个网上有很多文章，就不赘述了</p>
<p>作者：SHERlocked93<br>链接：<a href="https://juejin.im/post/6844903668488093704" target="_blank" rel="noopener">https://juejin.im/post/6844903668488093704</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h3 id="七-服务端开启-gzip-压缩"><a href="#七-服务端开启-gzip-压缩" class="headerlink" title="七.服务端开启 gzip 压缩"></a>七.服务端开启 gzip 压缩</h3><h3 id="8-app-js-分包"><a href="#8-app-js-分包" class="headerlink" title="8.app.js 分包"></a>8.app.js 分包</h3><h3 id="9-首页加-loading-或-骨架屏-（仅仅是优化体验）"><a href="#9-首页加-loading-或-骨架屏-（仅仅是优化体验）" class="headerlink" title="9.首页加 loading 或 骨架屏 （仅仅是优化体验）"></a>9.首页加 loading 或 骨架屏 （仅仅是优化体验）</h3><h2 id="webpack-模块"><a href="#webpack-模块" class="headerlink" title="webpack 模块"></a>webpack 模块</h2><h3 id="webpack-的优点："><a href="#webpack-的优点：" class="headerlink" title="webpack 的优点："></a>webpack 的优点：</h3><ul>
<li>代码转换: <code>typeScript</code> 编译成 <code>javaScript</code>、<code>scss，less</code> 编译成 <code>css</code>.</li>
<li>文件优化：压缩 <code>javaScript</code>、<code>css</code>、<code>html</code> 代码，压缩合并图片。</li>
<li>代码分割：提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>
<li>模块合并：在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>
<li>自动刷新：监听本地源代码的变化，自动重新构建、刷新浏览器。</li>
<li>扩展性强，插件机制完善。</li>
</ul>
<h3 id="webpack-打包过程："><a href="#webpack-打包过程：" class="headerlink" title="webpack 打包过程："></a>webpack 打包过程：</h3><p>1.利用 babel 完成代码转换,并生成单个文件的依赖 2.从入口开始递归分析，并生成依赖图谱 3.将各个引用模块打包为一个立即执行函数 4.将最终的 bundle 文件写入 bundle.js 中</p>
<h3 id="Webpack-的四大核心："><a href="#Webpack-的四大核心：" class="headerlink" title="Webpack 的四大核心："></a>Webpack 的四大核心：</h3><ul>
<li>entry：js 入口源文件</li>
<li>output：生成文件</li>
<li>loader：进行文件处理</li>
<li>plugins：插件，比 loader 更强大，能使用更多 webpack 的 api</li>
</ul>
<h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>webpack 应该使用哪个模块做为<strong>入口文件，</strong>来作为构建其内部依赖图的开始。进去入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的，每个依赖项随即被处理，最后输出到称之为 bundles 的文件中。<br>单⼊⼝：entry 是⼀个字符串</p>
<pre><code>module.exports = {
  entry: &#39;./src/index.js&#39;
}</code></pre><p>多⼊⼝：entry 是⼀个对象</p>
<pre><code>module.exports = {
  entry: {
    index: &#39;./src/index.js&#39;,
    manager: &#39;./src/manager.js&#39;
  }
}</code></pre><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>告诉 webpack 在哪里<strong>输出它所创建的 bund</strong>les，以及如何命名这些文件，这些都可以在 webpack 的配置文件中指定。<br>单⼊⼝配置</p>
<pre><code>module.exports = {
    entry: &#39;./src/index.js&#39;,
    output: {
        filename: &#39;bundle.js’,
        path: __dirname + &#39;/dist&#39;
    }
};</code></pre><p>多⼊⼝配置</p>
<pre><code>module.exports = {
  entry: {
    app: &#39;./src/app.js&#39;,
    search: &#39;./src/search.js&#39;
  },
  output: {
    filename: &#39;[name].js&#39;,
    path: __dirname + &#39;/dist&#39;
  }
}</code></pre><p>通过[name]占位符确保⽂件名称的唯⼀</p>
<h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p><code>loader</code> 让 <code>webpack</code> 能够去处理那些非 <code>javaScript</code> 文件（<code>**webpack**</code>** 自身只理解 <strong>`</strong>javaScript<strong><code>）。</code>loader` 可以</strong>将所有类型的文件转换为 <strong>`</strong>webpack<strong>`</strong> 能够处理的有效模块**，然后你就可以利用 <code>webpack</code> 的打包能力，对它们进行处理。</p>
<h3 id="loader-的特点"><a href="#loader-的特点" class="headerlink" title="loader 的特点"></a>loader 的特点</h3><ul>
<li>一个 Loader 的职责是单一的，只需要完成一种转换</li>
<li>一个 Loader 其实就是一个 Node.js 模块，这个模块需要导出一个函数</li>
<li>loader 总是从右到左地被调用。</li>
</ul>
<h3 id="常用的-loader"><a href="#常用的-loader" class="headerlink" title="常用的 loader"></a>常用的 loader</h3><h4 id="处理样式"><a href="#处理样式" class="headerlink" title="处理样式"></a>处理样式</h4><ul>
<li><code>**css-loader**</code><strong>: 加载.css 文件，</strong></li>
<li><code>**style-loader**</code><strong>:使用 style 标签将 **`</strong>css-loader<strong>`</strong> 内部样式注入到我们的 html 页面**</li>
<li><code>**less-loader, sass-loader**</code><strong>: 解析 css 预处理器</strong></li>
</ul>
<h4 id="处理-js"><a href="#处理-js" class="headerlink" title="处理 js"></a>处理 js</h4><ul>
<li>让你能使用最新的 js 代码（ES6，ES7…）</li>
<li>让你能使用基于 js 进行了拓展的语言，比如 React 的 JSX；</li>
</ul>
<h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p>处理图片资源时，我们常用的两种 loader 是<code>file-loader</code>或者<code>url-loader</code>，两者的主要差异在于。<code>url-loader</code>可以设置图片大小限制，当图片超过限制时，其表现行为等同于<code>file-loader</code>，而当图片不超过限制时，则会将图片以<code>base64</code>的形式打包进 css 文件，以减少请求次数</p>
<h4 id="处理-vue-文件"><a href="#处理-vue-文件" class="headerlink" title="处理.vue 文件"></a>处理.vue 文件</h4><p><code>vue-loader</code> 是 <code>webpack</code> 的加载器模块，它使我们可以用 <code>.vue</code> 文件格式编写单文件组件。单文件组件文件有三个部分，即模板、脚本和样式。 <code>vue-loader</code> 模块允许 <code>webpack</code> 使用单独的加载器模块（例如 <code>sass 或 scss 加载器</code>）提取和处理每个部分。该设置使我们可以使用 <code>.vue</code> 文件无缝编写程序。</p>
<h3 id="开发一个-loader"><a href="#开发一个-loader" class="headerlink" title="开发一个 loader"></a>开发一个 loader</h3><p>需求：手写一个 <code>loader</code>，将 <code>&#39;kobe&#39;</code> 转换成 <code>&#39;Black Mamba&#39;</code>。当然大家可以根据自己的需求进行设计。这里只是讲解方法。</p>
<h4 id="1、编写-loader"><a href="#1、编写-loader" class="headerlink" title="1、编写 loader"></a>1、编写 loader</h4><p>在根目录下，新建目录 <code>kobe-loader</code> 作为我们编写 <code>loader</code> 的名称，执行 <code>npm init -y</code> 命令，新建一个模块化项目，然后新建 <code>index.js</code> 文件，相关源码如下：</p>
<pre><code>module.exports = function(content) {
  return content &amp;&amp; content.replace(/kobe/gi, &#39;Black Mamba&#39;)
}</code></pre><h4 id="2、注册模块"><a href="#2、注册模块" class="headerlink" title="2、注册模块"></a>2、注册模块</h4><p>正常我们安装的 <code>loader</code> 是从 <code>npm</code> 下载安装，但是我们可以在 <code>kobe-loader</code> 目录底下使用 <code>npm link</code> 做到在不发布模块的情况下，将本地的一个正在开发的模块的源码链接到项目的 <code>node_modules</code> 目录下，让项目可以直接使用本地的 <code>npm</code> 模块。</p>
<pre><code>npm link</code></pre><p>然后在项目根目录执行以下命令，将注册到全局的本地 <code>npm</code> 模块链接到项目的 <code>node_modules</code> 下</p>
<pre><code>$ npm link kobe-loader</code></pre><p>注册成功后，我们可以在 <code>node_modules</code> 目录下能查找到对应的 <code>loader</code>。</p>
<h4 id="3、在-webpack-中配置-loader"><a href="#3、在-webpack-中配置-loader" class="headerlink" title="3、在 webpack 中配置 loader"></a>3、在 webpack 中配置 loader</h4><p>在 <code>webpack.base.conf.js</code> 加上如下配置</p>
<pre><code>{
  test:/\.js/,
  loader: &#39;kobe-loader&#39;
}</code></pre><p>此时，我们在所有 js 文件下书写的 <code>&#39;kobe&#39;</code> 就全部替换成 <code>&#39;Black Mamba&#39;</code>了。</p>
<h4 id="4、配置参数"><a href="#4、配置参数" class="headerlink" title="4、配置参数"></a>4、配置参数</h4><p>上面我们是写死的替换文案，假如我想通过配置项来改变，可以在 loader 中做以下调整</p>
<pre><code>// custom-loader/index.js
var utils = require(&#39;loader-utils&#39;)
module.exports = function (content) {
  const options = utils.getOptions(this)
  return content &amp;&amp; content.replace(/kobe/gi, options.name)
}
// webpack.base.conf.js
{
  test:/\.js/,
  use: {
    loader: &#39;kobe-loader&#39;,
    options: {
      name: &#39;kobe&#39;,
    }
  }
}</code></pre><h2 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h2><p><strong>专注处理 webpack 在编译过程中的某个特定的任务的功能模块，可以称为插件。</strong></p>
<h3 id="Plugin-的特点"><a href="#Plugin-的特点" class="headerlink" title="Plugin 的特点"></a>Plugin 的特点</h3><ul>
<li>是一个独立的模块</li>
<li>模块对外暴露一个 js 函数</li>
<li>函数的原型 <code>(prototype)</code> 上定义了一个注入 <code>compiler</code> 对象的 <code>apply</code>方法 <code>apply</code> 函数中需要有通过 <code>compiler</code> 对象挂载的 <code>webpack</code> 事件钩子，钩子的回调中能拿到当前编译的 <code>compilation</code> 对象，如果是异步编译插件的话可以拿到回调 <code>callback</code></li>
<li>完成自定义子编译流程并处理 <code>complition</code> 对象的内部数据</li>
<li>如果异步编译插件的话，数据处理完成后执行 <code>callback</code> 回调。</li>
</ul>
<h3 id="常用-Plugin"><a href="#常用-Plugin" class="headerlink" title="常用 Plugin"></a>常用 Plugin</h3><ul>
<li><code>HotModuleReplacementPlugin</code> 代码热替换。因为 <code>Hot-Module-Replacement</code> 的热更新是依赖于 <code>webpack-dev-server</code>，后者是在打包文件改变时更新打包文件或者 reload 刷新整个页面，<code>HRM</code> 是只更新修改的部分。</li>
<li><code>HtmlWebpackPlugin</code>, 生成 html 文件。将 webpack 中<code>entry</code>配置的相关入口 chunk 和 <code>extract-text-webpack-plugin</code>抽取的 css 样式 插入到该插件提供的<code>template</code>或者<code>templateContent</code>配置项指定的内容基础上生成一个 html 文件，具体插入方式是将样式<code>link</code>插入到<code>head</code>元素中，<code>script</code>插入到<code>head</code>或者<code>body</code>中。</li>
<li><code>ExtractTextPlugin</code>, 将 css 成生文件，而非内联 。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。</li>
<li><code>NoErrorsPlugin</code>报错但不退出 webpack 进程</li>
<li><code>UglifyJsPlugin</code>，代码丑化，开发过程中不建议打开。 <code>uglifyJsPlugin</code> 用来对 js 文件进行压缩，从而减小 js 文件的大小，加速 load 速度。<code>uglifyJsPlugin</code> 会拖慢 webpack 的编译速度，所有建议在开发简单将其关闭，部署的时候再将其打开。多个 html 共用一个 js 文件(chunk)，可用 <code>CommonsChunkPlugin</code></li>
<li><code>purifycss-webpack</code>  。打包编译时，可剔除页面和 js 中未被使用的 css，这样使用第三方的类库时，只加载被使用的类，大大减小 css 体积</li>
<li><code>optimize-css-assets-webpack-plugin</code>   压缩 css，优化 css 结构，利于网页加载和渲染</li>
<li><code>webpack-parallel-uglify-plugin</code>   可以并行运行 UglifyJS 插件，这可以有效减少构建时间</li>
</ul>
<h3 id="开发一个-plugin"><a href="#开发一个-plugin" class="headerlink" title="开发一个 plugin"></a>开发一个 plugin</h3><ul>
<li>Webpack 在编译过程中，会广播很多事件，例如 run、compile、done、fail 等等，可以查看官网；</li>
<li>Webpack 的事件流机制应用了观察者模式，我们编写的插件可以监听 Webpack 事件来触发对应的处理逻辑；</li>
<li>插件中可以使用很多 Webpack 提供的 API，例如读取输出资源、代码块、模块及依赖等；</li>
</ul>
<h4 id="1、编写插件"><a href="#1、编写插件" class="headerlink" title="1、编写插件"></a>1、编写插件</h4><p>在根目录下，新建目录 my-plugin 作为我们编写插件的名称，执行 npm init -y 命令，新建一个模块化项目，然后新建 index.js 文件，相关源码如下：</p>
<pre><code>class MyPlugin {
  constructor(doneCallback, failCallback) {
    // 保存在创建插件实例时传入的回调函数
    this.doneCallback = doneCallback
    this.failCallback = failCallback
  }
  apply(compiler) {
    // 成功完成一次完整的编译和输出流程时，会触发 done 事件
    compiler.plugin(&#39;done&#39;, stats =&gt; {
      this.doneCallback(stats)
    })
    // 在编译和输出的流程中遇到异常时，会触发 failed 事件
    compiler.plugin(&#39;failed&#39;, err =&gt; {
      this.failCallback(err)
    })
  }
}
module.exports = MyPlugin</code></pre><h4 id="2、注册模块-1"><a href="#2、注册模块-1" class="headerlink" title="2、注册模块"></a>2、注册模块</h4><p>按照以上的方法，我们在 my-plugin 目录底下使用 npm link 做到在不发布模块的情况下，将本地的一个正在开发的模块的源码链接到项目的 node_modules 目录下，让项目可以直接使用本地的 npm 模块。</p>
<pre><code>npm link</code></pre><p>然后在项目根目录执行以下命令，将注册到全局的本地 npm 模块链接到项目的 node_modules 下</p>
<pre><code>$ npm link my-plugin</code></pre><p>注册成功后，我们可以在 node_modules 目录下能查找到对应的插件了。</p>
<h4 id="3、配置插件"><a href="#3、配置插件" class="headerlink" title="3、配置插件"></a>3、配置插件</h4><p>在 webpack.base.conf.js 加上如下配置</p>
<pre><code>plugins: [
  new MyPlugin(
    stats =&gt; {
      console.info(&#39;编译成功!&#39;)
    },
    err =&gt; {
      console.error(&#39;编译失败!&#39;)
    }
  )
]</code></pre><p>执行运行 or 编译命令，就能看到我们的 plugin 起作用了。</p>
<blockquote>
<p>loader 是一个编译器，<code>loader</code> 让 <code>webpack</code> 能够去处理那些非 <code>javaScript</code> 文件（<code>**webpack**</code>** 自身只理解 <strong>`</strong>javaScript<strong><code>）。</code>loader` 可以</strong>将所有类型的文件转换为 <strong>`</strong>webpack<strong>`</strong> 能够处理的有效模块**，</p>
</blockquote>
<blockquote>
<p>loader，它是一个转换器，将 A 文件进行编译成 B 文件，比如：将 A.less 转换为 A.css，单纯的文件转换过程。</p>
</blockquote>
<blockquote>
<p>plugin 是一个扩展器，它丰富了 webpack 本身，针对是 loader 结束后，webpack 打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听 webpack 打包过程中的某些节点，执行广泛的任务</p>
</blockquote>
<p>文章引用：<br><a href="https://juejin.im/post/6844904113914773518" target="_blank" rel="noopener">https://juejin.im/post/6844904113914773518</a><br><a href="https://juejin.im/post/6844903480126078989" target="_blank" rel="noopener">https://juejin.im/post/6844903480126078989</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>vuex</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的next主题个性化教程</title>
    <url>/leader755/58433.html</url>
    <content><![CDATA[<blockquote>
<p>看到有些 next 主题的网站很炫酷，那么是怎么配置的呢？接下来我会讲一讲如何实现一些炫酷的效果</p>
</blockquote>
<p>主要有以下 32 种：</p>
<ul>
<li>在右上角或者左上角实现 fork me on github</li>
<li>添加 RSS</li>
<li>添加动态背景</li>
<li>实现点击出现桃心效果</li>
<li>修改文章内链接文本样式</li>
<li>修改文章底部的那个带 #号的标签</li>
<li>在每篇文章末尾统一添加 “本文结束” 标记</li>
<li>修改作者头像并旋转</li>
<li>博文压缩</li>
<li>修改 `` 代码块自定义样式</li>
<li>侧边栏社交小图标设置</li>
<li>主页文章添加阴影效果</li>
<li>在网站底部加上访问量</li>
<li>添加热度</li>
<li>网站底部字数统计</li>
<li>添加 README.md 文件</li>
<li>设置网站的图标 Favicon</li>
<li>实现统计功能</li>
<li>添加顶部加载条</li>
<li>在文章底部增加版权信息</li>
<li>添加网易云跟帖 (跟帖关闭，已失效，改为来必力)</li>
<li>隐藏网页底部 powered By Hexo / 强力驱动</li>
<li>修改网页底部的桃心</li>
<li>文章加密访问</li>
<li>添加 jiathis 分享</li>
<li>博文置顶</li>
<li>修改字体大小</li>
<li>修改打赏字体不闪动</li>
<li>自定义鼠标样式</li>
<li>为博客加上萌萌的宠物</li>
<li>DaoVoice 在线联系</li>
<li>点击爆炸效果</li>
</ul>
<h3 id="实现效果图"><a href="#实现效果图" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzFjZjYxNDM2ZmUyZWYyNy5wbmc?x-oss-process=image/format,png#height=284&id=LcPtS&originHeight=284&originWidth=2528&originalType=binary&status=done&style=none&width=2528" alt=""></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzMzNDU3ZWNkM2ZiZTI4OS5wbmc?x-oss-process=image/format,png#height=196&id=EWG0i&originHeight=196&originWidth=2530&originalType=binary&status=done&style=none&width=2530" alt=""></p>
<h3 id="具体实现方法"><a href="#具体实现方法" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>点击<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">这里</a> 或者 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">这里</a>挑选自己喜欢的样式，并复制代码。 例如，我是复制如下代码：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOTZiMjJlYWNiZTQzODM4Yy5wbmc?x-oss-process=image/format,png#height=438&id=eutUn&originHeight=438&originWidth=1232&originalType=binary&status=done&style=none&width=1232" alt=""></p>
<p>然后粘贴刚才复制的代码到<code>themes/next/layout/_layout.swig</code>文件中 (放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>的下面)，并把<code>href</code>改为你的 github 地址<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZDI2MDFhZDQ1NmRiMDY0Yi5wbmc?x-oss-process=image/format,png#height=748&id=F67MS&originHeight=748&originWidth=1064&originalType=binary&status=done&style=none&width=1064" alt=""></p>
<hr>
<h3 id="实现效果图-1"><a href="#实现效果图-1" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYTU0ZGFhZTkzNzEwNzU1MC5wbmc?x-oss-process=image/format,png#height=116&id=ep45m&originHeight=116&originWidth=456&originalType=binary&status=done&style=none&width=456" alt=""></p>
<h3 id="具体实现方法-1"><a href="#具体实现方法-1" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>切换到你的 blog（我是取名 blog，具体的看你们的取名是什么）的路径，例如我是在<code>/Users/chenzekun/Code/Hexo/blog</code>这个路径上，也就是在你的根目录下<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZTgzNTZlMWNhMDVmMjNhMy5wbmc?x-oss-process=image/format,png#height=448&id=rVA1Y&originHeight=448&originWidth=880&originalType=binary&status=done&style=none&width=880" alt=""></p>
<p>然后安装 Hexo 插件：(这个插件会放在<code>node_modules</code>这个文件夹里)</p>
<pre><code>$ npm install --save hexo-generator-feed</code></pre><p>接下来打开画红线的文件，如下图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNTVmMDM0ZTc0OWFhOGU2Yy5wbmc?x-oss-process=image/format,png#height=320&id=UgKdE&originHeight=320&originWidth=786&originalType=binary&status=done&style=none&width=786" alt=""></p>
<p>在里面的末尾添加：(<strong>请注意</strong>在冒号后面要加一个空格，不然会发生错误！)</p>
<pre><code># Extensions
## Plugins: http://hexo.io/plugins/
plugins: hexo-generate-feed</code></pre><p>然后打开 next 主题文件夹里面的<code>_config.yml</code>, 在里面配置为如下样子：(就是在<code>rss:</code>的后面加上<code>/atom.xml</code>,<strong>注意</strong>在冒号后面要加一个空格)</p>
<pre><code># Set rss to false to disable feed link.
# Leave rss as empty to use site&#39;s feed link.
# Set rss to specific value if you have burned your feed already.
rss: /atom.xml</code></pre><p>配置完之后运行：</p>
<pre><code>$ hexo g</code></pre><p>重新生成一次，你会在<code>./public</code> 文件夹中看到 <code>atom.xml</code> 文件。然后启动服务器查看是否有效，之后再部署到 Github 中。</p>
<hr>
<h3 id="实现效果图-2"><a href="#实现效果图-2" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZWY2MDM1ODBiZTcwODg4Mi5naWY#height=185&id=NNdBp&originHeight=185&originWidth=466&originalType=binary&status=done&style=none&width=466" alt=""></p>
<h3 id="具体实现方法-2"><a href="#具体实现方法-2" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>这个我之前有一篇文章有讲过了，详情点击<a href="http://shenzekun.cn/hexo%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF.html" target="_blank" rel="noopener">我的博客</a></p>
<hr>
<h3 id="实现效果图-3"><a href="#实现效果图-3" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzhlNjRjMGE4MGJiNTU5ZS5naWY#height=114&id=xwZ7E&originHeight=114&originWidth=66&originalType=binary&status=done&style=none&width=66" alt=""></p>
<h3 id="具体实现方法-3"><a href="#具体实现方法-3" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>在网址输入如下</p>
<pre><code>http://7u2ss1.com1.z0.glb.clouddn.com/love.js</code></pre><p>然后将里面的代码 copy 一下，新建<code>love.js</code>文件并且将代码复制进去，然后保存。将<code>love.js</code>文件放到路径<code>/themes/next/source/js/src</code>里面，然后打开<code>\themes\next\layout\_layout.swig</code>文件, 在末尾（在前面引用会出现找不到的 bug）添加以下代码：</p>
<pre><code>&lt;!-- 页面点击小红心 --&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</code></pre><hr>
<h3 id="实现效果图-4"><a href="#实现效果图-4" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOGNjNGZjMThjMzk5YWY3ZS5naWY#height=61&id=mULf5&originHeight=61&originWidth=318&originalType=binary&status=done&style=none&width=318" alt=""></p>
<h3 id="具体实现方法-4"><a href="#具体实现方法-4" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code>，在末尾添加如下 css 样式，：</p>
<pre><code>// 文章内链接文本样式
.post-body p a{
  color: #0593d3;
  border-bottom: none;
  border-bottom: 1px solid #0593d3;
  &amp;:hover {
    color: #fc6423;
    border-bottom: none;
    border-bottom: 1px solid #fc6423;
  }
}</code></pre><p>其中选择<code>.post-body</code> 是为了不影响标题，选择 <code>p</code> 是为了不影响首页 “阅读全文” 的显示样式, 颜色可以自己定义。</p>
<hr>
<h3 id="实现效果图-5"><a href="#实现效果图-5" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOWYxODE3ZDJkNzYyN2Y3YS5wbmc?x-oss-process=image/format,png#height=64&id=HUa1x&originHeight=64&originWidth=94&originalType=binary&status=done&style=none&width=94" alt=""></p>
<h3 id="具体实现方法-5"><a href="#具体实现方法-5" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>修改模板<code>/themes/next/layout/_macro/post.swig</code>，搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<hr>
<h3 id="实现效果图-6"><a href="#实现效果图-6" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOTBiZTczYWNiYzVmOGE3YS5wbmc?x-oss-process=image/format,png#height=78&id=U0duM&originHeight=78&originWidth=694&originalType=binary&status=done&style=none&width=694" alt=""></p>
<h3 id="具体实现方法-6"><a href="#具体实现方法-6" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>在路径 <code>\themes\next\layout\_macro</code> 中新建 <code>passage-end-tag.swig</code> 文件, 并添加以下内容：</p>
<pre><code>&lt;div&gt;
    {% if not is_index %}
        <div style="text-align:center;color: #ccc;font-size:14px;">-------------本文结束<i class="fa fa-paw"></i>感谢您的阅读-------------</div>
    {% endif %}
&lt;/div&gt;</code></pre><p>接着打开<code>\themes\next\layout\_macro\post.swig</code>文件，在<code>post-body</code> 之后， <code>post-footer</code> 之前添加如下画红色部分代码（post-footer 之前两个 DIV）：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtODY1YzdmOTRmODliOTA3ZS5wbmc?x-oss-process=image/format,png#height=904&id=So4nw&originHeight=904&originWidth=1012&originalType=binary&status=done&style=none&width=1012" alt=""></p>
<p>代码如下：</p>
<pre><code>&lt;div&gt;
  {% if not is_index %}
    {% include 'passage-end-tag.swig' %}
  {% endif %}
&lt;/div&gt;</code></pre><p>然后打开主题配置文件（<code>_config.yml</code>), 在末尾添加：</p>
<pre><code># 文章末尾添加“本文结束”标记
passage_end_tag:
  enabled: true</code></pre><p>完成以上设置之后，在每篇文章之后都会添加如上效果图的样子。</p>
<hr>
<h3 id="实现效果图："><a href="#实现效果图：" class="headerlink" title="实现效果图："></a>实现效果图：</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZTAzNWNlOGFjOGVhMGI1Yi5naWY#height=122&id=Rgv9t&originHeight=122&originWidth=138&originalType=binary&status=done&style=none&width=138" alt=""></p>
<h3 id="具体实现方法-7"><a href="#具体实现方法-7" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码：</p>
<pre><code>.site-author-image {
  display: block;
  margin: 0 auto;
  padding: $site-author-image-padding;
  max-width: $site-author-image-width;
  height: $site-author-image-height;
  border: $site-author-image-border-width solid $site-author-image-border-color;

  /* 头像圆形 */
  border-radius: 80px;
  -webkit-border-radius: 80px;
  -moz-border-radius: 80px;
  box-shadow: inset 0 -1px 0 #333sf;

  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束
    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/


  /* 鼠标经过头像旋转360度 */
  -webkit-transition: -webkit-transform 1.0s ease-out;
  -moz-transition: -moz-transform 1.0s ease-out;
  transition: transform 1.0s ease-out;
}

img:hover {
  /* 鼠标经过停止头像旋转
  -webkit-animation-play-state:paused;
  animation-play-state:paused;*/

  /* 鼠标经过头像旋转360度 */
  -webkit-transform: rotateZ(360deg);
  -moz-transform: rotateZ(360deg);
  transform: rotateZ(360deg);
}

/* Z 轴旋转动画 */
@-webkit-keyframes play {
  0% {
    -webkit-transform: rotateZ(0deg);
  }
  100% {
    -webkit-transform: rotateZ(-360deg);
  }
}
@-moz-keyframes play {
  0% {
    -moz-transform: rotateZ(0deg);
  }
  100% {
    -moz-transform: rotateZ(-360deg);
  }
}
@keyframes play {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(-360deg);
  }
}</code></pre><hr>
<p>在站点的根目录下执行以下命令：</p>
<pre><code>$ npm install gulp -g
$ npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save</code></pre><p>在如下图所示，新建 <code>gulpfile.js</code> ，并填入以下内容：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYmI5NTljM2ZiNjEwZTY5Yy5wbmc?x-oss-process=image/format,png#height=466&id=G1sGP&originHeight=466&originWidth=844&originalType=binary&status=done&style=none&width=844" alt=""></p>
<pre><code>var gulp = require(&#39;gulp&#39;);
var minifycss = require(&#39;gulp-minify-css&#39;);
var uglify = require(&#39;gulp-uglify&#39;);
var htmlmin = require(&#39;gulp-htmlmin&#39;);
var htmlclean = require(&#39;gulp-htmlclean&#39;);
// 压缩 public 目录 css
gulp.task(&#39;minify-css&#39;, function() {
    return gulp.src(&#39;./public/**/*.css&#39;)
        .pipe(minifycss())
        .pipe(gulp.dest(&#39;./public&#39;));
});
// 压缩 public 目录 html
gulp.task(&#39;minify-html&#39;, function() {
  return gulp.src(&#39;./public/**/*.html&#39;)
    .pipe(htmlclean())
    .pipe(htmlmin({
         removeComments: true,
         minifyJS: true,
         minifyCSS: true,
         minifyURLs: true,
    }))
    .pipe(gulp.dest(&#39;./public&#39;))
});
// 压缩 public/js 目录 js
gulp.task(&#39;minify-js&#39;, function() {
    return gulp.src(&#39;./public/**/*.js&#39;)
        .pipe(uglify())
        .pipe(gulp.dest(&#39;./public&#39;));
});
// 执行 gulp 命令时执行的任务
gulp.task(&#39;default&#39;, [
    &#39;minify-html&#39;,&#39;minify-css&#39;,&#39;minify-js&#39;
]);</code></pre><p>生成博文是执行 <code>hexo g &amp;&amp; gulp</code> 就会根据 <code>gulpfile.js</code> 中的配置，对 public 目录中的静态资源文件进行压缩。</p>
<hr>
<h3 id="实现效果图-7"><a href="#实现效果图-7" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZTgzYTZhYzAwZDRkMWRiMy5wbmc?x-oss-process=image/format,png#height=50&id=qRZUI&originHeight=50&originWidth=584&originalType=binary&status=done&style=none&width=584" alt=""></p>
<h3 id="具体实现方法-8"><a href="#具体实现方法-8" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>, 向里面加入：(颜色可以自己定义)</p>
<pre><code>// Custom styles.
code {
    color: #ff7600;
    background: #fbf7f8;
    margin: 2px;
}
// 大代码块的自定义样式
.highlight, pre {
    margin: 5px 0;
    padding: 5px;
    border-radius: 3px;
}
.highlight, code, pre {
    border: 1px solid #d6d6d6;
}</code></pre><hr>
<h3 id="实现效果图-8"><a href="#实现效果图-8" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMjBlOGJiYTFhZDNiMzQzZi5wbmc?x-oss-process=image/format,png#height=168&id=TXhqJ&originHeight=168&originWidth=550&originalType=binary&status=done&style=none&width=550" alt=""></p>
<h3 id="具体实现方法-9"><a href="#具体实现方法-9" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开主题配置文件（<code>_config.yml</code>），搜索<code>social_icons:</code>, 在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制在如下位置</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMjFlMjJiMDVlZGM1N2I1Yi5wbmc?x-oss-process=image/format,png#height=1160&id=l3msG&originHeight=1160&originWidth=1466&originalType=binary&status=done&style=none&width=1466" alt=""></p>
<hr>
<h3 id="实现效果图-9"><a href="#实现效果图-9" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMjEwNDZjNDQyOTAwYmYzZi5wbmc?x-oss-process=image/format,png#height=744&id=AvSs7&originHeight=744&originWidth=1584&originalType=binary&status=done&style=none&width=1584" alt=""></p>
<h3 id="具体实现方法-10"><a href="#具体实现方法-10" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>, 向里面加入：</p>
<pre><code>// 主页文章添加阴影效果
 .post {
   margin-top: 60px;
   margin-bottom: 60px;
   padding: 25px;
   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);
   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);
  }</code></pre><hr>
<h3 id="实现效果图-10"><a href="#实现效果图-10" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMzEyNDU1N2RhMmI5Yzc1Zi5wbmc?x-oss-process=image/format,png#height=120&id=aV6eK&originHeight=120&originWidth=554&originalType=binary&status=done&style=none&width=554" alt=""></p>
<h3 id="具体实现方法-11"><a href="#具体实现方法-11" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件, 在 copyright 前加上画红线这句话：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZWY4YTQ2NDNmMzNmYmFhMS5wbmc?x-oss-process=image/format,png#height=134&id=jYHDx&originHeight=134&originWidth=1040&originalType=binary&status=done&style=none&width=1040" alt=""></p>
<p>代码如下：</p>
<pre><code>&lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</code></pre><p>然后再合适的位置添加显示统计的代码，如图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYmQ2ZmI1NWI2ODQ3ZDEzYS5wbmc?x-oss-process=image/format,png#height=562&id=Nfm2N&originHeight=562&originWidth=1152&originalType=binary&status=done&style=none&width=1152" alt=""></p>
<p>代码如下：</p>
<pre><code>&lt;div class=&quot;powered-by&quot;&gt;
&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;
  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;
&lt;/span&gt;
&lt;/div&gt;</code></pre><p>在这里有两中不同计算方式的统计代码：</p>
<ol>
<li><strong>pv</strong>的方式，单个用户连续点击 n 篇文章，记录 n 次访问量</li>
</ol>
<pre><code>&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;
    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次
&lt;/span&gt;</code></pre><ol start="2">
<li><strong>uv</strong>的方式，单个用户连续点击 n 篇文章，只记录 1 次访客数</li>
</ol>
<pre><code>&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;
  本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次
&lt;/span&gt;</code></pre><p>添加之后再执行<code>hexo d -g</code>，然后再刷新页面就能看到效果</p>
<hr>
<h3 id="实现效果图：-1"><a href="#实现效果图：-1" class="headerlink" title="实现效果图："></a>实现效果图：</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOWJjOGE2NTg3Y2QxYTU3NS5wbmc?x-oss-process=image/format,png#height=92&id=sB5jy&originHeight=92&originWidth=702&originalType=binary&status=done&style=none&width=702" alt=""></p>
<h3 id="具体实现方法-12"><a href="#具体实现方法-12" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>next 主题集成 leanCloud，打开<code>/themes/next/layout/_macro/post.swig</code>, 在画红线的区域添加<code>℃</code>：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZjVkYmRhNjg4OGE3OWRkNC5wbmc?x-oss-process=image/format,png#height=766&id=mGzpq&originHeight=766&originWidth=852&originalType=binary&status=done&style=none&width=852" alt=""></p>
<p>然后打开，<code>/themes/next/languages/zh-Hans.yml</code>, 将画红框的改为热度就可以了<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYmQwZTFhYzU0NTZhMmYwYy5wbmc?x-oss-process=image/format,png#height=434&id=HeBUs&originHeight=434&originWidth=810&originalType=binary&status=done&style=none&width=810" alt=""></p>
<hr>
<h3 id="实现效果图-11"><a href="#实现效果图-11" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZjI2ZjIxZTJmMmIzNGUxOC5wbmc?x-oss-process=image/format,png#height=116&id=GrPOp&originHeight=116&originWidth=662&originalType=binary&status=done&style=none&width=662" alt=""></p>
<h3 id="具体方法实现"><a href="#具体方法实现" class="headerlink" title="具体方法实现"></a>具体方法实现</h3><p>切换到根目录下，然后运行如下代码</p>
<pre><code>$ npm install hexo-wordcount --save</code></pre><p>然后在<code>/themes/next/layout/_partials/footer.swig</code>文件尾部加上：</p>
<pre><code>&lt;div class=&quot;theme-info&quot;&gt;
  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;
  &lt;span class=&quot;post-count&quot;&gt;博客全站共{{ totalcount(site) }}字&lt;/span&gt;
&lt;/div&gt;</code></pre><hr>
<p>每个项目下一般都有一个 <code>README.md</code> 文件，但是使用 hexo 部署到仓库后，项目下是没有 <code>README.md</code> 文件的。</p>
<p>在 Hexo 目录下的 <code>source</code> 根目录下添加一个 <code>README.md</code> 文件，修改站点配置文件 _<code>config.yml</code>，将 <code>skip_render</code> 参数的值设置为</p>
<pre><code>skip_render: README.md</code></pre><p>保存退出即可。再次使用 <code>hexo d</code> 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p>
<hr>
<h3 id="实现效果图-12"><a href="#实现效果图-12" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZGEwMTJkMmMwNTg2YTFlNy5wbmc?x-oss-process=image/format,png#height=68&id=NJBbx&originHeight=68&originWidth=240&originalType=binary&status=done&style=none&width=240" alt=""></p>
<h3 id="具体方法实现-1"><a href="#具体方法实现-1" class="headerlink" title="具体方法实现"></a>具体方法实现</h3><p>在<a href="http://www.easyicon.net/" target="_blank" rel="noopener">EasyIcon</a>中找一张（32*32）的<code>ico</code>图标, 或者去别的网站下载或者制作，并将图标名称改为<code>favicon.ico</code>，然后把图标放在<code>/themes/next/source/images</code>里，并且修改主题配置文件：</p>
<pre><code># Put your favicon.ico into `hexo-site/source/` directory.
favicon: /favicon.ico</code></pre><hr>
<h3 id="实现效果图-13"><a href="#实现效果图-13" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMTFjZjExZmU4ODg3NDhhOS5wbmc?x-oss-process=image/format,png#height=90&id=kR433&originHeight=90&originWidth=656&originalType=binary&status=done&style=none&width=656" alt=""></p>
<h3 id="具体实现方法-13"><a href="#具体实现方法-13" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>在根目录下安装 <code>hexo-wordcount</code>, 运行：</p>
<pre><code>$ npm install hexo-wordcount --save</code></pre><p>然后在主题的配置文件中，配置如下：</p>
<pre><code># Post wordcount display settings
# Dependencies: https://github.com/willin/hexo-wordcount
post_wordcount:
  item_text: true
  wordcount: true
  min2read: true</code></pre><hr>
<h3 id="实现效果图-14"><a href="#实现效果图-14" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMmY1MDUxZDlmMDM1MmI5MC5naWY#height=101&id=nxmAb&originHeight=101&originWidth=1276&originalType=binary&status=done&style=none&width=1276" alt=""></p>
<h3 id="具体实现方法-14"><a href="#具体实现方法-14" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>/themes/next/layout/_partials/head.swig</code>文件，添加红框上的代码<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzJhNTc4YThlM2VlZTY3Mi5wbmc?x-oss-process=image/format,png#height=404&id=rdUYl&originHeight=404&originWidth=1064&originalType=binary&status=done&style=none&width=1064" alt=""></p>
<p>代码如下：</p>
<pre><code>&lt;script src=&quot;//cdn.bootcss.com/pace/1.0.2/pace.min.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css&quot; rel=&quot;stylesheet&quot;&gt;</code></pre><p>但是，默认的是粉色的，要改变颜色可以在<code>/themes/next/layout/_partials/head.swig</code>文件中添加如下代码（接在刚才 link 的后面）</p>
<pre><code>&lt;style&gt;
    .pace .pace-progress {
        background: #1E92FB; /*进度条颜色*/
        height: 3px;
    }
    .pace .pace-progress-inner {
         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/
    }
    .pace .pace-activity {
        border-top-color: #1E92FB;    /*上边框颜色*/
        border-left-color: #1E92FB;    /*左边框颜色*/
    }
&lt;/style&gt;</code></pre><blockquote>
<p>目前，博主的增加顶部加载条的 pull request 已被 Merge===&gt;<a href="https://github.com/iissnan/hexo-theme-next/pull/1689" target="_blank" rel="noopener">详情</a><br>现在升级最新版的 next 主题，升级后只需修改主题配置文件 (_config.yml) 将<code>pace: false</code>改为<code>pace: true</code>就行了，你还可以换不同样式的加载条，如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNmQ0NGE3OGU3NmRiZjk1MC5wbmc?x-oss-process=image/format,png#height=812&id=FkUPv&originHeight=812&originWidth=990&originalType=binary&status=done&style=none&width=990" alt=""></p>
</blockquote>
<hr>
<h3 id="实现效果图-15"><a href="#实现效果图-15" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYTI2NDU0MmY1MzY2NTg0OS5wbmc?x-oss-process=image/format,png#height=410&id=dU69Y&originHeight=410&originWidth=1318&originalType=binary&status=done&style=none&width=1318" alt=""></p>
<p>在目录 <code>next/layout/_macro / 下</code>添加 <code>my-copyright.swig</code>：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> page<span class="token punctuation">.</span>copyright <span class="token operator">%</span><span class="token punctuation">}</span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"my_post_copyright"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> JS库 sweetalert 可修改路径 <span class="token operator">--</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>本文标题<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{{ url_for(page.path) }}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token punctuation">.</span>title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>文章作者<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"/"</span> title<span class="token operator">=</span><span class="token string">"访问 {{ theme.author }} 的个人博客"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> theme<span class="token punctuation">.</span>author <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>发布时间<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY年MM月DD日 - HH:MM"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>最后更新<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token punctuation">.</span>updated<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"YYYY年MM月DD日 - HH:MM"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>原始链接<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"{{ url_for(page.path) }}"</span> title<span class="token operator">=</span><span class="token string">"{{ page.title }}"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> page<span class="token punctuation">.</span>permalink <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
    <span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"copy-path"</span>  title<span class="token operator">=</span><span class="token string">"点击复制文章链接"</span><span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-clipboard"</span> data<span class="token operator">-</span>clipboard<span class="token operator">-</span>text<span class="token operator">=</span><span class="token string">"{{ page.permalink }}"</span>  aria<span class="token operator">-</span>label<span class="token operator">=</span><span class="token string">"复制成功！"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>许可协议<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fa fa-creative-commons"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span> <span class="token operator">&lt;</span>a rel<span class="token operator">=</span><span class="token string">"license"</span> href<span class="token operator">=</span><span class="token string">"https://creativecommons.org/licenses/by-nc-nd/4.0/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> title<span class="token operator">=</span><span class="token string">"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)"</span><span class="token operator">></span>署名<span class="token operator">-</span>非商业性使用<span class="token operator">-</span>禁止演绎 <span class="token number">4.0</span> 国际<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> 转载请保留原文链接及作者。<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
    <span class="token keyword">var</span> clipboard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clipboard</span><span class="token punctuation">(</span><span class="token string">'.fa-clipboard'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".fa-clipboard"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      clipboard<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">swal</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
          title<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
          text<span class="token punctuation">:</span> <span class="token string">'复制成功'</span><span class="token punctuation">,</span>
          icon<span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">,</span>
          showConfirmButton<span class="token punctuation">:</span> <span class="token boolean">true</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>
<p>在目录<code>next/source/css/_common/components/post/</code>下添加<code>my-post-copyright.styl</code>：</p>
<pre><code>.my_post_copyright {
  width: 85%;
  max-width: 45em;
  margin: 2.8em auto 0;
  padding: 0.5em 1.0em;
  border: 1px solid #d3d3d3;
  font-size: 0.93rem;
  line-height: 1.6em;
  word-break: break-all;
  background: rgba(255,255,255,0.4);
}
.my_post_copyright p{margin:0;}
.my_post_copyright span {
  display: inline-block;
  width: 5.2em;
  color: #b5b5b5;
  font-weight: bold;
}
.my_post_copyright .raw {
  margin-left: 1em;
  width: 5em;
}
.my_post_copyright a {
  color: #808080;
  border-bottom:0;
}
.my_post_copyright a:hover {
  color: #a3d2a3;
  text-decoration: underline;
}
.my_post_copyright:hover .fa-clipboard {
  color: #000;
}
.my_post_copyright .post-url:hover {
  font-weight: normal;
}
.my_post_copyright .copy-path {
  margin-left: 1em;
  width: 1em;
  +mobile(){display:none;}
}
.my_post_copyright .copy-path:hover {
  color: #808080;
  cursor: pointer;
}</code></pre><p>修改<code>next/layout/_macro/post.swig</code>，在代码</p>
<pre><code>&lt;div&gt;
      {% if not is_index %}
        {% include 'wechat-subscriber.swig' %}
      {% endif %}
&lt;/div&gt;</code></pre><p>之前添加增加如下代码：</p>
<pre><code>&lt;div&gt;
      {% if not is_index %}
        {% include 'my-copyright.swig' %}
      {% endif %}
&lt;/div&gt;</code></pre><p>如下：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzY5YTM4MmI2YzlhZGEzZS5wbmc?x-oss-process=image/format,png#height=580&id=Og6tt&originHeight=580&originWidth=1052&originalType=binary&status=done&style=none&width=1052" alt=""></p>
<p>修改<code>next/source/css/_common/components/post/post.styl</code>文件，在最后一行增加代码：</p>
<pre><code>@import &quot;my-post-copyright&quot;</code></pre><p>保存重新生成即可。<br>如果要在该博文下面增加版权信息的显示，需要在 Markdown 中增加 copyright: true 的设置，类似：</p>
<pre><code>---
title: 前端小项目：使用canvas绘画哆啦A梦
date: 2017-05-22 22:53:53
tags: canvas
categories: 前端
copyright: true
---</code></pre><blockquote>
<p><strong>小技巧</strong>：如果你觉得每次都要输入<code>copyright: true</code>很麻烦的话, 那么在<code>/scaffolds/post.md</code>文件中添加：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNTFmMDg3Y2UxZjE5MDNhNi5wbmc?x-oss-process=image/format,png#height=384&id=Bzc0L&originHeight=384&originWidth=416&originalType=binary&status=done&style=none&width=416" alt=""><br>这样每次<code>hexo new &quot;你的内容&quot;</code>之后，生成的 md 文件会自动把<code>copyright:</code>加到里面去<br>(<strong>注意</strong>：如果解析出来之后，你的原始链接有问题：如：<code>http://yoursite.com / 前端小项目：使用 canvas 绘画哆啦 A 梦. html</code>, 那么在根目录下<code>_config.yml</code>中写成类似这样：）<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOTgwMTI5YjM2OTA3ZDEwMy5wbmc?x-oss-process=image/format,png#height=340&id=wAQqf&originHeight=340&originWidth=970&originalType=binary&status=done&style=none&width=970" alt=""><br>就行了。</p>
</blockquote>
<hr>
<p><strong>实现效果图</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtODZiMjEyYzEyMjEyOTJjYS5wbmc?x-oss-process=image/format,png#height=598&id=AsQK9&originHeight=598&originWidth=1338&originalType=binary&status=done&style=none&width=1338" alt=""></p>
<p><strong>具体方法实现</strong><br>有两种实现方法：<br>① 更新 next 主题，因为最新版本的主题已经支持这种评论。直接在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p>
<pre><code>gentie_productKey: #your-gentie-product-key</code></pre><p>② 如果你不想更新的话，那么按下面步骤进行：<br>首先，还是在主题配置文件<code>_config.yml</code> 文件中添加如下配置:</p>
<pre><code>gentie_productKey: #your-gentie-product-key</code></pre><p>你的<code>productKey</code>就是下面画红线部分<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMmQxZWVlZjU1ZGI1MGNmYy5wbmc?x-oss-process=image/format,png#height=274&id=T15oP&originHeight=274&originWidth=744&originalType=binary&status=done&style=none&width=744" alt=""></p>
<p>然后在在<code>layout/_scripts/third-party/comments/</code> 目录中添加 <code>gentie.swig</code>，文件内容如下：</p>
<pre><code>{% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id %}
  {% if theme.gentie_productKey %}
    {% set gentie_productKey = theme.gentie_productKey %}
    <script>
      var cloudTieConfig = {
        url: document.location.href,
        sourceId: "",
        productKey: "{{gentie_productKey}}",
        target: "cloud-tie-wrapper"
      };
    </script>
    <script src="https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js"></script>
  {% endif %}
{% endif %}</code></pre><p>然后在<code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p>
<pre><code>{% include './comments/gentie.swig' %}</code></pre><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加网易云跟帖插件引用的判断逻辑：</p>
<pre><code>{% elseif theme.gentie_productKey %}
      &lt;div id=&quot;cloud-tie-wrapper&quot; class=&quot;cloud-tie-wrapper&quot;&gt;
      &lt;/div&gt;</code></pre><p>具体位置如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYzkxOTk0MzlkMjM5Njk4OS5wbmc?x-oss-process=image/format,png#height=678&id=EOxlS&originHeight=678&originWidth=1178&originalType=binary&status=done&style=none&width=1178" alt=""></p>
<p>可能你<code>hexo s</code>时可能看不到，直接<code>hexo d</code>就可以看到了</p>
<hr>
<blockquote>
<p>近日，我朋友发来消息，说网易云跟帖要关了，我网上查了一下，果然如此</p>
</blockquote>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZjYxY2ExODQ5NzVjZTMyYi5qcGc?x-oss-process=image/format,png#height=674&id=Et9aj&originHeight=674&originWidth=1316&originalType=binary&status=done&style=none&width=1316" alt=""></p>
<blockquote>
<p>都是泪, 上次用了多说，结果多说关了，接着是网易云跟帖，这次直接用国外的来必力，应该不会这么容易关吧</p>
</blockquote>
<p>方法其实还是跟上面差不多的</p>
<p>首先在 <code>_config.yml</code> 文件中添加如下配置：</p>
<pre><code># Support for LiveRe comments system.
# You can get your uid from https://livere.com/insight/myCode (General web site)
livere_uid: your uid</code></pre><p>其中，<code>livere_uid</code>就是画红线的部分<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNTI4MzI4YjEzZjVjNGRmOC5qcGc?x-oss-process=image/format,png#height=106&id=uXTtp&originHeight=106&originWidth=820&originalType=binary&status=done&style=none&width=820" alt=""></p>
<p>然后在 <code>layout/_scripts/third-party/comments/</code> 目录中添加 livere.swig，文件内容如下：</p>
<pre><code>
{% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname and not theme.disqus_shortname and not theme.hypercomments_id and not theme.gentie_productKey %}
  {% if theme.livere_uid %}
    <script type="text/javascript">
      (function(d, s) {
        var j, e = d.getElementsByTagName(s)[0];
        if (typeof LivereTower === 'function') { return; }
        j = d.createElement(s);
        j.src = 'https://cdn-city.livere.com/js/embed.dist.js';
        j.async = true;
        e.parentNode.insertBefore(j, e);
      })(document, 'script');
    </script>
  {% endif %}
{% endif %}</code></pre><p>然后在 <code>layout/_scripts/third-party/comments.swig</code>文件中追加：</p>
<pre><code>{% include './comments/livere.swig' %}</code></pre><p>最后，在 <code>layout/_partials/comments.swig</code> 文件中条件最后追加 LiveRe 插件是否引用的判断逻辑：</p>
<pre><code>{% elseif theme.livere_uid %}
      &lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;{{ theme.livere_uid }}&quot;&gt;&lt;/div&gt;
{% endif %}</code></pre><p>完</p>
<hr>
<p>打开<code>themes/next/layout/_partials/footer.swig</code>, 使用” ” 隐藏之间的代码即可，或者直接删除。位置如图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtOGU4MzQwYzdhMDQ4OWJjZS5wbmc?x-oss-process=image/format,png#height=928&id=kIkDm&originHeight=928&originWidth=1130&originalType=binary&status=done&style=none&width=1130" alt=""></p>
<hr>
<p>还是打开<code>themes/next/layout/_partials/footer.swig</code>，找到：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZjYzNTU4MjNhZWY3ZjcyMy5QTkc?x-oss-process=image/format,png#height=58&id=DQ96V&originHeight=58&originWidth=213&originalType=binary&status=done&style=none&width=213" alt=""><br>，然后还是在<a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">图标库</a>中找到你自己喜欢的图标，然后修改画红线的部分就可以了。</p>
<hr>
<h3 id="实现效果图-16"><a href="#实现效果图-16" class="headerlink" title="实现效果图"></a>实现效果图</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMGM3ZTVlNjFiNzhkYzkzNy5naWY#height=521&id=ha4xS&originHeight=521&originWidth=1166&originalType=binary&status=done&style=none&width=1166" alt=""></p>
<h3 id="具体实现方法-15"><a href="#具体实现方法-15" class="headerlink" title="具体实现方法"></a>具体实现方法</h3><p>打开<code>themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig</code>文件, 在以下位置插入这样一段代码：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNDQ2NzkzY2Q2ZDc0MGIxOS5wbmc?x-oss-process=image/format,png#height=830&id=YreXQ&originHeight=830&originWidth=1080&originalType=binary&status=done&style=none&width=1080" alt=""></p>
<p>代码如下：</p>
<pre><code>&lt;script&gt;
    (function(){
        if(&#39;{{ page.password }}&#39;){
            if (prompt(&#39;请输入文章密码&#39;) !== &#39;{{ page.password }}&#39;){
                alert(&#39;密码错误！&#39;);
                history.back();
            }
        }
    })();
&lt;/script&gt;</code></pre><p>然后在文章上写成类似这样：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZTZjNzI2YTAxNTJjYjhlZS5wbmc?x-oss-process=image/format,png#height=438&id=GJyBa&originHeight=438&originWidth=720&originalType=binary&status=done&style=none&width=720" alt=""></p>
<hr>
<p>在<strong>主题配置文件</strong>中，jiathis 为 true，就行了，如下图</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtZjM4MWJjOWU3YzczYjFlNi5wbmc?x-oss-process=image/format,png#height=228&id=CvyrO&originHeight=228&originWidth=894&originalType=binary&status=done&style=none&width=894" alt=""></p>
<p>默认是这样子的：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtYTg4MjI4YjllYTQzYWIyZC5wbmc?x-oss-process=image/format,png#height=110&id=fMstx&originHeight=110&originWidth=622&originalType=binary&status=done&style=none&width=622" alt=""></p>
<p>如果你想自定义话，打开<code>themes/next/layout/_partials/share/jiathis.swig</code>修改画红线部分就可以了<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNjhjNTE0OTg3NDRlMTYzNi5wbmc?x-oss-process=image/format,png#height=564&id=sfaXW&originHeight=564&originWidth=1132&originalType=binary&status=done&style=none&width=1132" alt=""></p>
<hr>
<p>修改 <code>hero-generator-index</code> 插件，把文件：<code>node_modules/hexo-generator-index/lib/generator.js</code> 内的代码替换为：</p>
<pre><code>&#39;use strict&#39;;
var pagination = require(&#39;hexo-pagination&#39;);
module.exports = function(locals){
  var config = this.config;
  var posts = locals.posts;
    posts.data = posts.data.sort(function(a, b) {
        if(a.top &amp;&amp; b.top) { // 两篇文章top都有定义
            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排
            else return b.top - a.top; // 否则按照top值降序排
        }
        else if(a.top &amp;&amp; !b.top) { // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）
            return -1;
        }
        else if(!a.top &amp;&amp; b.top) {
            return 1;
        }
        else return b.date - a.date; // 都没定义按照文章日期降序排
    });
  var paginationDir = config.pagination_dir || &#39;page&#39;;
  return pagination(&#39;&#39;, posts, {
    perPage: config.index_generator.per_page,
    layout: [&#39;index&#39;, &#39;archive&#39;],
    format: paginationDir + &#39;/%d/&#39;,
    data: {
      __index: true
    }
  });
};</code></pre><p>在文章中添加 <code>top</code> 值，数值越大文章越靠前，如</p>
<pre><code>---
title: 解决Charles乱码问题
date: 2017-05-22 22:45:48
tags: 技巧
categories: 技巧
copyright: true
top: 100
---</code></pre><hr>
<p>打开<code>\themes\next\source\css\ _variables\base.styl</code>文件，将<code>$font-size-base</code>改成<code>16px</code>，如下所示：</p>
<pre><code>$font-size-base            =16px</code></pre><hr>
<p>修改文件<code>next/source/css/_common/components/post/post-reward.styl</code>，然后注释其中的函数<code>wechat:hover</code>和<code>alipay:hover</code>，如下：</p>
<pre><code>/* 注释文字闪动函数
 #wechat:hover p{
    animation: roll 0.1s infinite linear;
    -webkit-animation: roll 0.1s infinite linear;
    -moz-animation: roll 0.1s infinite linear;
}
 #alipay:hover p{
   animation: roll 0.1s infinite linear;
    -webkit-animation: roll 0.1s infinite linear;
    -moz-animation: roll 0.1s infinite linear;
}
*/</code></pre><p>打开<code>themes/next/source/css/_custom/custom.styl</code>, 在里面写下如下代码</p>
<pre><code>// 鼠标样式
  * {
      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword2.ico&quot;),auto!important
  }
  :active {
      cursor: url(&quot;http://om8u46rmb.bkt.clouddn.com/sword1.ico&quot;),auto!important
  }</code></pre><p>其中 url 里面必须是 ico 图片，ico 图片可以上传到网上（我是使用七牛云图床），然后获取外链，复制到 url 里就行了</p>
<hr>
<p><strong>实现效果图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNzYyOWFjYzkzOTQzZTllZS5qcGc?x-oss-process=image/format,png#height=908&id=obFcd&originHeight=908&originWidth=2056&originalType=binary&status=done&style=none&width=2056" alt=""></p>
<p><strong>具体实现方法</strong><br>在终端切换到你的博客的路径里，然后输入如下代码：</p>
<pre><code>npm install -save hexo-helper-live2d</code></pre><p>然后打开<code>Hexo/blog/themes/next/layout</code><br>的<code>_layout.swig</code>, 将下面代码放到<code>&lt;/body&gt;</code>之前：</p>
<pre><code>{{ live2d() }}</code></pre><p>然后在在 <code>hexo</code> 的 <code>_config.yml</code>中添加参数：</p>
<pre><code>live2d:
  model: wanko
  bottom: -30</code></pre><p>然后 hexo clean ，hexo g ，hexo d 就可以看到了。</p>
<p><strong>下面是一些 model，可以换不同的宠物</strong></p>
<ul>
<li>model 模型名称 默认值: z16<ul>
<li>Gantzert_Felixander</li>
<li>Epsilon2.1</li>
<li>haru</li>
<li>miku</li>
<li>ni-j</li>
<li>nico</li>
<li>nito</li>
<li>nipsilon</li>
<li>nietzsche</li>
<li>shizuku</li>
<li>tsumiki</li>
<li>wanko</li>
<li>z16</li>
<li>hibiki</li>
<li>koharu</li>
<li>haruto</li>
<li>Unitychan</li>
<li>tororo</li>
<li>hijiki</li>
</ul>
</li>
<li>width 宽度 默认值: 150</li>
<li>height 高度 默认值： 300</li>
<li>className <code>&lt;canvas&gt;</code>元素的类名 默认值： live2d</li>
<li>id <code>&lt;canvas&gt;</code> 元素的 id 默认值： live2dcanvas</li>
<li>bottom <code>&lt;canvas&gt;</code> 元素的底部偏移 默认值： -20 如果嫌模型位置不正确 可以调整这个参数</li>
</ul>
<p>~ 用这个有缺点，如果是在手机上看的话，感觉不是很好，宠物一直挡着文字，还有就是加载有点慢~<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMDBmMDhhOTI3YjAzZGY1NS5qcGc?x-oss-process=image/format,png#height=1262&id=N5p7S&originHeight=1262&originWidth=712&originalType=binary&status=done&style=none&width=712" alt=""></p>
<blockquote>
<p>（感谢<a href="https://segmentfault.com/u/gengxuelei" target="_blank" rel="noopener">Layne</a>网友的提醒，目前手机上显示宠物的问题已经解决，如果不想在手机上显示宠物的话，修改主题配置文件，改为如下：）</p>
</blockquote>
<pre><code>live2d:
  model: wanko
  bottom: -30
  mobileShow: false</code></pre><blockquote>
<p>注意！如果你在 hexo d 的时候出现我下面这个问题<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtNWQ3Y2YwMWJkNGI3ZGFlNC5qcGc?x-oss-process=image/format,png#height=940&id=wFZtA&originHeight=940&originWidth=1784&originalType=binary&status=done&style=none&width=1784" alt=""><br>你可以这样，首先删除 hexo 下面的. deploy_git 文件夹，然后运行</p>
</blockquote>
<pre><code>git config --global core.autocrlf false</code></pre><blockquote>
<p>重新 hexo clean,hexo g,hexo d 就行了</p>
</blockquote>
<hr>
<p><strong>实现效果图</strong></p>
<p>[外链图片转存失败, 源站可能有防盗链机制, 建议将图片保存下来直接上传 (img-lQ2kq1SI-1571136856003)(<a href="http://ohggtqwxx.bkt.clouddn.com/2017-12-18-053222.png" target="_blank" rel="noopener">http://ohggtqwxx.bkt.clouddn.com/2017-12-18-053222.png</a>)]</p>
<p><strong>具体实现方法</strong></p>
<p>首先在 <a href="https://account.daocloud.io/signin" target="_blank" rel="noopener">daovoice</a> 注册账号,<a href="http://dashboard.daovoice.io/get-started?invite_code=0f81ff2f" target="_blank" rel="noopener">邀请码</a>是<code>0f81ff2f</code>, 注册完成后会得到一个 app_id :</p>
<p>[外链图片转存失败, 源站可能有防盗链机制, 建议将图片保存下来直接上传 (img-niJeM1e3-1571136856004)(<a href="http://ohggtqwxx.bkt.clouddn.com/2017-12-18-054308.png" target="_blank" rel="noopener">http://ohggtqwxx.bkt.clouddn.com/2017-12-18-054308.png</a>)]<br>, 记下这个 app_id 的值，然后打开<code>/themes/next/layout/_partials/head.swig</code>, 写下如下代码：</p>
<pre><code>{% if theme.daovoice %}
  <script>
  (function(i,s,o,g,r,a,m){i["DaoVoiceObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)})(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice")
  daovoice('init', {
      app_id: "{{theme.daovoice_app_id}}"
    });
  daovoice('update');
  </script>
{% endif %}</code></pre><p>[外链图片转存失败, 源站可能有防盗链机制, 建议将图片保存下来直接上传 (img-1VNWsyM9-1571136856005)(<a href="http://ohggtqwxx.bkt.clouddn.com/2017-12-18-054603.png" target="_blank" rel="noopener">http://ohggtqwxx.bkt.clouddn.com/2017-12-18-054603.png</a>)]</p>
<p>接着打开<strong>主题配置文件</strong>，在最后写下如下代码：</p>
<pre><code># Online contact
daovoice: true

daovoice_app_id: 这里填你的刚才获得的 app_id</code></pre><p>重新 hexo g ，hexo s 就能看到效果了。</p>
<blockquote>
<p>安装成功后可以在 DaoVoice 控制台上的聊天设置里设置聊天窗口样式，附上我的设置</p>
</blockquote>
<p>[外链图片转存失败, 源站可能有防盗链机制, 建议将图片保存下来直接上传 (img-sMW8L7x0-1571136856006)(<a href="http://ohggtqwxx.bkt.clouddn.com/2017-12-18-055639.png" target="_blank" rel="noopener">http://ohggtqwxx.bkt.clouddn.com/2017-12-18-055639.png</a>)]</p>
<hr>
<p><strong>实现效果图</strong></p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3VwbG9hZC1pbWFnZXMuamlhbnNodS5pby91cGxvYWRfaW1hZ2VzLzUzMDg0NzUtMzlhNzc3YzhjMzZjZWMxYS5wbmc?x-oss-process=image/format,png#height=930&id=CzGMV&originHeight=930&originWidth=990&originalType=binary&status=done&style=none&width=990" alt=""></p>
<p><strong>实现方法</strong></p>
<p>跟那个红心是差不多的，首先在<code>themes/next/source/js/src</code>里面建一个叫 fireworks.js 的文件，代码如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>pointerX <span class="token operator">=</span>
    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX <span class="token operator">||</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span> <span class="token operator">-</span>
    canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>pointerY <span class="token operator">=</span>
      e<span class="token punctuation">.</span>clientY <span class="token operator">||</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY <span class="token operator">-</span> canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">,</span>
    a <span class="token operator">=</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>x <span class="token operator">+</span> n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>y <span class="token operator">+</span> n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>color <span class="token operator">=</span> colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>radius <span class="token operator">=</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>endPos <span class="token operator">=</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span> a<span class="token punctuation">.</span>y<span class="token punctuation">,</span> a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> a<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    a
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#F00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> a<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span> a<span class="token punctuation">.</span>y<span class="token punctuation">,</span> a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> a<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    a
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numberOfParticules<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  anime
    <span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      targets<span class="token punctuation">:</span> n<span class="token punctuation">,</span>
      x<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      radius<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      easing<span class="token punctuation">:</span> <span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> renderParticule<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      targets<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
      radius<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      lineWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      alpha<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> easing<span class="token punctuation">:</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      easing<span class="token punctuation">:</span> <span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> renderParticule<span class="token punctuation">,</span>
      offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
      i <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> canvasEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    numberOfParticules <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>
    pointerX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    pointerY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    tap <span class="token operator">=</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span>
    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span> <span class="token string">"#18FF92"</span><span class="token punctuation">,</span> <span class="token string">"#5A87FF"</span><span class="token punctuation">,</span> <span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    setCanvasSize <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    render <span class="token operator">=</span> <span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      duration<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    tap<span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token string">"sidebar"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span>
        <span class="token string">"toggle-sidebar"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span>
        <span class="token string">"A"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">&amp;&amp;</span>
        <span class="token string">"IMG"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span> pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">!</span><span class="token number">1</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setCanvasSize<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">(</span><span class="token string">"use strict"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span>pointerX <span class="token operator">=</span>
    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>clientX <span class="token operator">||</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientX<span class="token punctuation">)</span> <span class="token operator">-</span>
    canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>pointerY <span class="token operator">=</span>
      e<span class="token punctuation">.</span>clientY <span class="token operator">||</span> e<span class="token punctuation">.</span>touches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clientY <span class="token operator">-</span> canvasEl<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">,</span>
    a <span class="token operator">=</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> e<span class="token punctuation">.</span>x <span class="token operator">+</span> n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> e<span class="token punctuation">.</span>y <span class="token operator">+</span> n <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>color <span class="token operator">=</span> colors<span class="token punctuation">[</span>anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> colors<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>radius <span class="token operator">=</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>endPos <span class="token operator">=</span> <span class="token function">setParticuleDirection</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span> a<span class="token punctuation">.</span>y<span class="token punctuation">,</span> a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> a<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    a
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>x <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>y <span class="token operator">=</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"#F00"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span>a<span class="token punctuation">.</span>draw <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> a<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">,</span> a<span class="token punctuation">.</span>y<span class="token punctuation">,</span> a<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> Math<span class="token punctuation">.</span>PI<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> a<span class="token punctuation">.</span>lineWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> a<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">,</span>
        ctx<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>globalAlpha <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    a
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">renderParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> e<span class="token punctuation">.</span>animatables<span class="token punctuation">.</span>length<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span>animatables<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">createCircle</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numberOfParticules<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">createParticule</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  anime
    <span class="token punctuation">.</span><span class="token function">timeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      targets<span class="token punctuation">:</span> n<span class="token punctuation">,</span>
      x<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      y<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> e<span class="token punctuation">.</span>endPos<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      radius<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      easing<span class="token punctuation">:</span> <span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> renderParticule<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      targets<span class="token punctuation">:</span> a<span class="token punctuation">,</span>
      radius<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      lineWidth<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      alpha<span class="token punctuation">:</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> easing<span class="token punctuation">:</span> <span class="token string">"linear"</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      duration<span class="token punctuation">:</span> anime<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      easing<span class="token punctuation">:</span> <span class="token string">"easeOutExpo"</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> renderParticule<span class="token punctuation">,</span>
      offset<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
      i <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> canvasEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".fireworks"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>canvasEl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> ctx <span class="token operator">=</span> canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    numberOfParticules <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>
    pointerX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    pointerY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    tap <span class="token operator">=</span> <span class="token string">"mousedown"</span><span class="token punctuation">,</span>
    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"#FF1461"</span><span class="token punctuation">,</span> <span class="token string">"#18FF92"</span><span class="token punctuation">,</span> <span class="token string">"#5A87FF"</span><span class="token punctuation">,</span> <span class="token string">"#FBF38C"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    setCanvasSize <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> window<span class="token punctuation">.</span>innerWidth <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span>canvasEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span> <span class="token string">"px"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        canvasEl<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    render <span class="token operator">=</span> <span class="token function">anime</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      duration<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">,</span>
      update<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvasEl<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvasEl<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
    tap<span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token string">"sidebar"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span>
        <span class="token string">"toggle-sidebar"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id <span class="token operator">&amp;&amp;</span>
        <span class="token string">"A"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">&amp;&amp;</span>
        <span class="token string">"IMG"</span> <span class="token operator">!==</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>nodeName <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>render<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">updateCoords</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">animateParticules</span><span class="token punctuation">(</span>pointerX<span class="token punctuation">,</span> pointerY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token operator">!</span><span class="token number">1</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">setCanvasSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"resize"</span><span class="token punctuation">,</span> setCanvasSize<span class="token punctuation">,</span> <span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>打开<code>themes/next/layout/_layout.swig</code>, 在<code>&lt;/body&gt;</code>上面写下如下代码：</p>
<pre><code>{% if theme.fireworks %}
   <canvas class="fireworks" style="position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;" ></canvas>
   <script type="text/javascript" src="//cdn.bootcss.com/animejs/2.2.0/anime.min.js"></script>
   <script type="text/javascript" src="/js/src/fireworks.js"></script>
{% endif %}</code></pre><p>打开主题配置文件，在里面最后写下：</p>
<pre><code># Fireworks
fireworks: true</code></pre><hr>
<h3 id="参考的文章："><a href="#参考的文章：" class="headerlink" title="参考的文章："></a>参考的文章：</h3><ol>
<li><a href="http://blog.csdn.net/MasterAnt_D/article/details/56839222" target="_blank" rel="noopener">http://blog.csdn.net/MasterAnt_D/article/details/56839222</a></li>
<li><a href="http://zidingyi4qh.com/2017/04/27/NexT%E5%BA%95%E9%83%A8logo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/" target="_blank" rel="noopener">http://zidingyi4qh.com/2017/04/27/NexT%E5%BA%95%E9%83%A8logo%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F/</a></li>
<li><a href="https://fuyis.me/2017/01/25/Hexo-theme-next-and-optimized-configuration/" target="_blank" rel="noopener">https://fuyis.me/2017/01/25/Hexo-theme-next-and-optimized-configuration/</a></li>
<li><a href="http://www.vitah.net/posts/20f300cc/" target="_blank" rel="noopener">http://www.vitah.net/posts/20f300cc/</a></li>
<li><a href="http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">http://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/</a></li>
<li><a href="https://chanshiyu.com/2017/11/24/%E5%8F%98%E5%BD%A2%E8%AE%B0%20%E2%97%8F%20NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/" target="_blank" rel="noopener">https://chanshiyu.com/2017/11/24/%E5%8F%98%E5%BD%A2%E8%AE%B0%20%E2%97%8F%20NexT%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</a></li>
</ol>
<hr>
<p>原文地址：<a href="https://blog.csdn.net/qq_33699981/article/details/72716951" target="_blank" rel="noopener">https://blog.csdn.net/qq_33699981/article/details/72716951</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo 主题</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试（2）javascript</title>
    <url>/leader755/11225.html</url>
    <content><![CDATA[<h2 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h2><ul>
<li>原型、继承、原型链、this 指向、设计模式、call, apply, bind,；</li>
<li>new 实现、防抖节流、let, var, const 区别、暂时性死区、event、loop；</li>
<li>promise 使用及实现、promise 并行执行和顺序执行；</li>
<li>async/await 的优缺点；</li>
<li>闭包、垃圾回收和内存泄漏、数组方法、数组乱序, 数组扁平化、事件委托、事件监听、事件模型。</li>
</ul>
<hr>
<h2 id="原型，原型链，继承"><a href="#原型，原型链，继承" class="headerlink" title="原型，原型链，继承"></a>原型，原型链，继承</h2><h3 id="原型："><a href="#原型：" class="headerlink" title="原型："></a>原型：</h3><p><strong>当使用构造函数创建一个对象后，在这个对象内部包含一个指针，这个指针指向构造函数的 prototype 属性所对应的值，这个指针被称为对象的为原型。</strong></p>
<h3 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h3><p><strong>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它会去它的原型对象里查找属性，这个原型对象又会有一个自己的原型，于是一直这样</strong>向上<strong>找（因为继承的，所以是向上找），于是就形成了原型链。</strong> 原型链的最顶端是 Object.prototype <strong>，</strong>Object.prototype  的原型是 null（null 没有原型），所以原型链的尽头为 null。</p>
<p>在 js 中我们使用构造函数来创建一个新的对象，每个构造函数内部都有一个 prototype 属性值，这个属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。</p>
<h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p><strong>继承：利用原型让一个引用类型继承另一个引用类型的属性和方法，并且将原型链作为实现继承的主要方法。</strong><br>继承一般有 2 种：接口继承和实现继承。接口继承只继承方法签名，实现继承则继承实际的方法。ECMAscript 中只支持实现继承，而且实现继承主要依靠原型链来实现的。</p>
<h4 id="实现继承的主要方法："><a href="#实现继承的主要方法：" class="headerlink" title="实现继承的主要方法："></a>实现继承的主要方法：</h4><h4 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h4><p><strong>核心：</strong> <strong>将父类的实例作为子类的原型</strong></p>
<ul>
<li>优点：共享了父类构造函数的方法</li>
<li>缺点：<ul>
<li>父类的引用类型值会被所有子类实例共享，但基本类型不会被共享。</li>
<li>子类构建时不能向父类传参</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在构造函数中，一般很少有数组形式的引用属性，大部分情况都是：基本属性 + 方法。</span>
<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"父亲"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  引用类型</span>
<span class="token punctuation">}</span>

Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// -- 将需要复用、共享的方法定义在父类原型上</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 这里是关键，创建Parent的实例，并将该实例赋值给Child.prototype</span>
Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 核心</span>

<span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 优点：共享了父类构造函数的say方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boy2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// hello , hello , true</span>

<span class="token comment" spellcheck="true">// 缺点1：不能传参数</span>
<span class="token comment" spellcheck="true">// 缺点2：多个实例对引用类型的操作会被篡改,但不会影响到基本类型。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>name <span class="token operator">===</span> boy2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父亲，父亲，true</span>

boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改了boy1的arr属性，boy2的arr属性，也会变化，因为两个实例的原型上(Child.prototype)有了父类构造函数的实例属性arr；所以只要修改了boy1.arr,boy2.arr的属性也会变化。  ----  原型上的arr属性是共享的。</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2,3]</span></code></pre>
<blockquote>
<p><strong>总结：</strong></p>
<ul>
<li>共享了父类构造函数的方法，父类的引用类型值会被所有子类实例共享，但基本类型不会被共享。</li>
<li>子类构建时不能向父类传参。</li>
</ul>
</blockquote>
<blockquote>
<p>原型链并非十分完美, 它包含如下两个问题：<br>问题一: 当原型链中包含引用类型值的原型时,该引用类型值会被所有实例共享;<br>问题二: 在创建子类型(例如创建 Son 的实例)时,不能向父类型(例如 Father)的构造函数中传递参数.</p>
</blockquote>
<p>####</p>
<h4 id="2、借用构造函数"><a href="#2、借用构造函数" class="headerlink" title="2、借用构造函数"></a>2、借用构造函数</h4><ul>
<li>核心：<strong>创建子类实例时调用父类构造函数（等于是复制父类的实例属性给子类）。</strong></li>
<li>优点：实例之间独立。<ul>
<li>子类构建时可以传参数。</li>
<li>子类实例不共享父类构造函数的引用属性。（如 arr 属性）</li>
</ul>
</li>
<li>缺点：<ul>
<li>只能继承父类的<strong>实例</strong>属性和方法，不能继承原型属性/方法(因为没有用到原型)</li>
<li>无法实现复用，每个子类都有父类实例函数的副本，影响性能</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (引用类型)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实例引用属性 (该属性，强调复用，需要共享)</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment" spellcheck="true">//继承自Parent</span>
    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'orange '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 优点1：可传参</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小红， 小明</span>

<span class="token comment" spellcheck="true">// 优点2：不共享父类构造函数的引用属性</span>
boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">,</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2] [1]</span>

<span class="token comment" spellcheck="true">// 缺点1：方法不能复用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false (说明，boy1和boy2</span>
的say方法是独立，不是共享的<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 缺点2：不能继承父类原型上的方法</span>
Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>walk <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 在父类的原型对象上定义一个walk方法。</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会走路'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
boy1<span class="token punctuation">.</span>walk<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// undefined (说明实例，不能获得父类原型上的方法)</span></code></pre>
<blockquote>
<p><strong>总结：</strong></p>
<ul>
<li>可以向父类构造函数传参，子类实例不共享父类构造函数的引用属性。（如 arr 属性）</li>
<li>只能继承父类的<strong>实例</strong>属性和方法，不能继承原型属性/方法(因为没有用到原型)</li>
<li>实例之间是独立的，每个子类都有父类实例函数的副本，无法实现复用，影响性能。</li>
</ul>
</blockquote>
<p>####</p>
<h4 id="3、组合继承（原型链继承和构造函数继承）"><a href="#3、组合继承（原型链继承和构造函数继承）" class="headerlink" title="3、组合继承（原型链继承和构造函数继承）"></a>3、组合继承（原型链继承和构造函数继承）</h4><ul>
<li>核心：用原型链实现对<strong>原型</strong>属性和方法的继承，用借用构造函数技术来实现<strong>实例</strong>属性的继承。（原型链继承和构造函数继承的组合，兼具了二者的优点）</li>
<li>优点：<ul>
<li>父类的方法可以被复用</li>
<li>父类的引用属性不会被共享</li>
<li>子类构建实例时可以向父类传递参数</li>
</ul>
</li>
<li>缺点：<ul>
<li>调用了两次父类的构造函数，第一次给子类的原型添加了父类的 name, arr 属性，第二次又给子类的构造函数添加了父类的 name, arr 属性，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费。</li>
</ul>
</li>
<li>注意：’组合继承’这种方式，要记得修复 Child.prototype.constructor 指向</li>
</ul>
<blockquote>
<ul>
<li>第一次 Parent.call(this);从父类拷贝一份父类实例属性，作为子类的实例属性，</li>
<li>第二次 Child.prototype = new Parent();创建父类实例作为子类原型，此时这个父类实例就又有了一份实例属性，但这份会被第一次拷贝来的实例属性屏蔽掉，所以多余。</li>
</ul>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (该属性，强调私有)</span>
<span class="token punctuation">}</span>
Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// --- 将需要复用、共享的方法定义在父类原型上</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 核心   第二次</span>
    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 核心   第一次</span>
Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里是修复构造函数指向的代码<span class="token operator">--</span><span class="token operator">></span>

<span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">// 优点1：可以传参数</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>boy1<span class="token punctuation">.</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小红，apple</span>

<span class="token comment" spellcheck="true">// 优点2：可复用父类原型上的方法</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>

<span class="token comment" spellcheck="true">// 优点3：不共享父类的引用属性，如arr属性</span>
boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">,</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2] [1] 可以看出没有共享arr属性。</span>

注意：为啥要修复构造函数的指向？
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Parent 你会发现实例的构造函数居然是Parent。</span>
而实际上，我们希望子类实例的构造函数是Child<span class="token punctuation">,</span>所以要记得修复构造函数指向。修复如下
Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span></code></pre>
<blockquote>
<p>其实 Child.prototype = new Parent()<br>console.log(Child.prototype.<strong>proto</strong> === Parten.prototype); // true<br>在构造函数中创建对象时，这个对象中包含一个指针，这个指针指向构造函数中属性 prototype 的所对应的值。</p>
</blockquote>
<blockquote>
<p><strong>总结：</strong></p>
<ul>
<li>父类的方法可以被复用，父类的引用属性不会被共享，子类构建实例时可以向父类传递参数。</li>
<li>调用 两次父类的构造函数，其原型中会存在两份相同的属性/方法，会被第一次拷贝来的实例属性覆盖，这种被覆盖的情况造成了性能上的浪费。</li>
<li>‘组合继承’这种方式，要记得修复 Child.prototype.constructor 指向为 Child，默认指向父类。</li>
</ul>
</blockquote>
<p>####</p>
<h4 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h4><p>object()对传入其中的对象执行了一次<code>浅复制</code>，将构造函数 F 的原型直接指向传入的对象。</p>
<ul>
<li>核心：利用一个空对象作为中介，将某个对象直接赋值给空对象构造函数的原型。</li>
<li>优点：父类方法可以复用</li>
<li>缺点：<ul>
<li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</li>
<li>无法传递参数</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>
  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span><span class="token punctuation">;</span>
anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span><span class="token punctuation">;</span>
yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"Shelby,Court,Van,Rob,Barbie"</span></code></pre>
<blockquote>
<p>总结：</p>
<ul>
<li>父类的方法可以复用，多个实例的<strong>引用类型属性</strong>指向相同，存在篡改的可能。</li>
<li>无法传递参数</li>
</ul>
</blockquote>
<p>####</p>
<h4 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h4><ul>
<li>核心：在原型式继承的基础上，增强对象，返回构造函数.</li>
<li>优缺点：仅提供一种思路，函数的主要作用是为构造函数新增属性和方法，以<strong>增强函数</strong></li>
<li>缺点（同原型式继承）：<ul>
<li>原型链继承多个实例的引用类型属性指向相同，存在篡改的可能。</li>
<li>无法传递参数</li>
</ul>
</li>
<li></li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过调用函数创建一个新对象</span>
  clone<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//以某种方式来增强这个对象</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> clone<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回这个对象</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>
  friends<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>
anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"hi"</span></code></pre>
<p>####</p>
<h4 id="6、寄生组合继承（组合-构造函数和寄生模式）"><a href="#6、寄生组合继承（组合-构造函数和寄生模式）" class="headerlink" title="6、寄生组合继承（组合 构造函数和寄生模式）"></a>6、寄生组合继承（组合 构造函数和寄生模式）</h4><p>刚才说到组合继承有一个会两次调用父类的构造函数造成浪费的缺点，寄生组合继承就可以解决这个问题。<br>优缺点：这个例子的高效率体现在它只调用了一次<code>SuperType</code> 构造函数，并且因此避免了在<code>SubType.prototype</code> 上创建不必要的、多余的属性。于此同时，原型链还能保持不变；因此，还能够正常使用<code>instanceof</code> 和<code>isPrototypeOf()</code><br><strong>这是最成熟的方法，也是现在库实现的方法</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">inheritPrototype</span><span class="token punctuation">(</span>subType<span class="token punctuation">,</span> superType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建对象，创建父类原型的一个副本</span>
  prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 增强对象，弥补因重写原型而失去的默认的constructor 属性</span>
  subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指定对象，将新创建的对象赋值给子类的原型</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 父类初始化实例属性和原型属性</span>
<span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
SuperType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 借用构造函数传递增强子类实例属性（支持传参和避免篡改）</span>
<span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  SuperType<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment" spellcheck="true">// 将父类原型指向子类</span>
<span class="token function">inheritPrototype</span><span class="token punctuation">(</span>SubType<span class="token punctuation">,</span> SuperType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 新增子类原型属性</span>
SubType<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"xyc"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"lxy"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green", "2"]</span>
instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["red", "blue", "green", "3"]</span></code></pre>
<h4 id="7、ES6-Class-extends"><a href="#7、ES6-Class-extends" class="headerlink" title="7、ES6 Class extends"></a>7、ES6 Class extends</h4><p>核心： ES6 继承的结果和寄生组合继承相似，本质上，ES6 继承是一种语法糖。但是，<br>寄生组合继承是先创建子类实例 this 对象，然后再对其增强；<br>而 ES6 先将父类实例对象的属性和方法，加到 this 上面（所以必须先调用 super 方法），然后再用子类的构造函数修改 this。</p>
<ul>
<li>*<em>extends *</em>关键字实现原型继承。</li>
<li><strong>constructor</strong>是构造方法，this 关键字则代表实例对象。一个类中只能有一个构造函数，则会报错，如果没有显式指定构造方法，则会添加默认的 constructor 方法。</li>
<li><strong>super 关键字，必须显示指定是作为函数还是作为对象使用，否则会报错。</strong></li>
</ul>
<p><strong>具体可以看详细文章：</strong><a href="https://www.jianshu.com/p/8a1a60709e7e" target="_blank" rel="noopener">《es6 的类 class》</a></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>

    <span class="token comment" spellcheck="true">// constructor</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// Getter</span>
    <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment" spellcheck="true">// Method</span>
    <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rectangle<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 输出 200</span>

<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token comment" spellcheck="true">// 继承</span>
<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//extends 关键字实现原型继承</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 如果子类中存在构造函数，则需要在使用“this”之前先调用 super()。</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Square'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 输出 100</span>
</code></pre>
<p>ES6 实现继承的具体原理：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
Object<span class="token punctuation">.</span>setPrototypeOf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> proto<span class="token punctuation">;</span>
  <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// B 的实例继承 A 的实例</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> A<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// B 继承 A 的静态属性</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1、函数声明和类声明的区别<br>函数声明会提升，类声明不会。首先需要声明你的类，然后访问它，否则像下面的代码会抛出一个 ReferenceError。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// ReferenceError</span>
<span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>
<p>2、ES5 继承和 ES6 继承的区别</p>
<ul>
<li>本质上 ES6 继承是 ES5 继承的语法糖</li>
<li>ES5 的继承实质上是先创建子类的实例对象，然后再将父类的方法添加到 this 上（Parent.call(this)）.</li>
<li>ES6 的继承有所不同，实质上是先创建父类的实例对象 this，然后再用子类的构造函数修改 this。因为子类没有自己的 this 对象，所以必须先调用父类的 super()方法，否则新建实例报错。</li>
<li>ES6 继承中子类的构造函数的原型链指向父类的构造函数，ES5 中使用的是构造函数复制，没有原型链指向。</li>
<li>ES6 子类实例的构建，基于父类实例，ES5 中不是。</li>
</ul>
<blockquote>
<ul>
<li>ES6 Class extends 是 ES5 继承的语法糖</li>
<li>JS 的继承除了构造函数继承之外都基于原型链构建的</li>
<li>可以用寄生组合继承实现 ES6 Class extends，但是还是会有细微的差别</li>
</ul>
</blockquote>
<p>##</p>
<hr>
<h2 id="this-指向，call-apply-bind"><a href="#this-指向，call-apply-bind" class="headerlink" title="this 指向，call, apply, bind"></a>this 指向，call, apply, bind</h2><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><p><strong>this 关键字只与函数的执行环境有关，而与声明环境没有关系.</strong><br><strong>this 关键字虽然会根据环境变化，但是它始终指向的是调用当前函数的那个对象</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//常见的三种调用函数的方式</span>
<span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先不讲 apply</span></code></pre>
<p>从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：</p>
<pre><code>func.call(context, p1, p2)</code></pre><p>其他两种都是语法糖，可以等价地变为 call 形式：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于</span>
func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于</span>
obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>至此我们的函数调用只有一种形式：</p>
<pre><code>func.call(context, p1, p2)</code></pre><p><strong>这样，this 就好解释了 this，就是上面代码中的 context。就这么简单。</strong></p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj => obj.foo.call(obj)</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window    =>bar.call()转换为 bar.call()由于没有传 context,所以 this 就是 undefined,最后浏览器给你一个默认的 this —— window 对象</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  x<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>
  f<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20。典型的隐性绑定,这里 f 的this指向上下文 obj ,即输出 20</span>
    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 ，非箭头函数，普通函数谁调用它，this 就指向谁。</span>
    foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20改变 。使用call改变 this 的指向。</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>this 是你 call 一个函数时传的 context，由于你从来不用 call 形式的函数调用，所以你一直不知道。<br>按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p>
<blockquote>
<p>如果你传的 context 是 null 或 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p>
</blockquote>
<p><strong>this 指向什么，完全取决于什么地方以什么方式调用，而不是创建时。</strong></p>
<blockquote>
<ul>
<li>如果函数被 new 修饰<ul>
<li>this 绑定的是新创建的对象，例:var bar = new foo(); 函数 foo 中的 this 就是一个叫 foo 的新创建的对象 , 然后将这个对象赋给 bar , 这样的绑定方式叫 new 绑定 .</li>
</ul>
</li>
<li>如果函数是使用 call,apply,bind 来调用的<ul>
<li>this 绑定的是 call,apply,bind 的第一个参数.例: foo.call(obj); , foo 中的 this 就是 obj , 这样的绑定方式叫 显性绑定 .</li>
</ul>
</li>
<li>如果函数是在某个 上下文对象 下被调用<ul>
<li>this 绑定的是那个上下文对象，例 : var obj = { foo : foo }; obj.foo(); foo 中的 this 就是 obj . 这样的绑定方式叫 隐性绑定 .</li>
</ul>
</li>
<li>如果都不是，即使用默认绑定<ul>
<li>例:function foo(){…} foo() ,foo 中的 this 就是 window.(严格模式下默认绑定到 undefined).</li>
<li>这样的绑定方式叫 默认绑定。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="apply-call-bind-改变-this-的指向"><a href="#apply-call-bind-改变-this-的指向" class="headerlink" title="apply, call, bind 改变 this 的指向"></a>apply, call, bind 改变 this 的指向</h3><ul>
<li>** apply(context, 实参) ，2 个参数，实参为数组， 自动执行函数**</li>
<li>** call(context, 实参)， 无数个参数，实参为单个参数传入，自动执行函数**</li>
<li>** bind(context, 实参)， 无数个参数，实参为单个参数传入 ，不会自动执行函数， 需要手动执行，并返回新的函数**</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">//...赋值，表示多个参数</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"klivitam"</span><span class="token punctuation">,</span>
  age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
show<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"爱好唱歌"</span><span class="token punctuation">,</span> <span class="token string">"宅男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数单个传入</span>
<span class="token comment" spellcheck="true">// ["男", "爱好唱歌", "宅男"]</span>
<span class="token comment" spellcheck="true">// klivitam</span>
show<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"爱好唱歌"</span><span class="token punctuation">,</span> <span class="token string">"宅男"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数以数组的方式传入</span>
<span class="token comment" spellcheck="true">// ["男", "爱好唱歌", "宅男"]</span>
<span class="token comment" spellcheck="true">// klivitam</span></code></pre>
<p>具体可参考此篇文章：[bind，call, apply 的指向](<a href="https://www.yuque.com/docs/share/a7793549-fefe-4e1f-9d8d-8b49b7d33072?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/a7793549-fefe-4e1f-9d8d-8b49b7d33072?#</a> 《改变 this 的指向(弄懂 this 的指向)》)</p>
<hr>
<h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><h3 id="防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）"><a href="#防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）" class="headerlink" title="防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）"></a>防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="节流：等待一段时间后-才会重新触发。（上拉加载更多）"><a href="#节流：等待一段时间后-才会重新触发。（上拉加载更多）" class="headerlink" title="节流：等待一段时间后 才会重新触发。（上拉加载更多）"></a>节流：等待一段时间后 才会重新触发。（上拉加载更多）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throtte</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> activeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> current <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">-</span> activeTime <span class="token operator">></span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
      activeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<p>##</p>
<hr>
<h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><hr>
<h2 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h2><h3 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a>懒加载：</h3><p>原理：先将 img 标签中的 src 链接设为同一张图片（默认占位图片），将其真正的图片地址存储再 img 标签的自定义属性中（比如 data-src）。当 js 监听到该图片元素进入可视窗口时，即将自定义属性中的地址存储到 src 属性中，达到懒加载的效果。</p>
<p>js 监听到该图片元素进入可视窗口时：当前元素距离顶部距离&lt; 当前滚动距离+当前的窗口的高度</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isVisible</span><span class="token punctuation">(</span>$node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> winH <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前窗口的高度</span>
    scrollTop <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前窗口的滚动距离</span>
    offSetTop <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前窗口距离顶部距离</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>offSetTop <span class="token operator">&lt;</span> winH <span class="token operator">+</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<h3 id="预加载："><a href="#预加载：" class="headerlink" title="预加载："></a>预加载：</h3><p>提前加载,当用户需要查看时可直接从本地缓存中渲染。</p>
<hr>
<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h3><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的 javascript 脚本和另外一个域的内容进行交互。</p>
<h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）。</p>
<h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>当一个请求 url 的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面 url 不同即为跨域。</p>
<h3 id="跨域的解决方案："><a href="#跨域的解决方案：" class="headerlink" title="跨域的解决方案："></a>跨域的解决方案：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597595152704-b32b37a0-109d-4cf1-90ad-e3f520be3f8f.png#height=448&id=wOP0u&margin=%5Bobject%20Object%5D&name=image.png&originHeight=448&originWidth=727&originalType=binary&size=82160&status=done&style=none&width=727" alt="image.png"></p>
<h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><ul>
<li><strong>原理</strong>：<code>JSONP</code>  主要就是利用了  <code>script</code>  标签 src 属性没有跨域限制来完成跨域。（还有 img 标签也可以没有跨域限制）</li>
<li><strong>限制</strong>：参数只能通过 url 传入，仅能支持 get 请求。</li>
<li>实现步骤:<ul>
<li>Step1: 创建 callback 方法</li>
<li>Step2: 插入 script 标签</li>
<li>Step3: 后台接受到请求，解析前端传过去的 callback 方法，返回该方法的调用，并且数据作为参数传入该方法</li>
<li>Step4: 前端执行服务端返回的方法调用。</li>
</ul>
</li>
</ul>
<h4 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h4><ul>
<li><strong>原理</strong>：使用 ws://（非加密）和 wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器端支持，无需任何配置就支持跨域。</li>
<li><strong>限制</strong>：</li>
<li><strong>使用</strong>：</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://127.0.0.1:3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
ws<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 连接成功建立</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 处理数据</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 发生错误时触发，连接中断</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// 连接关闭时触发</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h4 id="postMessage"><a href="#postMessage" class="headerlink" title="postMessage"></a>postMessage</h4><ul>
<li><p><strong>原理</strong>：HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之。postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</p>
</li>
<li><p>限制：对于目标域限制不严格导致的，<em>*大多数开发人员由于对于 postmessage 防范中 targetOrigin 参数默认为\</em> **，因此只要包含了该方法页面，构造利用代码，就能够获取到敏感信息。</p>
</li>
<li><p>使用场景：</p>
<ul>
<li>页面和其打开的新窗口的数据传递</li>
<li>多窗口之间消息传递</li>
<li>页面与嵌套的 iframe 消息传递</li>
</ul>
</li>
<li><p>使用：</p>
</li>
</ul>
<p>a、localhost:3000 发送消息</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
  <span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>title<span class="token operator">></span>跨域消息传递<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>
  <span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"hello,missfresh"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>button id<span class="token operator">=</span><span class="token string">"send"</span><span class="token operator">></span>发送消息<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>iframe
      src<span class="token operator">=</span><span class="token string">"http://localhost:8080/#/reciveMessage"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"500"</span>id<span class="token operator">=</span><span class="token string">"receiver"</span>
    <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
  window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> receiver <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"receiver"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contentWindow<span class="token punctuation">;</span>
    <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">var</span> val <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
      receiver<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>
<p>b、localhost:8080 接收消息</p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> messageEle <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    messageEle<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"从"</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>origin <span class="token operator">+</span> <span class="token string">"收到消息： "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>
<h4 id="vue-的-proxyTable-跨域"><a href="#vue-的-proxyTable-跨域" class="headerlink" title="vue 的 proxyTable 跨域"></a>vue 的 proxyTable 跨域</h4><p><strong>原理：</strong>在本地运行 npm run dev 等命令时实际上是用 node 运行了一个服务器 A，因此 proxyTable 实际上是将请求发给服务器 A，再由服务器 A 转发给后台服务器，做了一层代理，所以不会出现跨域问题。（浏览器是禁止跨域的，但是服务端不禁止。）<strong>简单来说就是使用 node 作为代理转发请求。</strong><br><strong>限制</strong>：<br><strong>使用：</strong></p>
<pre class=" language-javascript"><code class="language-javascript">proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token string">'/api/*'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:8088'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//实际请求的服务器地址</span>
        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            <span class="token string">'^/api'</span><span class="token punctuation">:</span> <span class="token string">''</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        headers<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这边可以堆headers进行设置</span>

            <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
<hr>
<h2 id="http-缓存和浏览器缓存："><a href="#http-缓存和浏览器缓存：" class="headerlink" title="http 缓存和浏览器缓存："></a>http 缓存和浏览器缓存：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597190312319-9a734ed7-94f8-44e0-81b3-eff39156d4e4.png#height=409&id=qwlKb&margin=%5Bobject%20Object%5D&name=image.png&originHeight=613&originWidth=800&originalType=binary&size=163634&status=done&style=none&width=534" alt="image.png"></p>
<h3 id="什么是-HTTP-缓存-？"><a href="#什么是-HTTP-缓存-？" class="headerlink" title="什么是 HTTP 缓存 ？"></a>什么是 HTTP 缓存 ？</h3><p>http 缓存指的是: 当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有“要请求资源”的副本，就可以直接从浏览器缓存中提取而不是从原始服务器中提取这个资源。<br>常见的 http 缓存只能缓存 get 请求响应的资源，对于其他类型的响应则无能为力，所以后续说的请求缓存都是指 GET 请求。</p>
<p>http 缓存都是从第二次请求开始的。第一次请求资源时，服务器返回资源，并在 respone header 头中回传资源的缓存参数；第二次请求时，浏览器判断这些请求参数，命中强缓存就直接 200，否则就把请求参数加到 request header 头中传给服务器，看是否命中协商缓存，命中则返回 304，否则服务器会返回新的资源。<br><strong>1、http 缓存的分类：</strong><br>根据是否需要重新向服务器发起请求来分类，可分为(强制缓存，协商缓存) 根据是否可以被单个或者多个用户使用来分类，可分为(私有缓存，共享缓存) 强制缓存如果生效，不需要再和服务器发生交互，而协商缓存不管是否生效，都需要与服务端发生交互。下面是强制缓存和协商缓存的一些对比：<br><img src="//upload-images.jianshu.io/upload_images/4845448-ab0e961921da5694?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp#height=396&id=zvmWE&originHeight=396&originWidth=690&originalType=binary&status=done&style=none&width=690" alt=""><br>image</p>
<p><strong>1.1、强制缓存</strong><br>强制缓存在缓存数据未失效的情况下（即 Cache-Control 的 max-age 没有过期或者 Expires 的缓存时间没有过期），那么就会直接使用浏览器的缓存数据，不会再向服务器发送任何请求。强制缓存生效时，http 状态码为 200。这种方式页面的加载速度是最快的，性能也是很好的，但是在这期间，如果服务器端的资源修改了，页面上是拿不到的，因为它不会再向服务器发请求了。这种情况就是我们在开发种经常遇到的，比如你修改了页面上的某个样式，在页面上刷新了但没有生效，因为走的是强缓存，所以 Ctrl + F5 一顿操作之后就好了。 跟强制缓存相关的 header 头属性有（Pragma/Cache-Control/Expires）<br><img src="//upload-images.jianshu.io/upload_images/4845448-217723260f75ed90?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp#height=228&id=jny2Y&originHeight=228&originWidth=800&originalType=binary&status=done&style=none&width=800" alt=""></p>
<p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样带来的好处有：缓解服务器端压力，提升性能(获取资源的耗时更短了)。</p>
<h3 id="HTTP-缓存的作用"><a href="#HTTP-缓存的作用" class="headerlink" title="HTTP 缓存的作用"></a>HTTP 缓存的作用</h3><p>我们都知道浏览器是基于 HTTP 协议和服务端进行通信的，一个网站一旦同时请求过多或者请求过大就容易造成页面渲染时长过长等性能问题，而且并非所有资源都需要实时更新的，将长久或一段时间内的资源进行缓存，能很大的缓解服务器压力和提升网站性能。<br>毫不夸张的说，HTTP 缓存是达到高性能的重要组成部分。</p>
<blockquote>
<p>注意：缓存需要合理配置，因为并不是所有资源都是永久不变的：重要的是对一个资源的缓存应截止到其下一次发生改变（即不能缓存过期的资源）。</p>
</blockquote>
<h3 id="HTTP-头缓存相关字段及优先级"><a href="#HTTP-头缓存相关字段及优先级" class="headerlink" title="HTTP 头缓存相关字段及优先级"></a>HTTP 头缓存相关字段及优先级</h3><p>强缓存：<strong>Expires: Date/Cache-Control：max-age=N</strong><br>协商缓存：<strong>Last-Modified：Date</strong>和<strong>Etag：String</strong><br>通过查询标准我们知道 Cache-Control 和 Etag 属于 HTTP1.1 版本，Expires 和 Last-Modified 属于 HTTP1.0 版本，所以得出以下优先级：<br>强缓存：<strong>Cache-Control &gt; Expires</strong><br>协商缓存：<strong>Etag &gt; Last-Modified</strong></p>
<blockquote>
<p><strong>注意：</strong><br>Expires 存在的缺陷是返回的到期时间是服务器端的时间，可能与客户端的时间有较大的时间差，所以在 HTTP1.1 版开始使用 Cache-Control: max-age=秒替代<br>Last-Modified 的缺陷：由于只能精确到秒，如果一个文件在 1 秒内多次修改，这时客户端无法识别，因此 HTTP1.1 版本使用 Etag 标识资源内容是否有变更来确认资源是否需要更新，相对来说更加精确</p>
</blockquote>
<h3 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h3><p><strong>强缓存</strong>：资源一旦被<strong>强缓存</strong>，在缓存时间内，浏览器发起二次请求时会直接读取本地缓存，不与服务器进行通讯。 强缓存时间过期的，浏览器会判断资源的响应头是否有 Last-Modified 和 Etag 字段，有的话执行<strong>协商缓存</strong>策略<br><strong>协商缓存</strong>：如果响应头中的包括有 Etag 和 Last-Modified 字段，则客户端将 If-None-Match：Etag 的值和 If-Modified-Since：Last-Modified 的值添加到请求头发送给服务器，由源服务器校验，如果资源未过期则返回 304 状态码，浏览器直接使用缓存，否则返回 200OK 状态码和新资源。<br>当两种情况都存在时，<strong>强缓存优先级要高于协商缓存</strong>。</p>
<h3 id="Chrome-浏览器的三种缓存策略"><a href="#Chrome-浏览器的三种缓存策略" class="headerlink" title="Chrome 浏览器的三种缓存策略"></a>Chrome 浏览器的三种缓存策略</h3><p>_选择 Chrome 是因为它是现在最流行的网页调试工具也是最多人用的浏览器。_Chrome 浏览器返回缓存 http 状态码总共有以下三个 1、<strong>200 from memory cache</strong>客户端不与服务器通讯，直接从内存中读取缓存。此时的数据时缓存到内存中的，当关闭浏览器后，数据自然就被当垃圾回收清空。<br>2、<strong>200 from disk cache</strong>客户端不与服务器通讯，直接从磁盘中读取缓存，因为数据存在磁盘中，就算关闭浏览器数据还是存在，下次打开只要数据不过期就可以直接读取。<br>3、<strong>304 Not Modified</strong>客户端与服务器通讯，服务器验证资源是否需要更新，如果不需要更新服务器返回 304 状态码，然后客户端直接从缓存中读取数据</p>
<blockquote>
<p>注意：经过测试，我发现 Safari 和 Firefox 都有三种缓存策略，IE 和其他浏览器大家可以各自测试一下</p>
</blockquote>
<h3 id="浏览器三种缓存示例图"><a href="#浏览器三种缓存示例图" class="headerlink" title="浏览器三种缓存示例图"></a>浏览器三种缓存示例图</h3><p>Chrome 和 Safari 似乎没有办法在浏览器中直接查看缓存情况，因此只能实践中查看。 Chrome 示例图: 状态码：<strong>200 OK</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456008-7a79c689-007d-4d84-a29b-bf35af5d9446.webp#height=436&id=f04Nh&originHeight=436&originWidth=805&originalType=binary&size=0&status=done&style=none&width=805" alt="">状态码：<strong>200 from memeory cache</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456038-353ee511-e169-45b7-b11c-fd5ced110fe3.webp#height=430&id=SBGC1&originHeight=430&originWidth=721&originalType=binary&size=0&status=done&style=none&width=721" alt="">状态码：<strong>200 from disk cache</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455996-e6b3b611-6fc6-4150-ba58-e70600d216a7.webp#height=437&id=uJR6M&originHeight=437&originWidth=809&originalType=binary&size=0&status=done&style=none&width=809" alt="">状态码：<strong>304 Not Modified</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455976-3514054f-962c-4fa0-a701-d1fafd3c8d9e.webp#height=369&id=tZlps&originHeight=369&originWidth=780&originalType=binary&size=0&status=done&style=none&width=780" alt="">))<br>Safari 示例图： 响应头：<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456010-891b40f2-e533-4154-9dca-0ec262bc4b60.webp#height=564&id=LEnsF&originHeight=564&originWidth=1244&originalType=binary&size=0&status=done&style=none&width=1244" alt="">状态码：200 OK<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456006-5b41e3c7-ab68-49e7-ac41-aad156d64252.webp#height=302&id=wZRvU&originHeight=302&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt="">状态码：200 内存<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456020-93bcf783-4d71-4632-b424-d424885d47d3.webp#height=460&id=VZyr6&originHeight=460&originWidth=1242&originalType=binary&size=0&status=done&style=none&width=1242" alt="">状态码：200 磁盘<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455994-1bbd166a-2051-4080-952e-bbd5fe5fccf4.webp#height=456&id=wD9RQ&originHeight=456&originWidth=1236&originalType=binary&size=0&status=done&style=none&width=1236" alt=""><br>Firefox：在 url 上输入 about:cache 可以看到对应的缓存情况，大家可以试一下<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455993-71d57da2-268c-4a75-88bc-98f922b94c15.webp#height=941&id=HQOLr&originHeight=941&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt="">从截图中可以看到 Firefox 也分为内存缓存和磁盘缓存，304Not Modified 自然也是有的。<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455990-8d7c53b1-2688-4cba-bce7-21076f0e3829.webp#height=347&id=km0qw&originHeight=347&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt="">资源被强缓存后状态码依然是 200 OK，不过会在传输列下显示已缓存，但是无法看出是内存缓存还是磁盘缓存。<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455999-5a96cafe-9a51-4dac-a26c-bea1cac98990.webp#height=309&id=q1bCV&originHeight=309&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt="">Firefox 的 304 与 Chrome 和 Safari 差别不大。</p>
<h3 id="三种缓存策略实际执行的条件"><a href="#三种缓存策略实际执行的条件" class="headerlink" title="三种缓存策略实际执行的条件"></a>三种缓存策略实际执行的条件</h3><p>我在网上看到有人写文章说 <strong>js、图片和字体保存在内存中而 css 则保存在磁盘</strong>，很明显，只要自己稍微测试一下就知道这种说法是站不住脚的，那么这三种情况究竟是怎样的呢？<br>经过简单的测试以后我发现这三种策略并不复杂，默认配置情况下，Chrome 第一次请求资源后，如果资源的响应头有 Cache-Control 或者 Expires 且有效期大于现在，则加载数据后将强缓存资源到内存和磁盘。<br>刷新页面，Chrome 发起整个页面的二次请求后，通过开发者工具可以看到<strong>强缓存资源</strong>都会从内存进行读取，这就是<em>200 from memory cache</em>的情况。<br>示例：<br>这时关闭浏览器后，重新打开浏览器并打开关闭前的页面，通过开发者工具可以看到之前<strong>强缓存资源</strong>都会从磁盘中读取，这是因为关闭了浏览器后系统回收了内存资源，因此内存没有了之前的<strong>强缓存资源</strong>，需要从磁盘中读取，这就是<em>200 from disk cache</em>的情况。<br>示例：<br>如果这时使用 ctrl + f5 强刷页面则会发现全部资源都是 200 OK 状态要从服务器中获取新数据。<br>304 Not Modified 的情况则完全不同，如果资源的响应头是 Last-Modified 或 Etag，第一次请求资源后缓存到本地磁盘，但第二次也必须发起请求到服务器进行查询该资源是否过期或被修改过，当服务器验证资源没有过期后才会返回 304 Not Modified 状态码，同时响应体为空，这样可以节省流量并提高响应速度，客户端接收到 304 状态码后从本地读取数据，因此 304 比 200 from cache 响应速度要慢，但比 200 OK 快得多。</p>
<h3 id="Chrome-浏览器缓存机制流程图"><a href="#Chrome-浏览器缓存机制流程图" class="headerlink" title="Chrome 浏览器缓存机制流程图"></a>Chrome 浏览器缓存机制流程图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456008-d90347ea-0343-4d19-9929-b1eaf14665bf.webp#height=844&id=seWIc&originHeight=844&originWidth=1280&originalType=binary&size=0&status=done&style=none&width=1280" alt=""></p>
<h2 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h2><p>伪类：其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如:hover,:active。<br>伪元素：其核心就是需要创建通常不存在于文档中的元素，比如::before。<br>区别：<br>针对作用选择器的效果，伪类需要添加类来达到效果，而伪元素需要增加元素，所以一个叫伪类，另外一个叫伪元素。</p>
<ul>
<li>伪类和伪元素都是用来表示文档树以外的”元素”。</li>
<li>伪类和伪元素分别用单冒号<code>:</code>和双冒号<code>::</code>来表示。</li>
<li>伪类和伪元素的区别，最关键的点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到目的，如果是则是伪元素，反之则是伪类。</li>
</ul>
<h2 id="浏览器渲染的过程："><a href="#浏览器渲染的过程：" class="headerlink" title="浏览器渲染的过程："></a>浏览器渲染的过程：</h2><ol>
<li>处理 HTML 标记并构建 DOM 树。</li>
<li>处理 CSS 标记并构建 CSSOM 树。</li>
<li>将 DOM 与 CSSOM 合并成一个渲染树。</li>
<li>根据渲染树来布局，以计算每个节点的几何信息。</li>
<li>将各个节点绘制到屏幕上。</li>
</ol>
<p>需要明白，这五个步骤并不一定一次性顺序完成。如果 DOM 或 CSSOM 被修改，以上过程需要重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。实际页面中，CSS 与 JavaScript 往往会多次修改 DOM 和 CSSOM，下面就来看看它们的影响方式。</p>
<h2 id="var、let、const-区别"><a href="#var、let、const-区别" class="headerlink" title="var、let、const 区别"></a>var、let、const 区别</h2><p>var 申明的是全局作用域，全局变量<br><strong>let 声明的变量拥有块级作用域，局部变量</strong><br>const 就是用来声明常量，<strong>块级作用域，局部变量</strong></p>
<p>var 能够进行变量提升，是全局变量，能够重新申明你变量，let ，const 都是块级作用域，不允许重复申明，重复申明会报错，没有变量提升，const 是常量，一旦申明就不能被修改，并且需要有初始值。</p>
<table>
<thead>
<tr>
<th>声明方式</th>
<th>变量提升</th>
<th>暂时性死区</th>
<th>重复声明</th>
<th>初始值</th>
<th>作用域</th>
</tr>
</thead>
<tbody><tr>
<td>var</td>
<td>允许</td>
<td>不存在</td>
<td>允许</td>
<td>不需要</td>
<td>除块级</td>
</tr>
<tr>
<td>let</td>
<td>不允许</td>
<td>存在</td>
<td>不允许</td>
<td>不需要</td>
<td>块级</td>
</tr>
<tr>
<td>const</td>
<td>不允许</td>
<td>存在</td>
<td>不允许</td>
<td>需要</td>
<td>块级</td>
</tr>
</tbody></table>
<ul>
<li>变量提升：变量可在声明之前使用。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正常运行，控制台输出 undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: b is not defined</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: c is not defined</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p><code>var</code> 命令经常会发生<strong>变量提升</strong>现象，按照一般逻辑，变量应该在声明之后使用才对。为了纠正这个现象，ES6 规定 <code>let</code> 和 <code>const</code> 命令<strong>不发生变量提升</strong>，使用 <code>let</code> 和 <code>const</code> 命令声明变量之前，该变量是不可用的。主要是为了减少运行时错误，防止变量声明前就使用这个变量，从而导致意料之外的行为。</p>
</blockquote>
<ul>
<li>暂时性死区(形成封闭式死区)<ul>
<li>概述：如果在代码块中存在  <code>let</code>  或  <code>const</code>  命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  tmp <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: tmp is not defined</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p>这段代码的原意是在 if 内定义外部的 <code>tmp</code> 为 ‘abc’。<br>但现实是，存在全局变量 <code>tmp</code>，但是块级作用域内 <code>let</code> 又声明了一个 <code>tmp</code>变量，导致后者被绑定在这个块级作用域中，所以在 <code>let</code> 声明变量前，对 <code>tmp</code> 赋值就报错了。</p>
</blockquote>
<ul>
<li>重复声明：指在相同作用域内，重复声明同一个变量。</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span>
  <span class="token keyword">var</span> PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'PI' has already been declared</span>
<span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">// 当调用func()时报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span>
  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'PI' has already been declared</span>
<span class="token punctuation">}</span></code></pre>
<blockquote>
<p><code>let</code>  和  <code>const</code>  命令声明的变量不允许重复声明，但是 var 可以重复申明</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 5</span>

<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 10</span></code></pre>
<blockquote>
<p>因为  <code>var</code>  命令没有块级作用域，所以 for 循环括号内的变量  <code>i</code>  会覆盖外层  <code>i</code>，而且  <code>var</code>  允许重复声明，所以这段代码中  <code>i</code>  被声明了两次,<code>i</code>  的最终结果就被 for 循环的 i 给覆盖了。</p>
</blockquote>
<ul>
<li>初始值<ul>
<li>由于  <code>const</code>  声明的是只读的常量，一旦声明，就必须立即初始化，声明之后值不能改变。</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一旦被申明，就不能再改变</span>
<span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught TypeError: Assignment to constant variable.</span>

<span class="token comment" spellcheck="true">//必须要有初始值</span>
<span class="token keyword">const</span> PI<span class="token punctuation">;</span>
PI<span class="token operator">=</span><span class="token number">3.1415</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught SyntaxError: Missing initializer in const declaration</span>
</code></pre>
<ul>
<li>作用域</li>
</ul>
<p>在 ES5 中只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。<br>第一种场景，内层变量可能会覆盖外层变量：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处于全局作用域</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处于函数作用域</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre>
<blockquote>
<p>function 内部的 2 个  <code>tmp</code>  变量处在同一函数作用域，由于变量提升，导致函数作用域中的  <code>tmp</code>  覆盖全局作用域中的  <code>tmp</code>，所以，f()输出结果为 undefined。</p>
</blockquote>
<p>第二种场景，用来计数的循环变量泄露为全局变量（前面在重复声明中提到的）：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 5</span></code></pre>
<hr>
<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>promise 是异步编程的一种解决方法，从语法上说 promise 是一个对象，从它可以获取异步操作的消息。promise 的出现是为了解决<strong>回调地狱</strong> 。</p>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><p>参数传递太麻烦，Promise 解决了回调地狱的问题，但是如果遇到复杂的业务，代码里面会包含大量的 then 函数，使得代码依然不是太容易阅读。</p>
<h3 id="Promise-状态和值"><a href="#Promise-状态和值" class="headerlink" title="Promise 状态和值"></a>Promise 状态和值</h3><p>Promise 对象存在以下三种状态：Pending(进行中)、Resolved(已成功)、Rejected(已失败)。状态只能由  Pending  变为  Resolved  或由  Pending  变为  Rejected ，且状态改变之后不会在发生变化，会一直保持这个状态。</p>
<h3 id="Promise…-then…catch…finally"><a href="#Promise…-then…catch…finally" class="headerlink" title="Promise….then…catch…finally"></a>Promise….then…catch…finally</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Promise的状态值一旦改变就不会再改变, 如果二者都存在,即为只执行在前面的项</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//成功时执行</span>
  <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//失败时执行(此时不执行)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//接收resolve()中的参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"成功"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token comment" spellcheck="true">//接收reject()中的参数</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"失败"</span> <span class="token operator">+</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="Promise-的静态方法"><a href="#Promise-的静态方法" class="headerlink" title="Promise 的静态方法"></a>Promise 的静态方法</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//成功</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等价于</span>
<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//失败</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"err"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>###</p>
<p>###</p>
<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><blockquote>
<p>类方法，多个 Promise 任务同时执行，返回最先执行结束的 Promise 任务的结果，不管这个 Promise 结果是成功还是失败。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>reject<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//返回值为two</span></code></pre>
<p>###</p>
<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><blockquote>
<p>类方法，多个 Promise 任务同时执行。<br>如果全部成功执行，则以数组的方式返回所有 Promise 任务的执行结果。 如果有一个 Promise 任务 rejected，则只返回 rejected 任务的结果。</p>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功了"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败了"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//失败了</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>##</p>
<hr>
<h2 id="async-await-的优缺点"><a href="#async-await-的优缺点" class="headerlink" title="async/await 的优缺点"></a>async/await 的优缺点</h2><p>Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它。复杂逻辑中，我们就能发现<code>async/await</code>确实比 then 链有优势。<br>async 是一个通过异步执行并隐式返回 Promise 作为结果的函数。可以说 async 是 Generator 函数的语法糖，并对 Generator 函数进行了改进。</p>
<p>一比较就会发现，async 函数就是将 Generator 函数的星号（*）替换成 async，将 yield 替换成 await，仅此而已。</p>
<p>async 函数对 Generator 函数的改进，体现在以下四点：</p>
<ol>
<li><code>内置执行器</code>。Generator 函数的执行必须依靠执行器，而 async 函数自带执行器，无需手动执行 next() 方法。</li>
<li><code>更好的语义</code>。async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</li>
<li><code>更广的适用性</code>。co 模块约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</li>
<li><code>返回值是 Promise</code>。async 函数返回值是 Promise 对象，比 Generator 函数返回的 Iterator 对象方便，可以直接使用 then() 方法进行调用。</li>
</ol>
<h3 id="async-await-执行顺序"><a href="#async-await-执行顺序" class="headerlink" title="async/await 执行顺序"></a>async/await 执行顺序</h3><p>通过上面的分析，我们知道<code>async</code>隐式返回 Promise 作为结果的函数,那么可以简单理解为，await 后面的函数执行完毕时，await 会产生一个微任务(Promise.then 是微任务)。但是我们要注意这个微任务产生的时机，它是执行完 await 之后，直接跳出 async 函数，执行其他代码(此处就是协程的运作，A 暂停执行，控制权交给 B)。其他代码执行完毕后，再回到 async 函数去执行剩下的代码，然后把 await 后面的代码注册到微任务队列当中。</p>
<pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"script start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async1 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"async2 end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setTimeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Promise"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"promise2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"script end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// script start => async2 end => Promise => script end => promise1 => promise2 => async1 end => setTimeout</span></code></pre>
<p>分析这段代码：</p>
<ul>
<li>执行代码，输出<code>script start</code>。</li>
<li>执行 async1(),会调用 async2(),然后输出<code>async2 end</code>,此时将会保留 async1 函数的上下文，然后跳出 async1 函数。</li>
<li>遇到 setTimeout，产生一个宏任务</li>
<li>执行 Promise，输出<code>Promise</code>。遇到 then，产生第一个微任务</li>
<li>继续执行代码，输出<code>script end</code></li>
<li>代码逻辑执行完毕(当前宏任务执行完毕)，开始执行当前宏任务产生的微任务队列，输出<code>promise1</code>，该微任务遇到 then，产生一个新的微任务</li>
<li>执行产生的微任务，输出<code>promise2</code>,当前微任务队列执行完毕。执行权回到 async1</li>
<li>执行 await,实际上会产生一个 promise 返回，即</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> promise_ <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">resolve</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>执行完成，执行 await 后面的语句，输出<code>async1 end</code></p>
<ul>
<li>最后，执行下一个宏任务，即执行 setTimeout，输出<code>setTimeout</code></li>
</ul>
<p>使用：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">step1</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`step1 with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">step2</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`step2 with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">step3</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`step3 with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>n<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">takeLongTime</span><span class="token punctuation">(</span>k <span class="token operator">+</span> m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<ul>
<li>promise 版本</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"doIt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> time1 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
  <span class="token function">step1</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">step2</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>time3<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">,</span> time3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>times<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">,</span> time3<span class="token punctuation">]</span> <span class="token operator">=</span> times<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">step3</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">,</span> time3<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"doIt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<ul>
<li>async/await 版本</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">"doIt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> time1 <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> time2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step1</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> time3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step2</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">step3</span><span class="token punctuation">(</span>time1<span class="token punctuation">,</span> time2<span class="token punctuation">,</span> time3<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">"doIt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">doIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><h3 id="定义：-1"><a href="#定义：-1" class="headerlink" title="定义："></a>定义：</h3><p>Generator 函数是一个状态机，封装了多个内部状态。执行 Generator 函数会返回一个遍历器对象，可以依次遍历 Generator 函数内部的每一个状态，但是只有调用<code>next</code>方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。<code>yield</code>表达式就是暂停标志。</p>
<h3 id="Generator-函数暂停恢复执行原理"><a href="#Generator-函数暂停恢复执行原理" class="headerlink" title="Generator 函数暂停恢复执行原理"></a>Generator 函数暂停恢复执行原理</h3><p>要搞懂函数为何能暂停和恢复，那你首先要了解协程的概念。</p>
<blockquote>
<p>一个线程（或函数）执行到一半，可以暂停执行，将执行权交给另一个线程（或函数），等到稍后收回执行权的时候，再恢复执行。这种可以并行执行、交换执行权的线程（或函数），就称为协程。</p>
</blockquote>
<p>协程是一种比线程更加轻量级的存在。普通线程是抢先式的，会争夺 cpu 资源，而协程是合作的，可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程。它的运行流程大致如下：</p>
<ol>
<li>协程<code>A</code>开始执行</li>
<li>协程<code>A</code>执行到某个阶段，进入暂停，执行权转移到协程<code>B</code></li>
<li>协程<code>B</code>执行完成或暂停，将执行权交还<code>A</code></li>
<li>协程<code>A</code>恢复执行</li>
</ol>
<p>协程遇到<code>yield命令</code>就暂停，等到执行权返回，再从暂停的地方继续往后执行。它的最大优点，就是代码的写法非常像同步操作，如果去除 yield 命令，简直一模一样。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token string">"world"</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> result1 <span class="token operator">+</span> result2<span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//{value : 'hello', done : false}</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//{value : 'world', done : false}</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//{value : 3, done: true}</span>
g<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//{value : undefined, done: true}</span></code></pre>
<hr>
<h2 id="闭包、垃圾回收和内存泄漏"><a href="#闭包、垃圾回收和内存泄漏" class="headerlink" title="闭包、垃圾回收和内存泄漏"></a>闭包、垃圾回收和内存泄漏</h2><h3 id="定义：-2"><a href="#定义：-2" class="headerlink" title="定义："></a>定义：</h3><p><strong>闭包就是能够读取其他函数内部变量的函数</strong>。由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”<strong>定义在一个函数内部的函数</strong>“。</p>
<h3 id="一、变量的作用域"><a href="#一、变量的作用域" class="headerlink" title="一、变量的作用域"></a>一、变量的作用域</h3><p>要理解闭包，首先必须理解 Javascript 特殊的变量作用域。<br>变量的作用域无非就是两种：全局变量和局部变量。<br>Javascript 语言的特殊之处，就在于函数内部可以直接读取全局变量。<br>在函数外部自然无法读取函数内的局部变量，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，实际上声明了一个全局变量！</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// error</span>

<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  n <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
consoel<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//999</span></code></pre>
<h3 id="二、如何从外部读取局部变量？"><a href="#二、如何从外部读取局部变量？" class="headerlink" title="二、如何从外部读取局部变量？"></a>二、如何从外部读取局部变量？</h3><p>“链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> f2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<blockquote>
<p>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</p>
</blockquote>
<h3 id="三、闭包的用途"><a href="#三、闭包的用途" class="headerlink" title="三、闭包的用途"></a>三、闭包的用途</h3><ul>
<li>闭包可以用在许多地方。它的最大用处有两个<ul>
<li>一个是前面提到的可以读取函数内部的变量</li>
<li>另一个就是让这些变量的值始终保持在内存中。</li>
</ul>
</li>
</ul>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>

  nAdd <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> f2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 999</span>

<span class="token function">nAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1000</span></code></pre>
<blockquote>
<p>在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。<br>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。<br>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p>
</blockquote>
<h3 id="四、使用闭包的注意点"><a href="#四、使用闭包的注意点" class="headerlink" title="四、使用闭包的注意点"></a>四、使用闭包的注意点</h3><blockquote>
<p><strong>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</strong></p>
</blockquote>
<blockquote>
<p><strong>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</strong></p>
</blockquote>
<h3 id="五、闭包常见的情况"><a href="#五、闭包常见的情况" class="headerlink" title="五、闭包常见的情况"></a>五、闭包常见的情况</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>

  getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//The Window</span></code></pre>
<blockquote>
</blockquote>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"The Window"</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>

  getNameFunc<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//My object</span></code></pre>
<h3 id="闭包的高级写法"><a href="#闭包的高级写法" class="headerlink" title="闭包的高级写法"></a><strong>闭包的高级写法</strong></h3><p>上面的写法其实是最原始的写法，而在实际应用中，会将闭包和匿名函数联系在一起使用。下面就是一个闭包常用的写法：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  varviewport<span class="token punctuation">;</span>
  varobj <span class="token operator">=</span> <span class="token punctuation">{</span>
    init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    addChild<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    removeChild<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>jView <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>这个组件的作用是：初始化一个容器，然后可以给这个容器添加子容器，也可以移除一个容器。<br>功能很简单，但这里涉及到了另外一个概念：立即执行函数。 简单了解一下就行，需要重点理解的是这种写法是如何实现闭包功能的。<br>可以将上面的代码拆分成两部分：<strong>(function(){})</strong> 和** ()** 。<br>第 1 个*<em>() *</em>是一个表达式，而这个表达式本身是一个匿名函数，所以在这个表达式后面加 *<em>() *</em>就表示执行这个匿名函数。<br>因此这段代码执行执行过程可以分解如下：</p>
<pre class=" language-javascript"><code class="language-javascript">varf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>document<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  varviewport<span class="token punctuation">;</span>
  varobj <span class="token operator">=</span> <span class="token punctuation">{</span>
    init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    addChild<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    removeChild<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      viewport<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span>jView <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">f</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在这段代码中似乎看到了闭包的影子，但 f 中没有任何返回值，似乎不具备闭包的条件，注意这句代码：</p>
<pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>jView <span class="token operator">=</span> obj<span class="token punctuation">;</span></code></pre>
<p>obj 是在函数 f 中定义的一个对象，这个对象中定义了一系列方法， 执行 window.jView = obj 就是在 window 全局对象定义了一个变量 jView，并将这个变量指向 obj 对象，即全局变量 jView 引用了 obj . 而 obj 对象中的函数又引用了函数 f 中的变量 viewport ,因此函数 f 中的 viewport 不会被 GC 回收，viewport  会一直保存到内存中，所以这种写法满足了闭包的条件。</p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>这是对闭包最简单的理解，当然闭包还有其更深层次的理解，这个就涉及的多了，你需要了解 JS 的执行环境(execution context)、活动对象(activation object)以及作用域(scope)和作用域链(scope chain)的运行机制。</p>
<hr>
<h2 id="冒泡事件和捕获事件"><a href="#冒泡事件和捕获事件" class="headerlink" title="冒泡事件和捕获事件"></a>冒泡事件和捕获事件</h2><h3 id="冒泡事件：（由内-gt-外）"><a href="#冒泡事件：（由内-gt-外）" class="headerlink" title="冒泡事件：（由内-&gt;外）"></a>冒泡事件：（由内-&gt;外）</h3><p>微软提出了名为<strong>事件冒泡</strong>(event bubbling)的事件流。事件会从最内层的元素开始发生，一直向上传播，直到 document 对象。<br><strong>p -&gt; div -&gt; body -&gt; html -&gt; document</strong></p>
<h3 id="事件捕获（由外-gt-内）"><a href="#事件捕获（由外-gt-内）" class="headerlink" title="事件捕获（由外-&gt;内）"></a>事件捕获（由外-&gt;内）</h3><p>网景提出另一种事件流名为<strong>事件捕获</strong>(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到<strong>最具体的元素</strong>。<br><strong>事件冒泡和事件捕获过程图：</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597280637497-1413d9de-e58a-4499-8fd1-c3cf40af2a07.png#height=357&id=EMtAq&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=394&originalType=binary&size=45332&status=done&style=none&width=394" alt="image.png"></p>
<h2 id="文章引用："><a href="#文章引用：" class="headerlink" title="文章引用："></a>文章引用：</h2><p><a href="https://segmentfault.com/a/1190000015727237" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015727237</a><br><a href="https://juejin.im/post/6844903696111763470#heading-3" target="_blank" rel="noopener">https://juejin.im/post/6844903696111763470</a><br><a href="https://juejin.im/post/6844903767226351623" target="_blank" rel="noopener">https://juejin.im/post/6844903767226351623</a><br><a href="https://www.jianshu.com/p/895422b87c7b" target="_blank" rel="noopener">https://www.jianshu.com/p/895422b87c7b</a><br><a href="https://juejin.im/post/6844903960910757902" target="_blank" rel="noopener">https://juejin.im/post/6844903960910757902</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
