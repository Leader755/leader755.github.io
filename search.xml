<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用的网站整理(持续整理中)</title>
      <link href="/leader755/7280.html"/>
      <url>/leader755/7280.html</url>
      
        <content type="html"><![CDATA[<p>通俗易通的 javascript,<br><a href="https://zhuanlan.zhihu.com/p/23804247" target="_blank" rel="noopener">this 的值到底是什么？一次说清楚</a><br><strong>JavaScript 秘密花园</strong></p><p>通俗易懂的 css 的动画：<br><a href="https://juejin.im/post/6844903845470945294" target="_blank" rel="noopener">2019 年了，你还不会 CSS 动画？</a><br><a href="https://www.w3cschool.cn/css3/css3-animation.html" target="_blank" rel="noopener">27 个精致的 CSS3 动画效果源代码下载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试（3）</title>
      <link href="/leader755/57313.html"/>
      <url>/leader755/57313.html</url>
      
        <content type="html"><![CDATA[<p>vue 中 computed 的传参：<br>利用闭包：</p><pre class=" language-javascript"><code class="language-javascript">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>Ratedata<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>currentRate<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小程序中如何合并 seaData,减少 setData 次数：<br>**  合并<code>setdata</code>的请求，减少通讯的次数：**<br>避免过于频繁调用<code>setData</code>,应考虑将多次<code>setData</code>合并成一次<code>setData</code>调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不要频繁调用setData</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绝大多数时候可优化为</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>**<br><strong>5. 列表的局部更新</strong><br>在一个列表中，有<code>n</code>条数据，采用上拉加载更多的方式，假如这个时候想对其中某一个数据进行点赞操作，还能及时看到点赞的效果。</p><blockquote><ul><li>可以采用<code>setData</code>全局刷新，点赞完成之后，重新获取数据，再次进行全局重新渲染，这样做的有点是：方便，快捷！缺点是：用户体验极其不好，当用户刷量 100 多条数据后，重新渲染会出现空白期。</li><li>也可以采用局部刷新，将点赞的<code>id</code>传过去，知道点的是哪一条数据，重新获取数据，查找相对应<code>id</code>的那条数据的下标（<code>index</code>是不会改变的），用<code>setData</code>进行局部刷新，如此，便可以显著提升渲染速度。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">=</span>newList<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>vue 的单项数据流：</p><ul><li>Vue 是单向数据流，不是双向绑定</li><li>Vue 的双向绑定不过是语法糖</li><li>Object.definePropert 是用来做响应式更新的</li></ul><p>Vue 是怎么实现数据响应式更新的，面试官期望听到的回答是通过<code>Object.defineProperty()</code>的<code>get</code>和<code>set</code>方法来实现响应式更新。</p><p>Vue 的虚拟 Dom<br>浏览器解析一个 html 大致分为五步：创建 DOM tree –&gt; 创建 Style Rules -&gt; 构建 Render tree -&gt; 布局 Layout –&gt; 绘制 Painting。每次对真实 dom 进行操作的时候，浏览器都会从构建 dom 树开始从头到尾执行一遍流程。真实的 dom 操作代价昂贵，操作频繁还会引起页面卡顿影响用户体验，<strong>虚拟 dom 就是为了解决这个浏览器性能问题才被创造出来</strong><br>虚拟 dom 在执行 dom 的更新操作后，虚拟 dom 不会直接操作真实 dom，而是将更新的 diff 内容保存到本地 js 对象中，然后一次性 attach 到 dom 树上，通知浏览器进行 dom 绘制避免大量无谓的计算。</p><p>简单总结：虚拟 DOM 是将真实的 DOM 节点用 JavaScript 模拟出来，将 DOM 变化的对比，放到 Js 层来做。</p><h1 id="JavaScript：回流（重排）与重绘"><a href="#JavaScript：回流（重排）与重绘" class="headerlink" title="JavaScript：回流（重排）与重绘"></a><a href="https://segmentfault.com/a/1190000018452924" target="_blank" rel="noopener">JavaScript：回流（重排）与重绘</a></h1><h2 id="回流（元素的布局位置，规模尺寸，隐藏等改变）"><a href="#回流（元素的布局位置，规模尺寸，隐藏等改变）" class="headerlink" title="回流（元素的布局位置，规模尺寸，隐藏等改变）"></a>回流（元素的布局位置，规模尺寸，隐藏等改变）</h2><p>回流当 render tree 中的一部分或全部因为元素的规模尺寸、布局、隐藏等改变时，浏览器重新渲染部分 DOM 或全部 DOM 的过程。回流也被称为重排，其实从字面上来看，重排更容易让人形象易懂（即重新排版整个页面）。</p><h2 id="重绘（不改变元素的位置，只改变元素的样式）"><a href="#重绘（不改变元素的位置，只改变元素的样式）" class="headerlink" title="重绘（不改变元素的位置，只改变元素的样式）"></a>重绘（不改变元素的位置，只改变元素的样式）</h2><p><strong>当页面元素样式改变不影响元素在文档流中的位置时</strong>（如 background-color，border-color，visibility），浏览器只会将新样式赋予元素并进行重新绘制操作。</p><p><strong>回流必将引起重绘，而重绘不一定会引起回流。</strong></p><h2 id="如何减少回流、重绘？"><a href="#如何减少回流、重绘？" class="headerlink" title="如何减少回流、重绘？"></a>如何减少回流、重绘？</h2><h2 id="一、-CSS-中避免回流、重绘"><a href="#一、-CSS-中避免回流、重绘" class="headerlink" title="一、 CSS 中避免回流、重绘"></a>一、 CSS 中避免回流、重绘</h2><p>1.尽可能在 DOM 树的最末端改变 class 2.避免设置多层内联样式 3.动画效果应用到 position 属性为 absolute 或 fixed 的元素上 4.避免使用 table 布局 5.使用 css3 硬件加速，可以让 transform、opacity、filters 等动画效果不会引起回流重绘</p><h2 id="二、-JS-操作避免回流、重绘"><a href="#二、-JS-操作避免回流、重绘" class="headerlink" title="二、 JS 操作避免回流、重绘"></a>二、 JS 操作避免回流、重绘</h2><p><strong>1.避免使用 JS 一个样式修改完接着改下一个样式，最好一次性更改 CSS 样式，或者将样式列表定义为 class 的名称</strong> 2.避免频繁操作 DOM，使用文档片段创建一个子树，然后再拷贝到文档中 3.先隐藏元素，进行修改后再显示该元素，因为 display:none 上的 DOM 操作不会引发回流和重绘 4.避免循环读取 offsetLeft 等属性，在循环之前把它们存起来 5.对于复杂动画效果,使用绝对定位让其脱离文档流，否则会引起父元素及后续元素大量的回流</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>回流在浏览器中属于一种用户主导的操作，所以知道如何去改进回流时间以及知道各种文档属性（DOM 节点深度，css 的渲染效率，各种各样的样式改变）对回流时间的影响对于前端开发来讲是很有帮助的。有时即便是回流一个单一的元素，也可能要求它的父元素以及任何跟随它的元素也产生回流。例如需要改变某个元素的背景，这就不涉及该元素的属性，所以只发生重绘。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端面试（2）</title>
      <link href="/leader755/9184.html"/>
      <url>/leader755/9184.html</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript："><a href="#JavaScript：" class="headerlink" title="JavaScript："></a>JavaScript：</h3><ul><li>原型、继承、原型链、this 指向、设计模式、call, apply, bind,；</li><li>new 实现、防抖节流、let, var, const 区别、暂时性死区、event、loop；</li><li>promise 使用及实现、promise 并行执行和顺序执行；</li><li>async/await 的优缺点；</li><li>闭包、垃圾回收和内存泄漏、数组方法、数组乱序, 数组扁平化、事件委托、事件监听、事件模型。</li></ul><h2 id="this-指向，call-apply-bind"><a href="#this-指向，call-apply-bind" class="headerlink" title="this 指向，call, apply, bind"></a>this 指向，call, apply, bind</h2><h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><p><strong>this 关键字只与函数的执行环境有关，而与声明环境没有关系.</strong><br><strong>this 关键字虽然会根据环境变化，**</strong>但是它始终指向的是调用当前函数的那个对象**</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//常见的三种调用函数的方式</span><span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先不讲 apply</span></code></pre><p>从看到这篇文章起，你一定要记住，第三种调用形式，才是正常调用形式：</p><pre><code>func.call(context, p1, p2)</code></pre><p>其他两种都是语法糖，可以等价地变为 call 形式：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于</span>func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//等价于</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>child<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>至此我们的函数调用只有一种形式：</p><pre><code>func.call(context, p1, p2)</code></pre><p><strong>这样，this 就好解释了 this，就是上面代码中的 context。就这么简单。</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  foo<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// obj => obj.foo.call(obj)</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window    =>bar.call()转换为 bar.call()由于没有传 context,所以 this 就是 undefined,最后浏览器给你一个默认的 this —— window 对象</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20。典型的隐性绑定,这里 f 的this指向上下文 obj ,即输出 20</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10 ，非箭头函数，普通函数谁调用它，this 就指向谁。</span>    foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//20改变 。使用call改变 this 的指向。</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>this 是你 call 一个函数时传的 context，由于你从来不用 call 形式的函数调用，所以你一直不知道。<br>按理说打印出来的 this 应该就是 undefined 了吧，但是浏览器里有一条规则：</p><blockquote><p>如果你传的 context 是 null 或 undefined，那么 window 对象就是默认的 context（严格模式下默认 context 是 undefined）</p></blockquote><p><strong>this 指向什么，完全取决于什么地方以什么方式调用，而不是创建时。</strong><br>**</p><blockquote><ul><li>如果函数被 new 修饰<ul><li>this 绑定的是新创建的对象，例:var bar = new foo(); 函数 foo 中的 this 就是一个叫 foo 的新创建的对象 , 然后将这个对象赋给 bar , 这样的绑定方式叫 new 绑定 .</li></ul></li><li>如果函数是使用 call,apply,bind 来调用的<ul><li>this 绑定的是 call,apply,bind 的第一个参数.例: foo.call(obj); , foo 中的 this 就是 obj , 这样的绑定方式叫 显性绑定 .</li></ul></li><li>如果函数是在某个 上下文对象 下被调用<ul><li>this 绑定的是那个上下文对象，例 : var obj = { foo : foo }; obj.foo(); foo 中的 this 就是 obj . 这样的绑定方式叫 隐性绑定 .</li></ul></li><li>如果都不是，即使用默认绑定<ul><li>例:function foo(){…} foo() ,foo 中的 this 就是 window.(严格模式下默认绑定到 undefined).</li><li>这样的绑定方式叫 默认绑定。</li></ul></li></ul></blockquote><h3 id="apply-call-bind-改变-this-的指向"><a href="#apply-call-bind-改变-this-的指向" class="headerlink" title="apply, call, bind 改变 this 的指向"></a>apply, call, bind 改变 this 的指向</h3><ul><li>** apply(context, 实参) ，2 个参数，实参为数组， 自动执行函数**</li><li>** call(context, 实参)， 无数个参数，实参为单个参数传入，自动执行函数**</li><li>** bind(context, 实参)， 无数个参数，实参为单个参数传入 ，不会自动执行函数， 需要手动执行，并返回新的函数**</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token operator">...</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//...赋值，表示多个参数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"klivitam"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>show<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"爱好唱歌"</span><span class="token punctuation">,</span> <span class="token string">"宅男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数单个传入</span><span class="token comment" spellcheck="true">// ["男", "爱好唱歌", "宅男"]</span><span class="token comment" spellcheck="true">// klivitam</span>show<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"爱好唱歌"</span><span class="token punctuation">,</span> <span class="token string">"宅男"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//参数以数组的方式传入</span><span class="token comment" spellcheck="true">// ["男", "爱好唱歌", "宅男"]</span><span class="token comment" spellcheck="true">// klivitam</span></code></pre><p>具体可参考此篇文章：[bind，call, apply 的指向](<a href="https://www.yuque.com/docs/share/a7793549-fefe-4e1f-9d8d-8b49b7d33072?#" target="_blank" rel="noopener">https://www.yuque.com/docs/share/a7793549-fefe-4e1f-9d8d-8b49b7d33072?#</a> 《改变 this 的指向(弄懂 this 的指向)》)</p><h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><h3 id="防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）"><a href="#防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）" class="headerlink" title="防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）"></a>防抖：触发需要重新等待一段时间后再触发（搜索框输入，提交按钮）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="节流：等待一段时间后-才会重新触发。（上拉加载更多）"><a href="#节流：等待一段时间后-才会重新触发。（上拉加载更多）" class="headerlink" title="节流：等待一段时间后 才会重新触发。（上拉加载更多）"></a>节流：等待一段时间后 才会重新触发。（上拉加载更多）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throtte</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> activeTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> current <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">-</span> activeTime <span class="token operator">></span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      activeTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="原型，原型链，继承"><a href="#原型，原型链，继承" class="headerlink" title="原型，原型链，继承"></a>原型，原型链，继承</h2><h3 id="原型："><a href="#原型：" class="headerlink" title="原型："></a>原型：</h3><p><strong>当使用构造函数创建一个对象后，在这个对象内部包含一个指针，这个指针指向构造函数的 prototype 属性所对应的值，这个指针被称为对象的为原型。</strong></p><h3 id="原型链："><a href="#原型链：" class="headerlink" title="原型链："></a>原型链：</h3><p><strong>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它会去它的原型对象里查找属性，这个原型对象又会有一个自己的原型，于是一直这样</strong>向上<strong>找（因为继承的，所以是向上找），于是就形成了原型链。</strong> 原型链的最顶端是 Object.prototype <strong>，</strong>Object.prototype  的原型是 null（null 没有原型），所以原型链的尽头为 null。</p><p>在 js 中我们使用构造函数来创建一个新的对象，每个构造函数内部都有一个 prototype 属性值，这个属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。</p><h3 id="继承："><a href="#继承：" class="headerlink" title="继承："></a>继承：</h3><p><strong>继承：原型链作为实现继承的主要防范，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。</strong><br>继承一般有 2 种：接口继承和实现继承。接口继承只继承方法签名，实现继承则继承实际的方法。ECMAscript 中只支持实现继承，而且实现继承主要依靠原型链来实现的。</p><blockquote><p>原型链并非十分完美, 它包含如下两个问题：<br>问题一: 当原型链中包含引用类型值的原型时,该引用类型值会被所有实例共享;<br>问题二: 在创建子类型(例如创建 Son 的实例)时,不能向超类型(例如 Father)的构造函数中传递参数.</p></blockquote><h4 id="实现继承的主要方法："><a href="#实现继承的主要方法：" class="headerlink" title="实现继承的主要方法："></a>实现继承的主要方法：</h4><h4 id="1、原型链继承"><a href="#1、原型链继承" class="headerlink" title="1、原型链继承"></a>1、原型链继承</h4><p><strong>核心：</strong> 将父类的实例作为子类的原型</p><ul><li>优点：父类方法可以复用</li><li>缺点：<ul><li>父类的引用属性会被所有子类实例共享</li><li>子类构建实例时不能向父类传递参数</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在构造函数中，一般很少有数组形式的引用属性，大部分情况都是：基本属性 + 方法。</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'父亲'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (该属性，强调私有)</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// -- 将需要复用、共享的方法定义在父类原型上</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 核心</span><span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 优点：共享了父类构造函数的say方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boy2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// hello , hello , true</span><span class="token comment" spellcheck="true">// 缺点1：不能传参数</span><span class="token comment" spellcheck="true">// 缺点2：</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy1<span class="token punctuation">.</span>name<span class="token operator">===</span>boy2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 父亲，父亲，true</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 修改了boy1的arr属性，boy2的arr属性，也会变化，因为两个实例的原型上(Child.prototype)有了父类构造函数的实例属性arr；所以只要修改了boy1.arr,boy2.arr的属性也会变化。  ----  原型上的arr属性是共享的。</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2]</span>注意：修改boy1的name属性，是不会影响到boy2<span class="token punctuation">.</span>name。因为name是基本属性，不是引用属性。</code></pre><h4 id="2、借用构造函数"><a href="#2、借用构造函数" class="headerlink" title="2、借用构造函数"></a>2、借用构造函数</h4><ul><li>核心：借用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类。</li><li>优点：实例之间独立。<ul><li>创建子类实例，可以向父类构造函数传参数。</li><li>子类实例不共享父类构造函数的引用属性。如 arr 属性</li></ul></li><li>缺点：<ul><li>父类的方法不能复用（由于方法在父构造函数中定义，导致方法不能复用(因为每次创建子类实例都要创建一遍方法)。比如 say 方法。(方法应该要复用、共享)）</li><li>子类实例，继承不了父类原型上的属性。(因为没有用到原型)</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (该属性，强调私有)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 实例引用属性 (该属性，强调复用，需要共享)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 核心</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span> <span class="token string">'orange '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 优点1：可传参</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> boy2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小红， 小明</span><span class="token comment" spellcheck="true">// 优点2：不共享父类构造函数的引用属性</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">,</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// [1,2] [1]</span><span class="token comment" spellcheck="true">// 缺点1：方法不能复用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false (说明，boy1和boy2</span>的say方法是独立，不是共享的<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 缺点2：不能继承父类原型上的方法</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>walk <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 在父类的原型对象上定义一个walk方法。</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会走路'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>boy1<span class="token punctuation">.</span>walk<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// undefined (说明实例，不能获得父类原型上的方法)</span></code></pre><h4 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h4><ul><li>核心：通过调用父类构造函数，继承父类的属性并保留传参的优点；然后通过将父类实例作为子类原型，实现函数复用。（原型式继承和构造函数继承的组合，兼具了二者的优点）</li><li>优点：<ul><li>父类的方法可以被复用</li><li>父类的引用属性不会被共享</li><li>子类构建实例时可以向父类传递参数</li></ul></li><li>缺点：<ul><li>调用了两次父类的构造函数，第一次给子类的原型添加了父类的 name, arr 属性，第二次又给子类的构造函数添加了父类的 name, arr 属性，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费。</li></ul></li><li>注意：’组合继承’这种方式，要记得修复 Child.prototype.constructor 指向</li></ul><blockquote><ul><li>第一次 Parent.call(this);从父类拷贝一份父类实例属性，作为子类的实例属性，</li><li>第二次 Child.prototype = new Parent();创建父类实例作为子类原型，此时这个父类实例就又有了一份实例属性，但这份会被第一次拷贝来的实例属性屏蔽掉，所以多余。</li></ul></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例基本属性 (该属性，强调私有，不共享)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (该属性，强调私有)</span><span class="token punctuation">}</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// --- 将需要复用、共享的方法定义在父类原型上</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>like<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 核心   第二次</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>like <span class="token operator">=</span> like<span class="token punctuation">;</span><span class="token punctuation">}</span>Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 核心   第一次</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>这里是修复构造函数指向的代码<span class="token operator">--</span><span class="token operator">></span><span class="token keyword">let</span> boy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'apple'</span><span class="token punctuation">)</span><span class="token keyword">let</span> boy2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'小明'</span><span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 优点1：可以传参数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>name<span class="token punctuation">,</span>boy1<span class="token punctuation">.</span>like<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 小红，apple</span><span class="token comment" spellcheck="true">// 优点2：可复用父类原型上的方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>say <span class="token operator">===</span> boy2<span class="token punctuation">.</span>say<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 优点3：不共享父类的引用属性，如arr属性</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>arr<span class="token punctuation">,</span>boy2<span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1,2] [1] 可以看出没有共享arr属性。</span>注意：为啥要修复构造函数的指向？console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boy1<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Parent 你会发现实例的构造函数居然是Parent。</span>而实际上，我们希望子类实例的构造函数是Child<span class="token punctuation">,</span>所以要记得修复构造函数指向。修复如下Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Child<span class="token punctuation">;</span></code></pre><blockquote><p>其实 Child.prototype = new Parent()<br>console.log(Child.prototype.<strong>proto</strong> === Parten.prototype); // true<br>在构造函数中创建对象时，这个对象中包含一个指针，这个指针指向构造函数中属性 prototype 的所对应的值。</p></blockquote><h4 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h4><ul><li>核心：原型式继承的 object 方法本质上是对参数对象的一个浅复制。</li><li>优点：父类方法可以复用</li><li>缺点：<ul><li>父类的引用属性会被所有子类实例共享</li><li>子类构建实例时不能向父类传递参数</li></ul></li></ul><h2 id="懒加载和预加载"><a href="#懒加载和预加载" class="headerlink" title="懒加载和预加载"></a>懒加载和预加载</h2><h3 id="懒加载："><a href="#懒加载：" class="headerlink" title="懒加载："></a>懒加载：</h3><p>原理：先将 img 标签中的 src 链接设为同一张图片（默认占位图片），将其真正的图片地址存储再 img 标签的自定义属性中（比如 data-src）。当 js 监听到该图片元素进入可视窗口时，即将自定义属性中的地址存储到 src 属性中，达到懒加载的效果。</p><p>js 监听到该图片元素进入可视窗口时：当前元素距离顶部距离&lt; 当前滚动距离+当前的窗口的高度</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isVisible</span><span class="token punctuation">(</span>$node<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> winH <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前窗口的高度</span>    scrollTop <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当前窗口的滚动距离</span>    offSetTop <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">offSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前窗口距离顶部距离</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>offSetTop <span class="token operator">&lt;</span> winH <span class="token operator">+</span> scrollTop<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="预加载："><a href="#预加载：" class="headerlink" title="预加载："></a>预加载：</h3><p>提前加载,当用户需要查看时可直接从本地缓存中渲染。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><h3 id="为什么会出现跨域问题"><a href="#为什么会出现跨域问题" class="headerlink" title="为什么会出现跨域问题"></a>为什么会出现跨域问题</h3><p>出于浏览器的同源策略限制。同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的 javascript 脚本和另外一个域的内容进行交互。</p><h3 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h3><p>所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）。</p><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>当一个请求 url 的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面 url 不同即为跨域。</p><h3 id="跨域的解决方案："><a href="#跨域的解决方案：" class="headerlink" title="跨域的解决方案："></a>跨域的解决方案：</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597595152704-b32b37a0-109d-4cf1-90ad-e3f520be3f8f.png#align=left&display=inline&height=448&margin=%5Bobject%20Object%5D&name=image.png&originHeight=448&originWidth=727&size=82160&status=done&style=none&width=727" alt="image.png"></p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>原理：<code>JSONP</code>  主要就是利用了  <code>script</code>  标签没有跨域限制的这个特性来完成的。</p><h4 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h4><h2 id="http-缓存和浏览器缓存："><a href="#http-缓存和浏览器缓存：" class="headerlink" title="http 缓存和浏览器缓存："></a>http 缓存和浏览器缓存：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597190312319-9a734ed7-94f8-44e0-81b3-eff39156d4e4.png#align=left&display=inline&height=409&margin=%5Bobject%20Object%5D&name=image.png&originHeight=613&originWidth=800&size=163634&status=done&style=none&width=534" alt="image.png"></p><h3 id="什么是-HTTP-缓存-？"><a href="#什么是-HTTP-缓存-？" class="headerlink" title="什么是 HTTP 缓存 ？"></a>什么是 HTTP 缓存 ？</h3><p>http 缓存指的是: 当客户端向服务器请求资源时，会先抵达浏览器缓存，如果浏览器有“要请求资源”的副本，就可以直接从浏览器缓存中提取而不是从原始服务器中提取这个资源。<br>常见的 http 缓存只能缓存 get 请求响应的资源，对于其他类型的响应则无能为力，所以后续说的请求缓存都是指 GET 请求。</p><p>http 缓存都是从第二次请求开始的。第一次请求资源时，服务器返回资源，并在 respone header 头中回传资源的缓存参数；第二次请求时，浏览器判断这些请求参数，命中强缓存就直接 200，否则就把请求参数加到 request header 头中传给服务器，看是否命中协商缓存，命中则返回 304，否则服务器会返回新的资源。<br><strong>1、http 缓存的分类：</strong><br>根据是否需要重新向服务器发起请求来分类，可分为(强制缓存，协商缓存) 根据是否可以被单个或者多个用户使用来分类，可分为(私有缓存，共享缓存) 强制缓存如果生效，不需要再和服务器发生交互，而协商缓存不管是否生效，都需要与服务端发生交互。下面是强制缓存和协商缓存的一些对比：<br><img src="//upload-images.jianshu.io/upload_images/4845448-ab0e961921da5694?imageMogr2/auto-orient/strip%7CimageView2/2/w/690/format/webp#align=left&display=inline&height=396&margin=%5Bobject%20Object%5D&originHeight=396&originWidth=690&status=done&style=none&width=690" alt=""><br>image</p><p><strong>1.1、强制缓存</strong><br>强制缓存在缓存数据未失效的情况下（即 Cache-Control 的 max-age 没有过期或者 Expires 的缓存时间没有过期），那么就会直接使用浏览器的缓存数据，不会再向服务器发送任何请求。强制缓存生效时，http 状态码为 200。这种方式页面的加载速度是最快的，性能也是很好的，但是在这期间，如果服务器端的资源修改了，页面上是拿不到的，因为它不会再向服务器发请求了。这种情况就是我们在开发种经常遇到的，比如你修改了页面上的某个样式，在页面上刷新了但没有生效，因为走的是强缓存，所以 Ctrl + F5 一顿操作之后就好了。 跟强制缓存相关的 header 头属性有（Pragma/Cache-Control/Expires）<br><img src="//upload-images.jianshu.io/upload_images/4845448-217723260f75ed90?imageMogr2/auto-orient/strip%7CimageView2/2/w/800/format/webp#align=left&display=inline&height=228&margin=%5Bobject%20Object%5D&originHeight=228&originWidth=800&status=done&style=none&width=800" alt=""></p><p>缓存是一种保存资源副本并在下次请求时直接使用该副本的技术。当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。这样带来的好处有：缓解服务器端压力，提升性能(获取资源的耗时更短了)。</p><h3 id="HTTP-缓存的作用"><a href="#HTTP-缓存的作用" class="headerlink" title="HTTP 缓存的作用"></a>HTTP 缓存的作用</h3><p>我们都知道浏览器是基于 HTTP 协议和服务端进行通信的，一个网站一旦同时请求过多或者请求过大就容易造成页面渲染时长过长等性能问题，而且并非所有资源都需要实时更新的，将长久或一段时间内的资源进行缓存，能很大的缓解服务器压力和提升网站性能。<br>毫不夸张的说，HTTP 缓存是达到高性能的重要组成部分。</p><blockquote><p>注意：缓存需要合理配置，因为并不是所有资源都是永久不变的：重要的是对一个资源的缓存应截止到其下一次发生改变（即不能缓存过期的资源）。</p></blockquote><h3 id="HTTP-头缓存相关字段及优先级"><a href="#HTTP-头缓存相关字段及优先级" class="headerlink" title="HTTP 头缓存相关字段及优先级"></a>HTTP 头缓存相关字段及优先级</h3><p>强缓存：<strong>Expires: Date/Cache-Control：max-age=N</strong><br>协商缓存：<strong>Last-Modified：Date</strong>和<strong>Etag：String</strong><br>通过查询标准我们知道 Cache-Control 和 Etag 属于 HTTP1.1 版本，Expires 和 Last-Modified 属于 HTTP1.0 版本，所以得出以下优先级：<br>强缓存：<strong>Cache-Control &gt; Expires</strong><br>协商缓存：<strong>Etag &gt; Last-Modified</strong></p><blockquote><p><strong>注意：</strong><br>Expires 存在的缺陷是返回的到期时间是服务器端的时间，可能与客户端的时间有较大的时间差，所以在 HTTP1.1 版开始使用 Cache-Control: max-age=秒替代<br>Last-Modified 的缺陷：由于只能精确到秒，如果一个文件在 1 秒内多次修改，这时客户端无法识别，因此 HTTP1.1 版本使用 Etag 标识资源内容是否有变更来确认资源是否需要更新，相对来说更加精确</p></blockquote><h3 id="强缓存与协商缓存"><a href="#强缓存与协商缓存" class="headerlink" title="强缓存与协商缓存"></a>强缓存与协商缓存</h3><p><strong>强缓存</strong>：资源一旦被<strong>强缓存</strong>，在缓存时间内，浏览器发起二次请求时会直接读取本地缓存，不与服务器进行通讯。 强缓存时间过期的，浏览器会判断资源的响应头是否有 Last-Modified 和 Etag 字段，有的话执行<strong>协商缓存</strong>策略<br><strong>协商缓存</strong>：如果响应头中的包括有 Etag 和 Last-Modified 字段，则客户端将 If-None-Match：Etag 的值和 If-Modified-Since：Last-Modified 的值添加到请求头发送给服务器，由源服务器校验，如果资源未过期则返回 304 状态码，浏览器直接使用缓存，否则返回 200OK 状态码和新资源。<br>当两种情况都存在时，<strong>强缓存优先级要高于协商缓存</strong>。</p><h3 id="Chrome-浏览器的三种缓存策略"><a href="#Chrome-浏览器的三种缓存策略" class="headerlink" title="Chrome 浏览器的三种缓存策略"></a>Chrome 浏览器的三种缓存策略</h3><p>_选择 Chrome 是因为它是现在最流行的网页调试工具也是最多人用的浏览器。_Chrome 浏览器返回缓存 http 状态码总共有以下三个 1、<strong>200 from memory cache</strong>客户端不与服务器通讯，直接从内存中读取缓存。此时的数据时缓存到内存中的，当关闭浏览器后，数据自然就被当垃圾回收清空。<br>2、<strong>200 from disk cache</strong>客户端不与服务器通讯，直接从磁盘中读取缓存，因为数据存在磁盘中，就算关闭浏览器数据还是存在，下次打开只要数据不过期就可以直接读取。<br>3、<strong>304 Not Modified</strong>客户端与服务器通讯，服务器验证资源是否需要更新，如果不需要更新服务器返回 304 状态码，然后客户端直接从缓存中读取数据</p><blockquote><p>注意：经过测试，我发现 Safari 和 Firefox 都有三种缓存策略，IE 和其他浏览器大家可以各自测试一下</p></blockquote><h3 id="浏览器三种缓存示例图"><a href="#浏览器三种缓存示例图" class="headerlink" title="浏览器三种缓存示例图"></a>浏览器三种缓存示例图</h3><p>Chrome 和 Safari 似乎没有办法在浏览器中直接查看缓存情况，因此只能实践中查看。 Chrome 示例图: 状态码：<strong>200 OK</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456008-7a79c689-007d-4d84-a29b-bf35af5d9446.webp#align=left&display=inline&height=436&margin=%5Bobject%20Object%5D&originHeight=436&originWidth=805&size=0&status=done&style=none&width=805" alt="">状态码：<strong>200 from memeory cache</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456038-353ee511-e169-45b7-b11c-fd5ced110fe3.webp#align=left&display=inline&height=430&margin=%5Bobject%20Object%5D&originHeight=430&originWidth=721&size=0&status=done&style=none&width=721" alt="">状态码：<strong>200 from disk cache</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455996-e6b3b611-6fc6-4150-ba58-e70600d216a7.webp#align=left&display=inline&height=437&margin=%5Bobject%20Object%5D&originHeight=437&originWidth=809&size=0&status=done&style=none&width=809" alt="">状态码：<strong>304 Not Modified</strong><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455976-3514054f-962c-4fa0-a701-d1fafd3c8d9e.webp#align=left&display=inline&height=369&margin=%5Bobject%20Object%5D&originHeight=369&originWidth=780&size=0&status=done&style=none&width=780" alt="">))<br>Safari 示例图： 响应头：<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456010-891b40f2-e533-4154-9dca-0ec262bc4b60.webp#align=left&display=inline&height=564&margin=%5Bobject%20Object%5D&originHeight=564&originWidth=1244&size=0&status=done&style=none&width=1244" alt="">状态码：200 OK<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456006-5b41e3c7-ab68-49e7-ac41-aad156d64252.webp#align=left&display=inline&height=302&margin=%5Bobject%20Object%5D&originHeight=302&originWidth=1280&size=0&status=done&style=none&width=1280" alt="">状态码：200 内存<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456020-93bcf783-4d71-4632-b424-d424885d47d3.webp#align=left&display=inline&height=460&margin=%5Bobject%20Object%5D&originHeight=460&originWidth=1242&size=0&status=done&style=none&width=1242" alt="">状态码：200 磁盘<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455994-1bbd166a-2051-4080-952e-bbd5fe5fccf4.webp#align=left&display=inline&height=456&margin=%5Bobject%20Object%5D&originHeight=456&originWidth=1236&size=0&status=done&style=none&width=1236" alt=""><br>Firefox：在 url 上输入 about:cache 可以看到对应的缓存情况，大家可以试一下<br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455993-71d57da2-268c-4a75-88bc-98f922b94c15.webp#align=left&display=inline&height=941&margin=%5Bobject%20Object%5D&originHeight=941&originWidth=1280&size=0&status=done&style=none&width=1280" alt="">从截图中可以看到 Firefox 也分为内存缓存和磁盘缓存，304Not Modified 自然也是有的。<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455990-8d7c53b1-2688-4cba-bce7-21076f0e3829.webp#align=left&display=inline&height=347&margin=%5Bobject%20Object%5D&originHeight=347&originWidth=1280&size=0&status=done&style=none&width=1280" alt="">资源被强缓存后状态码依然是 200 OK，不过会在传输列下显示已缓存，但是无法看出是内存缓存还是磁盘缓存。<img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190455999-5a96cafe-9a51-4dac-a26c-bea1cac98990.webp#align=left&display=inline&height=309&margin=%5Bobject%20Object%5D&originHeight=309&originWidth=1280&size=0&status=done&style=none&width=1280" alt="">Firefox 的 304 与 Chrome 和 Safari 差别不大。</p><h3 id="三种缓存策略实际执行的条件"><a href="#三种缓存策略实际执行的条件" class="headerlink" title="三种缓存策略实际执行的条件"></a>三种缓存策略实际执行的条件</h3><p>我在网上看到有人写文章说 <strong>js、图片和字体保存在内存中而 css 则保存在磁盘</strong>，很明显，只要自己稍微测试一下就知道这种说法是站不住脚的，那么这三种情况究竟是怎样的呢？<br>经过简单的测试以后我发现这三种策略并不复杂，默认配置情况下，Chrome 第一次请求资源后，如果资源的响应头有 Cache-Control 或者 Expires 且有效期大于现在，则加载数据后将强缓存资源到内存和磁盘。<br>刷新页面，Chrome 发起整个页面的二次请求后，通过开发者工具可以看到<strong>强缓存资源</strong>都会从内存进行读取，这就是<em>200 from memory cache</em>的情况。<br>示例：<br>这时关闭浏览器后，重新打开浏览器并打开关闭前的页面，通过开发者工具可以看到之前<strong>强缓存资源</strong>都会从磁盘中读取，这是因为关闭了浏览器后系统回收了内存资源，因此内存没有了之前的<strong>强缓存资源</strong>，需要从磁盘中读取，这就是<em>200 from disk cache</em>的情况。<br>示例：<br>如果这时使用 ctrl + f5 强刷页面则会发现全部资源都是 200 OK 状态要从服务器中获取新数据。<br>304 Not Modified 的情况则完全不同，如果资源的响应头是 Last-Modified 或 Etag，第一次请求资源后缓存到本地磁盘，但第二次也必须发起请求到服务器进行查询该资源是否过期或被修改过，当服务器验证资源没有过期后才会返回 304 Not Modified 状态码，同时响应体为空，这样可以节省流量并提高响应速度，客户端接收到 304 状态码后从本地读取数据，因此 304 比 200 from cache 响应速度要慢，但比 200 OK 快得多。</p><h3 id="Chrome-浏览器缓存机制流程图"><a href="#Chrome-浏览器缓存机制流程图" class="headerlink" title="Chrome 浏览器缓存机制流程图"></a>Chrome 浏览器缓存机制流程图</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1597190456008-d90347ea-0343-4d19-9929-b1eaf14665bf.webp#align=left&display=inline&height=844&margin=%5Bobject%20Object%5D&originHeight=844&originWidth=1280&size=0&status=done&style=none&width=1280" alt=""></p><p>伪类和伪元素</p><p>伪类：其核心就是用来选择那些不能够被普通选择器选择的文档之外的元素，比如:hover,:active。<br>伪元素：其核心就是需要创建通常不存在于文档中的元素，比如::before。<br>区别：<br>针对作用选择器的效果，伪类需要添加类来达到效果，而伪元素需要增加元素，所以一个叫伪类，另外一个叫伪元素。</p><ul><li>伪类和伪元素都是用来表示文档树以外的”元素”。</li><li>伪类和伪元素分别用单冒号<code>:</code>和双冒号<code>::</code>来表示。</li><li>伪类和伪元素的区别，最关键的点在于如果没有伪元素(或伪类)，是否需要添加元素才能达到目的，如果是则是伪元素，反之则是伪类。</li></ul><p>浏览器渲染的过程：</p><ol><li>处理 HTML 标记并构建 DOM 树。</li><li>处理 CSS 标记并构建 CSSOM 树。</li><li>将 DOM 与 CSSOM 合并成一个渲染树。</li><li>根据渲染树来布局，以计算每个节点的几何信息。</li><li>将各个节点绘制到屏幕上。</li></ol><p>需要明白，这五个步骤并不一定一次性顺序完成。如果 DOM 或 CSSOM 被修改，以上过程需要重复执行，这样才能计算出哪些像素需要在屏幕上进行重新渲染。实际页面中，CSS 与 JavaScript 往往会多次修改 DOM 和 CSSOM，下面就来看看它们的影响方式。</p><h2 id="var、let、const-区别"><a href="#var、let、const-区别" class="headerlink" title="var、let、const 区别"></a>var、let、const 区别</h2><p>var 申明的是全局作用域，全局变量<br><strong>let 声明的变量拥有块级作用域，局部变量</strong><br>const 就是用来声明常量，<strong>块级作用域，局部变量</strong><br>**<br>var 能够进行变量提升，是全局变量，能够重新申明你变量，let ，const 都是块级作用域，不允许重复申明，重复申明会报错，没有变量提升，const 是常量，一旦申明就不能被修改，并且需要有初始值。</p><table><thead><tr><th align="center">声明方式</th><th align="center">变量提升</th><th align="center">暂时性死区</th><th align="center">重复声明</th><th align="center">初始值</th><th align="center">作用域</th></tr></thead><tbody><tr><td align="center">var</td><td align="center">允许</td><td align="center">不存在</td><td align="center">允许</td><td align="center">不需要</td><td align="center">除块级</td></tr><tr><td align="center">let</td><td align="center">不允许</td><td align="center">存在</td><td align="center">不允许</td><td align="center">不需要</td><td align="center">块级</td></tr><tr><td align="center">const</td><td align="center">不允许</td><td align="center">存在</td><td align="center">不允许</td><td align="center">需要</td><td align="center">块级</td></tr></tbody></table><ul><li>变量提升：变量可在声明之前使用。</li></ul><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//正常运行，控制台输出 undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: b is not defined</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: c is not defined</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>var</code> 命令经常会发生<strong>变量提升</strong>现象，按照一般逻辑，变量应该在声明之后使用才对。为了纠正这个现象，ES6 规定 <code>let</code> 和 <code>const</code> 命令<strong>不发生变量提升</strong>，使用 <code>let</code> 和 <code>const</code> 命令声明变量之前，该变量是不可用的。主要是为了减少运行时错误，防止变量声明前就使用这个变量，从而导致意料之外的行为。</p></blockquote><ul><li>暂时性死区(形成封闭式死区)<ul><li>概述：如果在代码块中存在  <code>let</code>  或  <code>const</code>  命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  tmp <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//报错，Uncaught ReferenceError: tmp is not defined</span>  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>这段代码的原意是在 if 内定义外部的 <code>tmp</code> 为 ‘abc’。<br>但现实是，存在全局变量 <code>tmp</code>，但是块级作用域内 <code>let</code> 又声明了一个 <code>tmp</code>变量，导致后者被绑定在这个块级作用域中，所以在 <code>let</code> 声明变量前，对 <code>tmp</code> 赋值就报错了。</p></blockquote><ul><li>重复声明：指在相同作用域内，重复声明同一个变量。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span>  <span class="token keyword">var</span> PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'PI' has already been declared</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当调用func()时报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'a' has already been declared</span>  <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught SyntaxError: Identifier 'PI' has already been declared</span><span class="token punctuation">}</span></code></pre><blockquote><p><code>let</code>  和  <code>const</code>  命令声明的变量不允许重复声明，但是 var 可以重复申明</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 5</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 10</span></code></pre><blockquote><p>因为  <code>var</code>  命令没有块级作用域，所以 for 循环括号内的变量  <code>i</code>  会覆盖外层  <code>i</code>，而且  <code>var</code>  允许重复声明，所以这段代码中  <code>i</code>  被声明了两次,<code>i</code>  的最终结果就被 for 循环的 i 给覆盖了。</p></blockquote><ul><li>初始值<ul><li>由于  <code>const</code>  声明的是只读的常量，一旦声明，就必须立即初始化，声明之后值不能改变。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//一旦被申明，就不能再改变</span><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Uncaught TypeError: Assignment to constant variable.</span><span class="token comment" spellcheck="true">//必须要有初始值</span><span class="token keyword">const</span> PI<span class="token punctuation">;</span>PI<span class="token operator">=</span><span class="token number">3.1415</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Uncaught SyntaxError: Missing initializer in const declaration</span></code></pre><ul><li>作用域</li></ul><p>在 ES5 中只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。<br>第一种场景，内层变量可能会覆盖外层变量：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处于全局作用域</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//处于函数作用域</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><blockquote><p>function 内部的 2 个  <code>tmp</code>  变量处在同一函数作用域，由于变量提升，导致函数作用域中的  <code>tmp</code>  覆盖全局作用域中的  <code>tmp</code>，所以，f()输出结果为 undefined。</p></blockquote><p>第二种场景，用来计数的循环变量泄露为全局变量（前面在重复声明中提到的）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//上面代码中，变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 5</span></code></pre><h2 id="冒泡事件和捕获事件"><a href="#冒泡事件和捕获事件" class="headerlink" title="冒泡事件和捕获事件"></a>冒泡事件和捕获事件</h2><h3 id="冒泡事件：（由内-gt-外）"><a href="#冒泡事件：（由内-gt-外）" class="headerlink" title="冒泡事件：（由内-&gt;外）"></a>冒泡事件：（由内-&gt;外）</h3><p>微软提出了名为<strong>事件冒泡</strong>(event bubbling)的事件流。事件会从最内层的元素开始发生，一直向上传播，直到 document 对象。<br><strong>p -&gt; div -&gt; body -&gt; html -&gt; document</strong></p><h3 id="事件捕获（由外-gt-内）"><a href="#事件捕获（由外-gt-内）" class="headerlink" title="事件捕获（由外-&gt;内）"></a>事件捕获（由外-&gt;内）</h3><p>网景提出另一种事件流名为<strong>事件捕获</strong>(event capturing)。与事件冒泡相反，事件会从最外层开始发生，直到<strong>最具体的元素</strong>。<br><strong>事件冒泡和事件捕获过程图：</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597280637497-1413d9de-e58a-4499-8fd1-c3cf40af2a07.png#align=left&display=inline&height=357&margin=%5Bobject%20Object%5D&name=image.png&originHeight=357&originWidth=394&size=45332&status=done&style=none&width=394" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 解决GitHub速度慢问题</title>
      <link href="/leader755/30871.html"/>
      <url>/leader755/30871.html</url>
      
        <content type="html"><![CDATA[<h2 id="解决方案是修改-hosts，按照以下三步来操作"><a href="#解决方案是修改-hosts，按照以下三步来操作" class="headerlink" title="解决方案是修改 hosts，按照以下三步来操作"></a>解决方案是修改 hosts，按照以下三步来操作</h2><h3 id="1-打开-hosts-文件："><a href="#1-打开-hosts-文件：" class="headerlink" title="1.打开 hosts 文件："></a>1.打开 hosts 文件：</h3><p>终端执行, MacOS 的登录用户不是 root，没有最高权限。修改一些系统保护的资源时，需要临时切换到 root 用户。root 具有最高权限，可以做任何事情。此时需要使用 sudo 命令。</p><pre class=" language-javascript"><code class="language-javascript">sudo vim <span class="token operator">/</span>etc<span class="token operator">/</span>hosts</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596597386450-28553ab4-298d-455b-bbc7-c1f86aa7a0b8.png#align=left&display=inline&height=362&margin=%5Bobject%20Object%5D&name=image.png&originHeight=724&originWidth=1120&size=236848&status=done&style=none&width=560" alt="image.png"></p><h3 id="2-获取-github-的-ip"><a href="#2-获取-github-的-ip" class="headerlink" title="2.获取 github 的 ip"></a>2.获取 github 的 ip</h3><pre><code> 浏览器访问[https://www.ipaddress.com/](https://www.ipaddress.com/),分别输入以下 ip:(ip 以自己查到为准)</code></pre><blockquote><p>github.com<br>github.global.ssl.fastly.net<br>codeload.github.com</p></blockquote><p>获取到的对应的 ip，将以下追加到 host 文件后面。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token number">140.82</span><span class="token punctuation">.</span><span class="token number">113.4</span>    github<span class="token punctuation">.</span>com<span class="token number">199.232</span><span class="token punctuation">.</span><span class="token number">69.194</span>  github<span class="token punctuation">.</span>global<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>fastly<span class="token punctuation">.</span>net<span class="token number">140.82</span><span class="token punctuation">.</span><span class="token number">114.9</span>    codeload<span class="token punctuation">.</span>github<span class="token punctuation">.</span>com</code></pre><blockquote><p>mac 上使用 vim 命令进行修改保存：<br>在输入 sudo vim /etc/hosts，进入页面后，按 o 建，进行输入，修改完成后按 ESC 建，:wq 保存退出。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596598235246-bf1c3ead-123e-4339-8f4e-7e6bec14c5d7.png#align=left&display=inline&height=360&margin=%5Bobject%20Object%5D&name=image.png&originHeight=720&originWidth=1200&size=246307&status=done&style=none&width=600" alt="image.png"></p><h3 id="3-Mac-系统刷新-DNS-缓存，Windows-系统命令自行查找"><a href="#3-Mac-系统刷新-DNS-缓存，Windows-系统命令自行查找" class="headerlink" title="3.Mac 系统刷新 DNS 缓存，Windows 系统命令自行查找."></a>3.Mac 系统刷新 DNS 缓存，Windows 系统命令自行查找.</h3><pre class=" language-javascript"><code class="language-javascript">sudo killall <span class="token operator">-</span>HUP mDNSResponder</code></pre><h3 id="4-可以试试-github-的访问速度了"><a href="#4-可以试试-github-的访问速度了" class="headerlink" title="4.可以试试 github 的访问速度了"></a>4.可以试试 github 的访问速度了</h3>]]></content>
      
      
      <categories>
          
          <category> 访问速度 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给hexo博客添加PWA支持</title>
      <link href="/leader755/19561.html"/>
      <url>/leader755/19561.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><hr><p><strong>PWA(Progressive Web App)的中文名叫做渐进式网页应用，早在 2014 年， W3C 公布过 Service Worker 的相关草案，但是其在生产环境被 Chrome 支持是在 2015 年。因此，如果我们把 PWA 的关键技术之一 Service Worker 的出现作为 PWA 的诞生时间，那就应该是 2015 年。</strong><br><strong>自 2015 年以来，PWA 相关的技术不断升级优化，在用户体验和用户留存两方面都提供了非常好的解决方案。PWA 可以将 Web 和 App 各自的优势融合在一起：渐进式、可响应、可离线、实现类似 App 的交互、即时更新、安全、可以被搜索引擎检索、可推送、可安装、可链接。</strong></p><p><strong>由于 hexo 为静态博客，因此不需要具备推送功能（其实是我没搞懂）。因此 PWA 的特性包括其渐进式、可离线，可以作为提高网站体验和提高网站家在速度的一个方法。因此下面将从其主要内容和 hexo 如何安装两个方面以“吃白饭的休伯利安号”为例来简单演示一遍安装过程。</strong></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><hr><h3 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h3><p>什么是渐进式，即将传统的 web 应用，应用现代的技术和方法使之在能够有桌面应用一般的体验，即为渐进式 web 应用。渐进式 web 应用可以同时运行在传统的浏览器上，像普通的网站一样进行浏览和操作；其同时也可以运行在现代功能完善的浏览器中，可以使其具备更多的效果和功能。比较常见的有<strong>可安装</strong>，即在支持的浏览器和操作系统上可以生成访问图标，通过图标可以可桌面应用一样访问应用；<strong>消息推送</strong>，即访问应用时服务器端可以通过应用的后台进程主动向客户端推送消息，类似于桌面应用的消息队列。</p><h3 id="可离线"><a href="#可离线" class="headerlink" title="可离线"></a>可离线</h3><p>支持应用离线访问，即正常访问应用时，后台进程会自动缓存内容，下次访问时应用优先从缓存区读取数据，然后是进行 web 请求。因此可离线实质上充当了 web 代理服务器的职责，先是将正常请求代理到缓存区，再是将缓存区不足的文件进行正常的网络请求，通过此方法实现了离线的目标。根据可离线的规律，应用在一次访问缓存之后二次访问即可断网。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><hr><h3 id="1-gt-安装-pwa"><a href="#1-gt-安装-pwa" class="headerlink" title="1&gt;安装 pwa"></a>1&gt;安装 pwa</h3><p>离线使用依赖<code>Service Work</code>，其本质是一段运行在并行于主进程的后台进程上，他不参与 web 交互功能，主要职责是和服务器交互，和指示缓存的内容。其详细的生命周期和原理文档详见：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="noopener">Using Service Workers</a>。可以通过文档中的生命周期对这段后台脚本进行深度开发。<br>hexo 为静态博客，因此只需要实现离线使用即可，不需要进行消息推送，因此可以使用固定服务注册脚本，在 hexo 中服务注册脚本有着专门的插件进行生成：</p><table><thead><tr><th align="center">hexo-offline</th><th align="center">hexo-pwa</th><th align="center">hexo-service-worker</th></tr></thead><tbody><tr><td align="center">hexo 的离线插件不包括安装</td><td align="center">百度出的 PWA 综合插件，支持同时生成 manifest.json，有很多的配置项</td><td align="center">和 hexo-offline 类似</td></tr></tbody></table><p>三个插件的原理相同，通过注册 SW 服务，配合<code>manifest.json</code>，文件达到<strong>可安装</strong>和<strong>可离线</strong>的功能，本站使用的是 hexo-pwa 插件，下面是插件使用的细节：</p><blockquote><p><code>hexo@4.2.0</code>  目前赞不兼容  <code>hexo-pwa</code>,使用  <code>hexo@4.2.0</code>  版本的用户推荐降级到  <code>hexo@4.1.1</code></p></blockquote><h4 id="1-gt-检查-hexo-版本"><a href="#1-gt-检查-hexo-版本" class="headerlink" title="1&gt;检查 hexo 版本"></a>1&gt;检查 hexo 版本</h4><pre class=" language-javascript"><code class="language-javascript">hexo <span class="token operator">-</span>v<span class="token comment" spellcheck="true">//注意如果hexo版本大于4.11，使用以下命令重装 hexo</span>npm install hexo@<span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">--</span>save</code></pre><h4 id="2-gt-安装-hexo-pwa"><a href="#2-gt-安装-hexo-pwa" class="headerlink" title="2&gt;安装 hexo-pwa"></a>2&gt;安装 hexo-pwa</h4><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>pwa <span class="token operator">--</span>save</code></pre><p>##</p><p>###</p><h3 id="2-gt-新建-manifest-json-文件"><a href="#2-gt-新建-manifest-json-文件" class="headerlink" title="2&gt;新建 manifest.json 文件"></a>2&gt;新建 manifest.json 文件</h3><p>首先要实现 PWA 的可安装性，需要有一个清单文件<code>manifest.json</code>。<code>manifest.json</code>是一个简单的<code>json</code>文件，它描述了我们的图标在主屏幕上如何显示，以及图标点击进去的启动页是什么，自动生成<code>manifest.json</code>的工具：<a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">manifest.json 生成工具</a>（需要梯子），本站的 JSON 格式如下所示：</p><p>在站点根目录中创建<a href="https://app-manifest.firebaseapp.com/" target="_blank" rel="noopener">manifest.json</a>文件，并将以下内容放入其中，<br>在站点根目录中创建 images 文件夹 放入生成的 icons 图标</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Autumn cicada Blogs"</span><span class="token punctuation">,</span>  <span class="token string">"short_name"</span><span class="token punctuation">:</span> <span class="token string">"Autumn cicada Blogs"</span><span class="token punctuation">,</span>  <span class="token string">"theme_color"</span><span class="token punctuation">:</span> <span class="token string">"#3a311c"</span><span class="token punctuation">,</span>  <span class="token string">"background_color"</span><span class="token punctuation">:</span> <span class="token string">"#3a311c"</span><span class="token punctuation">,</span>  <span class="token string">"display"</span><span class="token punctuation">:</span> <span class="token string">"standalone"</span><span class="token punctuation">,</span>  <span class="token string">"Scope"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token string">"start_url"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token string">"icons"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-72x72.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"72x72"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-96x96.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"96x96"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-128x128.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"128x128"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-144x144.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"144x144"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-152x152.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"152x152"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-192x192.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"192x192"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-384x384.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"384x384"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/icon-512x512.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"512x512"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/icons/apple-touch-icon.png"</span><span class="token punctuation">,</span>      <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"180x180"</span><span class="token punctuation">,</span>      <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"splash_pages"</span><span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span></code></pre><p>其中：</p><blockquote><ul><li>start_url 可以设置启动网址</li><li>icons 可以设置各个分辨率下页面的图标，适配不同的尺寸的路径</li><li>background_color 会设置背景颜色， Chrome 在网络应用启动后会立即使用此颜色，这一颜色将保留在屏幕上，直至网络应用首次呈现为止。</li><li>theme_color 会设置主题颜色</li><li>display 设置启动样式</li></ul></blockquote><h3 id="3-gt-新建-sw-js-文件"><a href="#3-gt-新建-sw-js-文件" class="headerlink" title="3&gt;新建 sw.js 文件"></a>3&gt;新建 sw.js 文件</h3><p>在站点根目录下新建一个名为 sw.js 的文件，在文件里填入一下内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">importScripts</span><span class="token punctuation">(</span><span class="token string">"https://g.alicdn.com/kg/workbox/3.3.0/workbox-sw.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>workbox<span class="token punctuation">)</span> <span class="token punctuation">{</span>  workbox<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modulePathPrefix<span class="token punctuation">:</span> <span class="token string">"https://g.alicdn.com/kg/workbox/3.3.0/"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  workbox<span class="token punctuation">.</span>precaching<span class="token punctuation">.</span><span class="token function">precache</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"/index.html"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"^https?://m-blog.cn/?$"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">networkFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">".*.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">networkFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  workbox<span class="token punctuation">.</span>routing<span class="token punctuation">.</span><span class="token function">registerRoute</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">".*.(?:js|css|jpg|png|gif)"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    workbox<span class="token punctuation">.</span>strategies<span class="token punctuation">.</span><span class="token function">staleWhileRevalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>将其中域名改为你自己主页的域名：<code>https?://m-blog.cn/</code>改为你的域名，格式要和我的一样。</p></blockquote><h3 id="4-gt-配置站点根目录下的-config-yml-配置文件"><a href="#4-gt-配置站点根目录下的-config-yml-配置文件" class="headerlink" title="4&gt;配置站点根目录下的 _config.yml 配置文件"></a>4&gt;配置站点根目录下的 _config.yml 配置文件</h3><p>注意路径要根据实际情况变化。</p><pre class=" language-javascript"><code class="language-javascript"># PWA配置  npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>pwapwa<span class="token punctuation">:</span>  manifest<span class="token punctuation">:</span>    path<span class="token punctuation">:</span> <span class="token operator">/</span>manifest<span class="token punctuation">.</span>json  #当前 manifest<span class="token punctuation">.</span>json文件在根目录    body<span class="token punctuation">:</span>      name<span class="token punctuation">:</span> Autumn cicada Blogs      short_name<span class="token punctuation">:</span> Autumn cicada Blogs      theme_color<span class="token punctuation">:</span> white      background_color<span class="token punctuation">:</span> white      display<span class="token punctuation">:</span> standalone      orientation<span class="token punctuation">:</span> portrait      scope<span class="token punctuation">:</span> <span class="token operator">/</span>      start_url<span class="token punctuation">:</span> <span class="token operator">/</span>      icons<span class="token punctuation">:</span>        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>72x72<span class="token punctuation">.</span>png  #当前 images文件夹在根目录          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png          sizes<span class="token punctuation">:</span> 72x72        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>72x72<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 72x72<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>96x96<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 96x96<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>128x128<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 128x128<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>144x144<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 144x144<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>152x152<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 152x152<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>192x192<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 192x192<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>384x384<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 384x384<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png        <span class="token operator">-</span> src<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>icons<span class="token operator">/</span>icon<span class="token operator">-</span>512x512<span class="token punctuation">.</span>png<span class="token punctuation">,</span>          sizes<span class="token punctuation">:</span> 512x512<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> image<span class="token operator">/</span>png  serviceWorker<span class="token punctuation">:</span>    path<span class="token punctuation">:</span> <span class="token operator">/</span>sw<span class="token punctuation">.</span>js  #当前 sw<span class="token punctuation">.</span>js 文件在根目录    preload<span class="token punctuation">:</span>      urls<span class="token punctuation">:</span>        <span class="token operator">-</span> <span class="token operator">/</span>      posts<span class="token punctuation">:</span> <span class="token number">12</span>    opts<span class="token punctuation">:</span>      networkTimeoutSeconds<span class="token punctuation">:</span> <span class="token number">30</span>    routes<span class="token punctuation">:</span>      <span class="token operator">-</span> pattern<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>js<span class="token operator">/</span>regexp <span class="token regex">/hm.baidu.com/</span>        strategy<span class="token punctuation">:</span> networkOnly      <span class="token operator">-</span> pattern<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>js<span class="token operator">/</span>regexp <span class="token regex">/www.google-analytics.com/</span>        strategy<span class="token punctuation">:</span> networkOnly      <span class="token operator">-</span> pattern<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>js<span class="token regex">/regexp /</span><span class="token punctuation">.</span><span class="token operator">*</span>\<span class="token punctuation">.</span><span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>gif<span class="token punctuation">)</span>$<span class="token operator">/</span>        strategy<span class="token punctuation">:</span> cacheFirst      <span class="token operator">-</span> pattern<span class="token punctuation">:</span> <span class="token operator">!</span><span class="token operator">!</span>js<span class="token operator">/</span>regexp <span class="token regex">/\//</span>        strategy<span class="token punctuation">:</span> networkFirst  priority<span class="token punctuation">:</span> <span class="token number">5</span></code></pre><h3 id="5-gt-检查-PWA-服务"><a href="#5-gt-检查-PWA-服务" class="headerlink" title="5&gt;检查 PWA 服务"></a>5&gt;检查 PWA 服务</h3><pre class=" language-javascript"><code class="language-javascript">hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span class="token comment" spellcheck="true">//成功后可以执行 ，发布。</span>hexo d</code></pre><blockquote><p>按<code>F12</code>或者<code>Ctrl + Shift + I</code>或者直接鼠标右键弹出的菜单中，有个检查，鼠标点击，就可以进入开发者调试模式，然后选择<code>Application</code>—&gt;<code>Service Workers</code>，查看是否成功？</p></blockquote><p>以下 分别是本地版和在线版成功的标识<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596352726824-1f14ab5b-af44-4e71-a5d4-04e87fb4eeaa.png#align=left&display=inline&height=510&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1020&originWidth=1522&size=198650&status=done&style=none&width=761" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1596352652911-78e9aa18-1666-47a8-9afe-5db07dc0a273.png#align=left&display=inline&height=408&margin=%5Bobject%20Object%5D&name=image.png&originHeight=816&originWidth=1466&size=163517&status=done&style=none&width=733" alt="image.png"></p><p>##</p><h3 id="6-gt-附加增强功能-可选"><a href="#6-gt-附加增强功能-可选" class="headerlink" title="6&gt;附加增强功能(可选)"></a>6&gt;附加增强功能(可选)</h3><h4 id="添加-IOS-Safari-PWA-图标支持"><a href="#添加-IOS-Safari-PWA-图标支持" class="headerlink" title="添加 IOS Safari PWA 图标支持"></a>添加 IOS Safari PWA 图标支持</h4><p>在<code>manifest.json</code>文件中添加下面的代码，代码是关于<code>apple-touch-icon</code>图标的</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    <span class="token string">"src"</span><span class="token punctuation">:</span> <span class="token string">"/images/apple-touch-icon.png"</span><span class="token punctuation">,</span>    <span class="token string">"sizes"</span><span class="token punctuation">:</span> <span class="token string">"180x180"</span><span class="token punctuation">,</span>    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"image/png"</span><span class="token punctuation">}</span></code></pre><blockquote><p>图标大小设置为<code>180 x 180</code></p></blockquote><p>####</p><h4 id="修改-head-ejs-文件"><a href="#修改-head-ejs-文件" class="headerlink" title="修改 head.ejs 文件"></a>修改 head.ejs 文件</h4><p>在<code>themes/halo/layout/_partial/head.ejs</code>，在 head.ejs 文件中的<code>&lt;head&gt;&lt;/head&gt;</code>标签之间添加下面的代码：</p><pre><code>&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;&lt;%- theme.appletouchicon %&gt;&quot;&gt;&lt;meta name=&quot;theme-color&quot; content=&quot;white&quot;/&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;</code></pre><ul><li>theme-color：中的 content 对应的是你 <code>manifest.json</code> 中的 <code>theme_color</code> 的值</li><li>viewport: 用于针对移动屏幕优化 PWA 应用 详细链接<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsitoi.cn%2Fgo.html%3Fu%3DaHR0cHM6Ly93ZWIuZGV2L3ZpZXdwb3J0Lz91dG1fc291cmNlPWxpZ2h0aG91c2UmdXRtX21lZGl1bT11bmtub3du" target="_blank" rel="noopener">viewport</a></li><li>apple-touch-icon：配置 <code>apple-touch-icon</code> 图标链接</li></ul><p><strong>在**</strong>主题配置文件<code>_config.yml</code>*<strong>*下添加下面的代码</strong></p><pre class=" language-javascript"><code class="language-javascript">appletouchicon<span class="token punctuation">:</span> <span class="token operator">/</span>images<span class="token operator">/</span>apple<span class="token operator">-</span>touch<span class="token operator">-</span>icon<span class="token punctuation">.</span>png #你图片的路径</code></pre><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><pre class=" language-javascript"><code class="language-javascript">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">-</span>d</code></pre><p>参考文档：<br>1&gt; <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fsitoi.cn%2Fposts%2F49115.html" target="_blank" rel="noopener">https://sitoi.cn/posts/49115.html</a><br>2&gt; <a href="https://juejin.im/post/6844903670639771662" target="_blank" rel="noopener">https://juejin.im/post/6844903670639771662</a><br>3&gt; <a href="https://www.jianshu.com/p/74ee8695140c" target="_blank" rel="noopener">https://www.jianshu.com/p/74ee8695140c</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PWA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试（1）</title>
      <link href="/leader755/26592.html"/>
      <url>/leader755/26592.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-amp-CSS："><a href="#HTML-amp-CSS：" class="headerlink" title="HTML&amp;CSS："></a>HTML&amp;CSS：</h2><ul><li><p>浏览器内核</p></li><li><p>盒模型、flex 布局、两/三栏布局、水平/垂直居中；</p></li><li><p>BFC、清除浮动；</p></li><li><p>css3 动画、H5 新特性。</p></li></ul><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p><strong>主流浏览器有五大款，分别是 IE、Firefox、Google Chrome、Safari、Opera。</strong><br><strong>最常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</strong></p><ul><li>IE/Eadge 浏览器：Trident 内核</li><li>chrome 浏览器：Webkit/Blink 内核</li><li>FirefoxL 浏览器：Gecko 内核</li><li>Safari 浏览器：Webkit 内核</li><li>Opera 浏览器： Presto 内核</li></ul><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><p>CSS<strong>盒模型</strong>本质上<strong>是</strong>一个盒子，封装周围的 HTML 元素，它包括：边距，边框，填充，和实际内容，可以简单表述为 盒模型由 content，padding，margin，border 几部分组成。<br>盒模型=标准盒模型+IE 盒模型<br>标准盒模型：<strong>标准盒模型下盒子的大小</strong>  =** width(content)** + <strong>border</strong> + <strong>padding</strong> + <strong>margin;</strong><br><strong>IE 盒模型：  IE 盒模型下盒子的大小=width（content + border + padding） + margin;</strong><br><strong>CSS 如何设置标准模型和 IE 模型:</strong></p><blockquote><p>如果 doctype 协议缺失，会由浏览器自己界定，在 IE 浏览器中 IE9 以下（IE6.IE7.IE8）的版本触发怪异模式，其他浏览器中会默认为 W3c 标准模式。</p></blockquote><p>box-sizing: content-box;  标准盒模型<br>box-sizing: border-box;  IE 盒模型</p><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC:"></a>BFC:</h3><p>块级格式化上下文</p><blockquote><p><strong>BFC 布局规则是？</strong></p><ol><li>内部的 Box 会在垂直方向，一个接一个地放置。</li><li>Box 垂直方向的距离由 margin 决定。属于同一个 BFC 的两个相邻 Box 的 margin 会发生重叠</li><li>BFC 的区域不会与 float box 重叠。</li><li>BFC 就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li><li>计算 BFC 的高度时，浮动元素也参与计算</li></ol></blockquote><blockquote></blockquote><h1 id="只要元素满足下面任一条件即可触发-BFC-特性："><a href="#只要元素满足下面任一条件即可触发-BFC-特性：" class="headerlink" title="只要元素满足下面任一条件即可触发 BFC 特性："></a>只要元素满足下面任一条件即可触发 BFC 特性：</h1><blockquote><ul><li>body 根元素</li><li>浮动元素：float 除 none 以外的值</li><li>绝对定位元素：position (absolute、fixed)</li><li>display 为 inline-block、table-cells、flex</li><li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li></ul></blockquote><blockquote></blockquote><h1 id="BFC-常见作用"><a href="#BFC-常见作用" class="headerlink" title="BFC 常见作用"></a><strong>BFC 常见作用</strong></h1><blockquote><p><strong>阻止外边距 margin 折叠塌陷</strong></p></blockquote><blockquote><p>1、阻止外边距折叠 margin 塌陷问题：在标准文档流中，块级标签之间竖直方向的 margin 会以大的为准，这就是 margin 的塌陷现象。可以用 overflow：hidden 产生 bfc 来解决。</p></blockquote><h1 id="阻止元素被浮动元素覆盖和高度坍塌"><a href="#阻止元素被浮动元素覆盖和高度坍塌" class="headerlink" title="阻止元素被浮动元素覆盖和高度坍塌"></a>阻止元素被浮动元素覆盖和高度坍塌</h1><blockquote><ol start="2"><li>阻止浮动元素造成的父级元素高度坍塌问题和遮挡其他元素问题 高度塌陷问题，这时就可以用 BFC 来清除浮动了。**</li></ol></blockquote><p>**<br>** <strong>[</strong>点击查看 BFC 块级上下文演示案例**](//code.h5jun.com/bajo/8/embed?html,css)</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>利用 clear:both; 清除浮动</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>利用伪类：after 清除浮动</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*万能清除浮动代码*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*添加一个看不见的元素*/</span>  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  <span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*兼容 ie*/</span><span class="token punctuation">}</span></code></pre><p>利用 overflow:hidden;</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>**</p><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><p>Flexible Box 模型，通常被称为 flexbox，是一种弹性布局。</p><h3 id="css-两栏布局、三栏布局"><a href="#css-两栏布局、三栏布局" class="headerlink" title="css 两栏布局、三栏布局"></a>css 两栏布局、三栏布局</h3><h4 id="两栏布局，已知左侧宽度，右边自适应"><a href="#两栏布局，已知左侧宽度，右边自适应" class="headerlink" title="两栏布局，已知左侧宽度，右边自适应"></a>两栏布局，已知左侧宽度，右边自适应</h4><p>1&gt; 双 inline-block  左右盒子均设置为 display：inline-block; 左盒子设置固定宽高，右盒子使用 calc(100% - width 左);</p><p>2&gt;使用浮动双 float  左盒子浮动，右盒子浮动，右盒子宽度设置用 calc(100% - width 左)可以无缝衔接不会有被覆盖的内容。</p><p>3&gt;使用定位双定位 在左右盒子外侧设置一个大盒子，不必设置大盒子的宽高，直接设置 position:relative;左盒子设置 position:absolute;固定宽高，右盒子设置 position:absolute;left:width 左;width:calc(100% - width 左)可实现无缝衔接。</p><p>4&gt;使用定位单定位   左盒子设置绝对定位，设置右盒子 margin-left:width(左)，右盒子不必设置宽度。</p><p>5&gt;使用 flex 布局   外侧盒子 display:flex;align-items:flex-start/center;左盒子设置宽高即可，右盒子 flex:1 1 auto;右盒子设置为放大缩小均为 1，占据空间是剩下的空间。</p><p>6&gt;.使用 grid 网格   外层盒子设置 display:grid;grid-template-rows:100px;grid-template-columns:100px auto;设置了一行两列的网格，且右边网格的大小自适应。</p><p>7&gt;BFC 外侧盒子设置为 overflow:auto，内部左盒子设置 float:left;对左侧进行浮动，继续设置左侧盒子的大小，右盒子设置 overflow:auto;对左盒子触发 BFC，右盒子触发 BFC，左盒子设置右外边距，右盒子设置左外边距(不设置也可)，右盒子不需要设置 width;</p><h4 id="三栏布局，已知左右侧宽度，中间自适应"><a href="#三栏布局，已知左右侧宽度，中间自适应" class="headerlink" title="三栏布局，已知左右侧宽度，中间自适应"></a>三栏布局，已知左右侧宽度，中间自适应</h4><p>1.<strong>使用定位</strong> 三个盒子外侧设置大盒子，大盒子使用相对定位，下面一层三个盒子均采用绝对定位，左盒子固定宽高，右盒子固定宽高并设置<code>right: 0px;</code>使右盒子靠右，中间盒子设置<code>width: calc(100% - width左-width右相加);</code>即可。</p><p>2.<strong>使用浮动</strong>  左盒子设置左浮动，右盒子设置右浮动，中间盒子设置<code>margin:auto;display: inline-block;width: calc(100% - width左 - width 右);</code>无缝衔接<code>margin:auto;</code>在这里不管左右盒子是否一样大都可。</p><p>3&gt;<strong>使用 grid 网格</strong>  设置外层盒子为<code>display:grid;grid-template-rows:100px;grid-template-columns:100px auto 100px;</code>即可。grid 网格好厉害！！！</p><p>4&gt;<strong>使用 flex</strong>  设置外层盒子为<code>display:flex;align-items:center</code>中间盒子设置<code>flex:1 1 auto</code>左右盒子在盒子内部设置内容有大小即可。</p><h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><p>需求：</p><ul><li>1.两边固定，中间自适应；</li><li>2.先加载 middle 内容；</li><li>3.三列等高布局；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span> //设置总宽度    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">150</span>px <span class="token number">0</span> <span class="token number">100</span>px<span class="token punctuation">;</span> //为左右<span class="token number">2</span>侧留出空间  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#left</span>,  <span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#middle</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#middle</span>,  <span class="token id">#left</span>,  <span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">10000</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">10000</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#left</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 偏移的距离和宽度 */</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token id">#right</span> </span><span class="token punctuation">{</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*偏移的距离和宽度*/</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p>还有一件事就是他们在单独部分内容扩充的时候，童鞋们可能发现了 底部会参差不齐。</p><blockquote><p>给 left、middle、right 设置上 padding-bottom: 9999px; margin-bottom: -9999px;</p></blockquote><p><a href="//code.h5jun.com/puja/33/edit?html,css,output" target="_blank" rel="noopener"><strong>点击查看圣杯布局演示案例</strong></a></p><h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><p>需求：</p><ul><li>1.两边固定，中间自适应；</li><li>2.先加载 middle 内容；</li><li>3.三列等高布局；</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>middle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/*float流*/</span>  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>,  <span class="token class">.middle</span>,  <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*解决底部参差不齐的问题**/</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.middle</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右侧设置宽度和距离*/</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">220</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*右侧设置宽度和距离*/</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">220</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">220</span>px <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*用middle 内部的元素通过 margin 留出空间**/</span>    <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    middle  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>extra<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token comment" spellcheck="true">/*双飞翼 flex布局*/</span>  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.sub</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.extra</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*自动占满剩余空间*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.sub</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">150</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*指定宽度，方压缩*/</span>    <span class="token property">order</span><span class="token punctuation">:</span> -<span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*越小越靠前*/</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.extra</span> </span><span class="token punctuation">{</span>    <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">200</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*指定宽度，方压缩*/</span>    <span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*越大越靠后*/</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*    flex=>flex-grow:是否占满剩余空间,flex-shrink：是否压缩,flex-basis: 基准宽度    */</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><p><a href="//code.h5jun.com/yenew/edit?html,css,output" target="_blank" rel="noopener"><strong>双飞翼布局 float 流演示案例</strong></a><br><a href="//code.h5jun.com/xogos/edit?html,css,output" target="_blank" rel="noopener"><strong>双飞翼布局 flex 流演示案例</strong></a><br>**</p><blockquote><p>总结：</p><ul><li>相同点：</li></ul><p>圣杯布局和双飞翼布局解决的问题是一样的，就是两边顶宽，中间自适应的三栏布局，中间栏要在放在文档流前面以优先渲染。<br>圣杯布局和双飞翼布局解决问题的方案在前一半是相同的，也就是三栏全部 float 浮动，但左右两栏加上负 margin 让其跟中间栏 div 并排，以形成三栏布局。</p></blockquote><blockquote><ul><li>不同点：</li></ul><ol><li>双飞翼布局给主面板添加了一个父标签用来通过 margin 给子面板腾出空间。</li><li>圣杯采用的是 padding，而双飞翼采用的 margin，解决了圣杯布局的问题。</li><li>双飞翼布局不用设置相对布局，以及对应的 left 和 right 值。</li></ol></blockquote><h3 id="水平-垂直居中"><a href="#水平-垂直居中" class="headerlink" title="水平/垂直居中"></a>水平/垂直居中</h3><h4 id="1-绝对定位-margin-auto"><a href="#1-绝对定位-margin-auto" class="headerlink" title="1.绝对定位+margin:auto"></a>1.绝对定位+margin:auto</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-绝对定位-负-margin"><a href="#2-绝对定位-负-margin" class="headerlink" title="2.绝对定位+负 margin"></a>2.绝对定位+负 margin</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-绝对定位-transform"><a href="#3-绝对定位-transform" class="headerlink" title="3.绝对定位+transform"></a>3.绝对定位+transform</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 定位父级的50% */</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*自己的50% */</span><span class="token punctuation">}</span></code></pre><h4 id="4-flex-布局"><a href="#4-flex-布局" class="headerlink" title="4.flex 布局"></a>4.flex 布局</h4><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> //子元素水平居中  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> //子元素垂直居中  <span class="token comment" spellcheck="true">/* aa只要三句话就可以实现不定宽高水平垂直居中。 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.box</span> > div </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>**</p><h4 id="5-table-cell-实现居中"><a href="#5-table-cell-实现居中" class="headerlink" title="5.table-cell 实现居中"></a>5.table-cell 实现居中</h4><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;div  class="outter"  > &lt;div  class="inner"  > &lt;div  class="foo"  > 999  &lt;/div  > &lt;div  > &lt;/div  > <span class="token class">.outter</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**定义最外层盒子的 table(非必须)，使用百分比时使用*/</span>  <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*控制子元素垂直居中*/</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.foo</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*必须为行内元素*/</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="css-动画"><a href="#css-动画" class="headerlink" title="css 动画"></a>css 动画</h3><p>可以参考<a href="https://juejin.im/post/6844903845470945294" target="_blank" rel="noopener">https://juejin.im/post/6844903845470945294</a></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1597274198391-d9f1533b-f045-4a81-a964-52dbb24b0f35.png#align=left&display=inline&height=476&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=482&size=127188&status=done&style=none&width=357" alt="image.png"></p><p>animation: move 2s linear 3 alternate both;</p><table><thead><tr><th align="left"><em>animation-name（</em> keyframe 动画名称<em>）</em></th><th align="left"><em>animation-duration（动画持续时间）</em></th><th><em>animation-timing-function  指定动画计时函数，即动画的速度曲线</em></th><th align="left"><em>animation-delay （运动延迟）单位 s</em></th><th align="left">animation-iteration-count (动画播放的次数,默认 1)</th><th align="left">animation-direction（动画播放的方向。）</th><th align="left">animation-fill-mode 指定动画填充模式。</th><th align="left"><strong>animation-play-state**</strong>（**指定动画播放状态，正在运行或暂停。)</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td><td>ease（默认值）</td><td align="left">0（默认延迟 0s）</td><td align="left">1（动画播放默认的次数为 1）</td><td align="left">normal  （默认值）</td><td align="left">none（默认值，回到动画没开始时的状态。）</td><td align="left">running 通过 running 将暂停的动画重新播放（默认值）</td></tr><tr><td align="left"></td><td align="left"></td><td>linear 匀速动画</td><td align="left"></td><td align="left">```</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p>number (设置播放的次数）</p><pre><code></code></pre><pre><code> | reverse | forwards：动画完成后，元素状态保持为最后一帧的状态。 | paused 通过paused将正在播放的动画停下了 ||  |  | ease-in |  | `infinite  (无限播放)` | alternate | backwards：表示，有动画延迟时，动画开始前，元素状态保持为第一帧的状态。 |  ||  |  | ease-out |  |  | alternate | both: 表示上述二者效果都有 |  ||  |  | ease-in-out |  |  | alternate-reverse |  |  ||  |  | `cubic-bezier(n,n,n,n)` 的特例。它们被称为贝塞尔曲线  ([https://cubic-bezier.com/](https://cubic-bezier.com/#.17,.67,.83,.67)) |  |  |  |  |  |css 动画和 js 动画的区别：### CSS3动画的优点和缺点优点：1. CSS3动画在性能上会稍微好一些，浏览器会对CSS3的动画做一些优化(比如专门新建一个图层用来跑动画)1. 代码相对简单缺点：1. 在动画控制上不够灵活1. 兼容性不好1. 部分动画功能无法实现(如滚动动画，视差滚动等)### JS动画的优缺点优点：JavaScript动画正好弥补了这两个缺点。1. 控制能力强，可以单帧的控制和变换1. 写的好，写的好的话，完全可以兼容IE6缺点：1.JS运算预渲染性能不如CSS3动画，因为CSS动画的transform矩阵，是C++级的，必然要比JavaScript级的计算要快2. 还有就是对库比较依赖2. 编码较为繁琐### 综上所述- 对于一些需要复杂控制的动画，使用JavaScript比较靠谱- 如果是一些小的，简单的动画，就使用CSS3动画### H5新特性#### 新特性1.语意特性,添加`&lt;header&gt;&lt;header/&gt;&lt;nav&gt;&lt;nav&gt;`等标签2.多媒体， 用于媒介回放的 video 和 audio 元素3.图像效果，用于绘画的 canvas 元素，svg元素等4.离线 &amp; 存储,对本地离线存储的更好的支持,local Store,Cookies等5.设备兼容特性 ，HTML5提供了前所未有的数据与应用接入开放接口。使外部应用可以直接与浏览器内部的数据直接相连，6.连接特性，更有效的连接工作效率，使得基于页面的实时聊天，更快速的网页游戏体验，更优化的在线交流得到了实现。HTML5拥有更有效的服务器推送技术，Server-Sent Event和WebSockets就是其中的两个特性，这两个特性能够帮助我们实现服务器将数据“推送”到客户端的功能7.性能与集成特性，HTML5会通过XMLHttpRequest2等技术，帮助您的Web应用和网站在多样化的环境中更快速的工作#### 新增标签1.多媒体：`&lt;audio&gt;&lt;/audio&gt;, &lt;video&gt;&lt;video&gt;,&lt;source&gt;&lt;/source&gt;, &lt;embed&gt;&lt;/embed&gt;, &lt;track&gt;&lt;/track&gt;`2.新表单元素：`&lt;datalist&gt; ,&lt;output&gt; , &lt;keygen&gt;`3.新文档节段和纲要:`&lt;header&gt;页面头部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部、&lt;section&gt;章节、&lt;aside&gt;边栏、&lt;article&gt;文档内容、&lt;footer&gt;页面底部`等#### Input 有哪些新增类型？- color,选择颜色- date 选择日期- email 用于检测输入的是否为email格式的地址- month 选择月份- number  用于应该包含数值的输入域，可以设定对输入值的限定- range 用于定义一个滑动条，表示范围- search 用于搜索，比如站点搜索或 Google 搜索- tel 输入电话号码-time 选择时间- url 输入网址- week 选择周和年#### 浏览器本地存储中 cookie ，localStorage 有什么区别？- 共同点：sessionStorage、localStorage和cookie都由浏览器存储在本地的数据，session 存储在服务端。- sessionStorage：浏览器关闭，缓存消失，最大 5M.- localStorage：除非手动删除，否则永远存在本地，最大 5M.- cookie：存储在客户端，最大4kb。   - **Cookie主要是由服务器生成**，且前端也可以设置，保存在客户端本地的一个文件，通过response响应头的set-Cookie字段进行设置，且Cookie的内容自动在请求的时候被传递给服务器。如下：![image.png](https://cdn.nlark.com/yuque/0/2020/png/241787/1596695630377-bc927c6f-e053-425f-a451-a8176853b439.png#align=left&amp;display=inline&amp;height=259&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=518&amp;originWidth=1474&amp;size=101224&amp;status=done&amp;style=none&amp;width=737)- session:   - 每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。   - cookie只是实现session的其中一种方案。虽然是最常用的，但并不是唯一的方法。禁用cookie后还有其他方法存储，比如放在url中   - 现在大多都是Session + Cookie，但是只用session不用cookie，或是只用cookie，不用session在理论上都可以保持会话状态。可是实际中因为多种原因，一般不会单独使用   - 用session只需要在客户端保存一个id，实际上大量数据都是保存在服务端。如果全部用cookie，数据量大的时候客户端是没有那么多空间的。   - 如果只用cookie不用session，那么账户信息全部保存在客户端，一旦被劫持，全部信息都会泄露。并且客户端数据量变大，网络传输的数据量也会变大- token   - token 也称作令牌，由uid+time+sign[+固定参数]   - token 的认证方式类似于**临时的证书签名**, 并且是一种服务端无状态的认证方式, 非常适合于 REST API  的场景. 所谓无状态就是服务端并不会保存身份认证相关的数据。   - token在客户端一般存放于localStorage，cookie，或sessionStorage中。在服务器一般存于数据库中   - 一般 token 放入header 中&gt; 总结：&gt; - session存储于服务器，可以理解为一个状态列表，拥有一个唯一识别符号sessionId，通常存放于cookie中。服务器收到cookie后解析出sessionId，再去session列表中查找，才能找到相应session。依赖cookie&gt; - cookie类似一个令牌，装有sessionId，存储在客户端，浏览器通常会自动添加。&gt; - token也类似一个令牌，无状态，用户信息都被加密到token中，一般 token 放到请求头 header 中，服务器收到token后解密就可知道是哪个用户。需要开发者手动添加。&gt; - jwt只是一个跨域认证的方案### 参考文章：[https://www.jianshu.com/p/c435f52fb95f](https://www.jianshu.com/p/c435f52fb95f)[https://juejin.im/post/6844903817104850952](https://juejin.im/post/6844903817104850952)[https://juejin.im/post/6844904000756809736](https://juejin.im/post/6844904000756809736)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客的评论功能</title>
      <link href="/leader755/38478.html"/>
      <url>/leader755/38478.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-这里推荐的评论功能插件为valine"><a href="#1-这里推荐的评论功能插件为valine" class="headerlink" title="1.这里推荐的评论功能插件为valine"></a>1.这里推荐的评论功能插件为<a href="https://valine.js.org/" target="_blank" rel="noopener">valine</a></h2><p>官网：<a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a><br>注册登录网站：<a href="https://leancloud.cn/" target="_blank" rel="noopener">https://leancloud.cn/</a><br>      需要实名注册登记，可以使用支付宝来实名认证，很快的，秒过。</p><h2 id="2-去leancloud注册"><a href="#2-去leancloud注册" class="headerlink" title="2.去leancloud注册"></a>2.去<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>注册</h2><p>注册完成后去创建应用，选择开发版就可以了。（需要实名登记才能创建应用）<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779620815-f8a3fc6e-f667-4959-9cb2-53b5777427c7.png#align=left&display=inline&height=445&margin=%5Bobject%20Object%5D&name=image.png&originHeight=890&originWidth=1232&size=83220&status=done&style=none&width=616" alt="image.png"></p><h2 id="3-获取-appkey-和-appid"><a href="#3-获取-appkey-和-appid" class="headerlink" title="3.获取 appkey 和 appid"></a>3.获取 appkey 和 appid</h2><p>创建完成应用后，<strong>进入应用-&gt;设置-&gt;应用 key，找到相应的 appkey 和 appid。</strong><br><strong><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588779969891-d05a06f8-bcf5-4b7e-84cb-bcedabc8f762.png#align=left&display=inline&height=248&margin=%5Bobject%20Object%5D&name=image.png&originHeight=796&originWidth=2394&size=185376&status=done&style=none&width=746" alt="image.png"></strong></p><h2 id="4-配置主题文件-config-yml"><a href="#4-配置主题文件-config-yml" class="headerlink" title="4.配置主题文件_config.yml"></a>4.配置主题文件_config.yml</h2><p><strong>搜索 valine，一般可看到如下，将 enbled:true, 并填写 appid 和 appkey(从 leancloud 中获取的 appid 和 appkey)。</strong></p><pre class=" language-javascript"><code class="language-javascript"># The configuration <span class="token keyword">of</span> the Valine comment module is not activated by <span class="token keyword">default</span><span class="token punctuation">.</span># To use it<span class="token punctuation">,</span> activate the configuration item and <span class="token keyword">set</span> appId and appKey<span class="token punctuation">.</span># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey<span class="token punctuation">.</span>valine<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  appId<span class="token punctuation">:</span>  appKey<span class="token punctuation">:</span>  notify<span class="token punctuation">:</span> <span class="token boolean">false</span>  verify<span class="token punctuation">:</span> <span class="token boolean">false</span>  visitor<span class="token punctuation">:</span> <span class="token boolean">true</span>  avatar<span class="token punctuation">:</span> <span class="token string">'mp'</span> # Gravatar style <span class="token punctuation">:</span> mp<span class="token operator">/</span>identicon<span class="token operator">/</span>monsterid<span class="token operator">/</span>wavatar<span class="token operator">/</span>retro<span class="token operator">/</span>hide  pageSize<span class="token punctuation">:</span> <span class="token number">10</span>  placeholder<span class="token punctuation">:</span> <span class="token string">'just go go'</span> # Comment Box placeholder  background<span class="token punctuation">:</span> <span class="token operator">/</span>medias<span class="token operator">/</span>comment_bg<span class="token punctuation">.</span>png</code></pre><h2 id="5-配置域名"><a href="#5-配置域名" class="headerlink" title="5.配置域名"></a>5.配置域名</h2><p>在 Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去.</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588780306061-73286643-1359-4efe-b2a1-5545f880dd4a.png#align=left&display=inline&height=500&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1000&originWidth=1804&size=166396&status=done&style=none&width=902" alt="image.png"></p><h2 id="6-重启你的博客"><a href="#6-重启你的博客" class="headerlink" title="6.重启你的博客"></a>6.重启你的博客</h2><p>大功告成！！</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> valine </tag>
            
            <tag> leancloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>travis-ci + github + hexo 持续集成</title>
      <link href="/leader755/34284.html"/>
      <url>/leader755/34284.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-博客源代码-GitHub-托管"><a href="#Hexo-博客源代码-GitHub-托管" class="headerlink" title="Hexo 博客源代码 GitHub 托管"></a>Hexo 博客源代码 GitHub 托管</h2><h2 id="1-注册-travis-ci"><a href="#1-注册-travis-ci" class="headerlink" title="1.注册 travis-ci"></a>1.注册 travis-ci</h2><p>Travis CI 的网站有两个，<br><code>travis-ci.org</code>  专门针对开源项目，GitHub 上所有的公开仓库都能够免费使用；<br><code>travis-ci.com</code>  针对私有及商业项目，新用户前 100 次构建是免费的，后面就要收费了。</p><h2 id="2-登录-Travis-CI-网站"><a href="#2-登录-Travis-CI-网站" class="headerlink" title="2.登录 Travis CI 网站"></a>2.登录 Travis CI 网站</h2><ol><li>前往 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis-ci.com</a> and Sign up with GitHub.</li><li>接受授权</li><li>选择你想要使用 Travis CI 的仓库 或者 你也可以在 Github-settings-Applications-TravisCI-Configure 中去更新配置；</li><li>在你仓库怎增加 <code>.travis.yml</code> 文件，这个文件定义了构建的步骤，例如<a href="https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-installation-phase" target="_blank" rel="noopener">安装依赖</a>等等。</li><li>将 <code>.travis.yml</code> 文件推送到你的远端仓库，然后就会触发 Travis CI 构建；</li><li>登录 <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis CI</a>然后选择你的仓库查看构建任务的执行详情；</li></ol><h2 id="3-配置-Travis-CI"><a href="#3-配置-Travis-CI" class="headerlink" title="3.配置 Travis CI"></a>3.配置 Travis CI</h2><h4 id="1-gt-网页端配置"><a href="#1-gt-网页端配置" class="headerlink" title="1&gt;网页端配置"></a>1&gt;网页端配置</h4><p>首先进入 <a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI 官网</a>，这里我们使用的是免费版的，因为考虑到一般放在 GitHub 上的博客都是公开的，所以不需要付费版本。如果有私有仓库要使用这种方式，可以使用 <a href="https://travis-ci.com/" target="_blank" rel="noopener">付费版的 Travis CI</a>。然后直接通过 GitHub 账户登陆即可，登陆后可以看到我们的共有仓库，找到博客的仓库，我这里是选择 blog-master 源码仓库（博客仓库：leader755.github.io），把旁边的勾勾上，然后点击旁边的 <code>Settings</code> 进入设置页面。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728277292-624821ea-7b95-4db8-89fe-22ece79e75db.png#align=left&display=inline&height=457&margin=%5Bobject%20Object%5D&name=image.png&originHeight=914&originWidth=1686&size=85154&status=done&style=none&width=843" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728301454-068409c1-f596-4e35-aa3a-d9d2d3c5b39c.png#align=left&display=inline&height=527&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1054&originWidth=1752&size=108378&status=done&style=none&width=876" alt="image.png"></p><p>在设置页面中，General 中只勾选 <code>Build pushed branches</code>，表示当有新的代码 push 到 GitHub 仓库时，自动执行构建任务。其他设置保持默认即可。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728534111-16bc9014-0036-44ef-8036-8117eb15dffd.png#align=left&display=inline&height=532&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1064&originWidth=1910&size=135305&status=done&style=none&width=955" alt="image.png"></p><p>接下来为 Travis 添加对 GitHub 仓库的读写权限。进入 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal access tokens</a> 页面，点击 <code>Generate new token</code>，选择 token 权限(这里直选 repo 即可)，设置别名并生成。然后将生成的 token 值复制。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728617792-342093c6-0176-4ece-90e0-f1395c93d7cf.png#align=left&display=inline&height=645&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1290&originWidth=2304&size=230289&status=done&style=none&width=1152" alt="image.png"><br>接着在原来 Travis 的设置界面添加 token。如图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595728826735-1b3d72da-2248-4837-9c46-4b6ce410bfdf.png#align=left&display=inline&height=324&margin=%5Bobject%20Object%5D&name=image.png&originHeight=648&originWidth=2006&size=113373&status=done&style=none&width=1003" alt="image.png"><br>在 Name 中填入 token 的别名，Value 中填入刚刚得到的 token，然后点击 Add 进行添加即可。注意 token 一旦生成，只能在生成时得到其值，后面无法查看。所以如果还有需要，可以记下来或者重新生成新的 token。</p><h4 id="2-gt-Travis-配置文件"><a href="#2-gt-Travis-配置文件" class="headerlink" title="2&gt;Travis 配置文件"></a>2&gt;Travis 配置文件</h4><p>接下来还需要编写 Travis 的配置文件，用于指定构建时使用哪些命令。配置文件名为 <code>.travis.yml</code>，是自动化构建的配置文件。文件内容示例如下：</p><pre class=" language-javascript"><code class="language-javascript"># 指定构建环境是Node<span class="token punctuation">.</span>js，当前版本是稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span><span class="token punctuation">,</span>版本这里我们选择最新的长期支持版本（ LTS） 应该就够用了anguage<span class="token punctuation">:</span> node_jsnode_js<span class="token punctuation">:</span>  <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span>  # 稳定版 <span class="token punctuation">(</span>stable<span class="token punctuation">)</span> <span class="token punctuation">,</span>最新长期支持版（ <span class="token operator">-</span> lts<span class="token operator">/</span><span class="token operator">*</span> ）# 指定缓存模块，可加快编译速度cache<span class="token punctuation">:</span>  directories<span class="token punctuation">:</span>    <span class="token operator">-</span> node_modules# 在构建之前before_install<span class="token punctuation">:</span>  <span class="token operator">-</span> <span class="token keyword">export</span> TZ<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> # 更改时区  <span class="token operator">-</span> npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli # 安装hexo环境#<span class="token function">部署环境的安装</span><span class="token punctuation">(</span>安装一个部署插件<span class="token punctuation">)</span>install<span class="token punctuation">:</span>  <span class="token operator">-</span> npm install  <span class="token operator">-</span> npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>savebefore_script<span class="token punctuation">:</span> ## 执行清缓存，生成网页操作script<span class="token punctuation">:</span>  <span class="token operator">-</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo gafter_script<span class="token punctuation">:</span>  # 未能成功  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>  <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span>   # 替换同目录下的_config<span class="token punctuation">.</span>yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！  <span class="token operator">-</span> sed <span class="token operator">-</span>i <span class="token string">"s/gh_token/${GH_TOKEN}/g"</span> <span class="token punctuation">.</span><span class="token operator">/</span>_config<span class="token punctuation">.</span>yml  <span class="token operator">-</span> hexo deploy    # 版本 二（未能成功）  # <span class="token operator">-</span> cd <span class="token punctuation">.</span>deploy_git  # <span class="token operator">-</span> git checkout master  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>  # <span class="token operator">-</span> sed <span class="token operator">-</span>i<span class="token string">''</span> <span class="token string">"s~${GH_REF}~${GH_TOKEN}:x-oauth-basic@${GH_REF}~"</span> _config<span class="token punctuation">.</span>yml  # <span class="token operator">-</span> hexo d <span class="token operator">></span> log<span class="token punctuation">.</span>txt <span class="token number">2</span><span class="token operator">></span><span class="token operator">&amp;</span><span class="token number">1</span>  # <span class="token operator">-</span> cat log<span class="token punctuation">.</span>txt <span class="token operator">|</span> sed <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>  # <span class="token operator">-</span> echo <span class="token string">"自动构建Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span> # 构建后输出时间标识    # 版本三（能正常构建提交到博客 leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">,</span>但是并不是使用 hexo d  命令触发的）    # after_script<span class="token punctuation">:</span>  # <span class="token operator">-</span> cd <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>  # <span class="token operator">-</span> git init  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>name <span class="token string">"your-git-name"</span>  # <span class="token operator">-</span> git config user<span class="token punctuation">.</span>email <span class="token string">"your-email-address"</span>  # <span class="token operator">-</span> git add <span class="token punctuation">.</span>  # <span class="token operator">-</span> git commit <span class="token operator">-</span>m <span class="token string">"Travis CI Auto Builder at $(date +'%Y-%m-%d %H:%M:%S')"</span>  # <span class="token operator">-</span> git push <span class="token operator">--</span>force <span class="token operator">--</span>quiet <span class="token string">"https://${GH_TOKEN}@${GH_REF}"</span> master<span class="token punctuation">:</span>master# 指定博客源码分支，Travis CI 监控哪一个分支的变动，这里是 master 分支（若博客备份文件和 GitHub Pages 共用一个仓库的话需设置为博客备份文件所在分支）。branches<span class="token punctuation">:</span>  only<span class="token punctuation">:</span>    <span class="token operator">-</span> master# End<span class="token punctuation">:</span> Build LifeCycle# configure notifications <span class="token punctuation">(</span>email<span class="token punctuation">,</span> IRC<span class="token punctuation">,</span> campfire etc<span class="token punctuation">)</span># please update <span class="token keyword">this</span> section to your needs<span class="token operator">!</span># https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>travis<span class="token operator">-</span>ci<span class="token punctuation">.</span>com<span class="token operator">/</span>user<span class="token regex">/notifications/</span>notifications<span class="token punctuation">:</span>  email<span class="token punctuation">:</span>    <span class="token operator">-</span> <span class="token number">1181012791</span>@qq<span class="token punctuation">.</span>com  on_success<span class="token punctuation">:</span> change  on_failure<span class="token punctuation">:</span> always</code></pre><p>到这里我就出问题了，虽然能成功触发构建，但是并不能使用 hexo d 发布到 leader755.github.io 这个博客仓库。目前还没找出问题在哪里，出现问题地方应该在生命周期 after_script: ,如果有知道还请留言回复，感激不尽。虽然没有成功使用吧。但是也算对 travis-ci 有初步的认识吧。继续折腾吧。</p><h2 id="4-认识-Job-Lifecycle–Job-的生命周期"><a href="#4-认识-Job-Lifecycle–Job-的生命周期" class="headerlink" title="4.认识 Job Lifecycle–Job 的生命周期"></a>4.认识 Job Lifecycle–Job 的生命周期</h2><p>Travis CI 为每种编程语言提供默认构建环境和默认的阶段集。 创建虚拟机为你的 Job 提供构建环境，将存储库克隆到其中，安装可选的插件，然后运行构建阶段。<br>job 的声明周期，主要包含两大部分：<br>install：安装依赖，官网有专门讲解的 <a href="https://docs.travis-ci.com/user/installing-dependencies/" target="_blank" rel="noopener">Installing Dependencies</a><br>script：运行构建脚本；<br>在 installation 阶段之前（beofore_install）、在 script phase 之前（before_script）或之后（after_script），你可以运行自定义命令；<br>当构建成功或失败置换后，可以使用 after_success（例如构建文档）或 after_failure（例如上载日志文件）阶段执行其他操作（actions）。 在 after_failure 和 after_success 中，您可以使用$TRAVIS_TEST_RESULT 环境变量获取构建结果。</p><p>完整的 job 生命周期(包括三个可选的部署阶段，以及在检出 git 存储库 和更改到存储库目录) 如下：</p><ul><li><a href="https://docs.travis-ci.com/user/installing-dependencies/#installing-packages-with-the-apt-addon" target="_blank" rel="noopener"><strong>apt addons</strong></a>** 可选安装**</li><li><a href="https://docs.travis-ci.com/user/caching" target="_blank" rel="noopener"><strong>cache components</strong></a>** 可选安装**</li><li><strong>before_install</strong></li><li><strong>install</strong></li><li><strong>before_script</strong></li><li><strong>script</strong></li><li><strong>before_cache (for cleaning up cache) 可选</strong></li><li><strong>after_success or after_failure</strong></li><li><strong>before_deploy 可选</strong></li><li><strong>deploy 可选</strong></li><li><strong>after_deploy 可选</strong></li><li><strong>after_script</strong></li></ul><p>一次构建任务可有许多 job 组成。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> travis-ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.语雀文档同步到 hexo</title>
      <link href="/leader755/7381.html"/>
      <url>/leader755/7381.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-去官网注册账号"><a href="#1-去官网注册账号" class="headerlink" title="1.去官网注册账号"></a><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">1</a>.去官网注册账号</h2><p><a href="https://www.yuque.com/login?platform=wechat&inviteToken=d250cce7a9bfb322880f20b1d1c4cdc4e59fa5e9f65dd25b1c2d2e774a076c56" target="_blank" rel="noopener">点我去官网</a></p><h2 id="2-创建知识库"><a href="#2-创建知识库" class="headerlink" title="2.创建知识库"></a>2.创建知识库</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588478034103-86a7c5cc-71cb-4fd5-ba96-5eee9a2e8a2f.png#align=left&display=inline&height=321&margin=%5Bobject%20Object%5D&name=image.png&originHeight=642&originWidth=726&size=55017&status=done&style=none&width=363" alt="image.png"></p><h2 id="3-点击当前知识库的设置"><a href="#3-点击当前知识库的设置" class="headerlink" title="3.点击当前知识库的设置"></a>3.点击当前知识库的设置</h2><p>获取当前知识库的登录名和路径<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588477857012-0a0094c3-e542-429d-bb28-20cd6d29c941.png#align=left&display=inline&height=531&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1062&originWidth=1828&size=124676&status=done&style=none&width=914" alt="image.png"></p><h2 id="4-在将语雀文档同步到-hexo"><a href="#4-在将语雀文档同步到-hexo" class="headerlink" title="4.在将语雀文档同步到 hexo"></a>4.在将语雀文档同步到 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//先安装 yuque-hexo</span>npm install yuque<span class="token operator">-</span>hexo <span class="token operator">--</span>save</code></pre><h3 id="1-修改-package-json，增加配置"><a href="#1-修改-package-json，增加配置" class="headerlink" title="1) 修改 package.json，增加配置:"></a>1) 修改 package.json，增加配置:</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"yuqueConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"postPath"</span><span class="token punctuation">:</span> <span class="token string">"source/_posts/yuque"</span><span class="token punctuation">,</span>    <span class="token string">"cachePath"</span><span class="token punctuation">:</span> <span class="token string">"yuque.json"</span><span class="token punctuation">,</span>    <span class="token string">"mdNameFormat"</span><span class="token punctuation">:</span> <span class="token string">"title"</span><span class="token punctuation">,</span>    <span class="token string">"adapter"</span><span class="token punctuation">:</span> <span class="token string">"hexo"</span><span class="token punctuation">,</span>    <span class="token string">"concurrency"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token string">"baseUrl"</span><span class="token punctuation">:</span> <span class="token string">"https://www.yuque.com/api/v2"</span><span class="token punctuation">,</span>    <span class="token string">"login"</span><span class="token punctuation">:</span> <span class="token string">"leader755"</span><span class="token punctuation">,</span>    <span class="token string">"repo"</span><span class="token punctuation">:</span> <span class="token string">"blog"</span><span class="token punctuation">,</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"在语雀上申请的 token"</span><span class="token punctuation">,</span>    <span class="token string">"onlyPublished"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token string">"onlyPublic"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><table><thead><tr><th>参数名</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>postPath</td><td>文档同步后生成的路径</td><td>source/_posts/yuque</td></tr><tr><td>cachePath</td><td>文档下载缓存文件</td><td>yuque.json</td></tr><tr><td>mdNameFormat</td><td>文件名命名方式 (title / slug)</td><td>title</td></tr><tr><td>adapter</td><td>文档生成格式 (hexo/markdown)</td><td>hexo</td></tr><tr><td>concurrency</td><td>下载文章并发数</td><td>5</td></tr><tr><td>baseUrl</td><td>语雀 API 地址</td><td>-</td></tr><tr><td>login</td><td>语雀 login (group), 也称为个人路径</td><td>-</td></tr><tr><td>repo</td><td>语雀仓库短名称，也称为语雀知识库路径</td><td>-</td></tr><tr><td>onlyPublished</td><td>只展示已经发布的文章</td><td>false</td></tr><tr><td>onlyPublic</td><td>只展示公开文章</td><td>false</td></tr></tbody></table><blockquote><p>slug 是语雀的永久链接名，一般是几个随机字母。</p></blockquote><h3 id="2-在-package-json-添加-scripts"><a href="#2-在-package-json-添加-scripts" class="headerlink" title="2)在 package.json 添加 scripts"></a>2)在 package.json 添加 scripts</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//添加以下命令行</span><span class="token punctuation">{</span>  <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>  <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span><span class="token punctuation">}</span></code></pre><p>目前为止 scripts 命令行为</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span><span class="token punctuation">,</span>    <span class="token string">"sync"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo sync"</span><span class="token punctuation">,</span>    <span class="token string">"clean:yuque"</span><span class="token punctuation">:</span> <span class="token string">"yuque-hexo clean"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h3 id="3）关于在语雀上申请-token"><a href="#3）关于在语雀上申请-token" class="headerlink" title="3）关于在语雀上申请 token"></a>3）关于在语雀上申请 token</h3><p>点击账户个人–&gt;设置 –&gt;Token–&gt;新建 token</p><h2 id="5-同步语雀文档到本地-hexo"><a href="#5-同步语雀文档到本地-hexo" class="headerlink" title="5.同步语雀文档到本地 hexo"></a>5.同步语雀文档到本地 hexo</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//同步文档</span>yuque<span class="token operator">-</span>hexo sync<span class="token comment" spellcheck="true">//清除本地缓存</span>yuque<span class="token operator">-</span>hexo clean</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> yuque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客站内搜索功能</title>
      <link href="/leader755/31782.html"/>
      <url>/leader755/31782.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-根目录安装插件-hexo-generator-searchdb"><a href="#1-根目录安装插件-hexo-generator-searchdb" class="headerlink" title="1.根目录安装插件 hexo-generator-searchdb"></a>1.根目录安装插件 hexo-generator-searchdb</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>searchdb <span class="token operator">--</span>save</code></pre><h2 id="2-配置根目录文件-config-yml"><a href="#2-配置根目录文件-config-yml" class="headerlink" title="2.配置根目录文件_config.yml"></a>2.配置根目录文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>field<span class="token punctuation">:</span> post<span class="token punctuation">;</span>format<span class="token punctuation">:</span> html<span class="token punctuation">;</span>limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">;</span></code></pre><p>##</p><h2 id="3-配置主题文件-config-yml"><a href="#3-配置主题文件-config-yml" class="headerlink" title="3.配置主题文件_config.yml"></a>3.配置主题文件_config.yml</h2><pre class=" language-javascript"><code class="language-javascript">local_search<span class="token punctuation">:</span> enable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="4-完成效果图示"><a href="#4-完成效果图示" class="headerlink" title="4.完成效果图示"></a>4.完成效果图示</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588695774509-2476d128-a52b-4d6b-8e64-7269b5c7389b.png#align=left&display=inline&height=568&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1136&originWidth=2180&size=310201&status=done&style=none&width=1090" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客提交百度和Google收录</title>
      <link href="/leader755/13299.html"/>
      <url>/leader755/13299.html</url>
      
        <content type="html"><![CDATA[<p>一个网站的 SEO 对一个网站非常重要，<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/SEO/102990?fr=aladdin" target="_blank" rel="noopener">SEO</a>指的是搜索引擎优化。通过搜索引擎优化，可以提高网站的网站关键词排名以及博客文章的曝光度。一般来说，我们针对百度和 Google 这两个搜索引擎进行优化，提高对网站资源的索引量，使我们的文章更容易被发现。虽然我的博客的主要读者是我自己，但也不妨碍我做些优化，对吧！接下来向大家展示如何使博客被百度和 Google 收录。</p><h3 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h3><p>站点地图即<a href="https://link.jianshu.com/?t=https://baike.baidu.com/item/sitemap/6241567?fr=aladdin" target="_blank" rel="noopener">sitemap</a>， 是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p><h4 id="生成站点地图"><a href="#生成站点地图" class="headerlink" title="生成站点地图"></a>生成站点地图</h4><p>安装百度和 Google 的站点地图生成插件：</p><pre><code>npm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --save</code></pre><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p><pre><code># 自动生成sitemapsitemap:  path: sitemap.xmlbaidusitemap:  path: baidusitemap.xml</code></pre><h4 id="生成和部署"><a href="#生成和部署" class="headerlink" title="生成和部署"></a>生成和部署</h4><p>执行生成和部署命令：</p><p>此时，进入<code>public</code>目录，你会发现里面有<code>sitemap.xml</code>和<code>baidusitemap.xml</code>两个文件，这就是生成的站点地图。里面包含了网站上所有页面的链接，搜索引擎通过这两个文件来抓取网站页面。</p><blockquote><ul><li>sitemap.xml 用来提交给 Google</li><li>baidusitemap.xml 用来提交给百度</li></ul></blockquote><h3 id="百度站长平台"><a href="#百度站长平台" class="headerlink" title="百度站长平台"></a>百度站长平台</h3><p>通过百度站长平台进行链接提交，增加网站的索引量。我的这篇文章：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a> 已经提到过 Github 对百度爬虫进行了屏蔽，因此百度爬取不到 Github 上的页面，如果你按照这篇文章同时部署到 Coding 上，那百度就可以抓取到，因为此时百度抓取的是位于 Coding 上的博客网页。</p><p>注册并登录百度站长平台：<a href="https://link.jianshu.com/?t=http://zhanzhang.baidu.com/" target="_blank" rel="noopener">百度站长平台</a></p><h4 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h4><p>选择添加站点：</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-9bca3b38a6c1685d.png#align=left&display=inline&height=331&margin=%5Bobject%20Object%5D&originHeight=331&originWidth=982&status=done&style=none&width=982" alt=""></p><h4 id="验证站点"><a href="#验证站点" class="headerlink" title="验证站点"></a>验证站点</h4><p>进行站点验证：</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-51233e024040d8d7.png#align=left&display=inline&height=533&margin=%5Bobject%20Object%5D&originHeight=533&originWidth=982&status=done&style=none&width=982" alt=""></p><p>这里我们选择<code>文件验证</code>，下载验证文件到本地，放置在<code>themes/next/source</code>目录下。执行生成和部署命令：</p><p>点击完成验证即可。</p><h4 id="链接提交"><a href="#链接提交" class="headerlink" title="链接提交"></a>链接提交</h4><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可。</p><h5 id="主动推送"><a href="#主动推送" class="headerlink" title="主动推送"></a>主动推送</h5><p>主动推送最为快速的提交方式，是被百度收录最快的推送方式。主动推送可以通过安装插件实现：</p><pre><code>npm install hexo-baidu-url-submit --save</code></pre><p>修改站点配置文件<code>_config.yml</code>，添加以下内容：</p><pre><code>baidu_url_submit:  count: 5 ## 提交最新的五个链接  host: www.hui-wang.info ## 百度站长平台中注册的域名  token: your_token ## 准入秘钥  path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>其次，记得查看<code>_config.yml</code>文件中 url 的值， 必须包含是百度站长平台注册的域名， 比如:</p><pre><code># URLurl: http://fengdi.orgroot: /permalink: :year/:month/:day/:title.xml</code></pre><p>最后，加入新的 deployer:</p><pre><code>deploy:- type: git ## 这是我原来的deployer  repo:  branch:- type: baidu_url_submitter ## 添加这里内容即可</code></pre><p>其主动推送的实现原理如下：</p><ul><li>新链接的产生， <code>hexo generate</code> 会产生一个文本文件，里面包含最新的链接</li><li>新链接的提交， <code>hexo deploy</code> 会从上述文件中读取链接，提交至百度搜索引擎</li></ul><h5 id="自动推送"><a href="#自动推送" class="headerlink" title="自动推送"></a>自动推送</h5><p>安装自动推送 JS 代码的网页，在页面被访问时，页面 URL 将立即被推送给百度。</p><p>修改主题目录下的<code>layout/post.swig</code>文件，末尾添加自动推送代码，代码如下：</p><pre><code>&lt;script&gt;(function(){    var bp = document.createElement(&#39;script&#39;);    var curProtocol = window.location.protocol.split(&#39;:&#39;)[0];    if (curProtocol === &#39;https&#39;) {        bp.src = &#39;https://zz.bdstatic.com/linksubmit/push.js&#39;;    }    else {        bp.src = &#39;http://push.zhanzhang.baidu.com/push.js&#39;;    }    var s = document.getElementsByTagName(&quot;script&quot;)[0];    s.parentNode.insertBefore(bp, s);})();&lt;/script&gt;</code></pre><h5 id="sitemap-提交"><a href="#sitemap-提交" class="headerlink" title="sitemap 提交"></a>sitemap 提交</h5><p>我们之前已经说过如何生成 sitemap 文件，这时就需要我们生成的 sitemap 文件了。</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-cfb7e4bd12e2deb8.png#align=left&display=inline&height=443&margin=%5Bobject%20Object%5D&originHeight=443&originWidth=981&status=done&style=none&width=981" alt=""></p><p>输入以下内容到输入框里：</p><pre><code>http://fengdi.org/baidusitemap.xml</code></pre><p>输入验证码后，提交即可。一般情况下，百度会在一个小时内处理该文件，并提取其中的 url。</p><h3 id="Google-网站站长"><a href="#Google-网站站长" class="headerlink" title="Google 网站站长"></a>Google 网站站长</h3><p>在提交 Google 之前，要解决一个大家都知道的问题，关于如何登录 Google。这里就不再说了，相信你们有办法。</p><h4 id="添加站点-1"><a href="#添加站点-1" class="headerlink" title="添加站点"></a>添加站点</h4><p>登录<a href="https://link.jianshu.com/?t=https://www.google.com/webmasters/#?modal_active=none" target="_blank" rel="noopener">Google 网站站长</a>，进入<code>Search Console</code>，点击<code>添加属性</code>进行站点添加：</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-9a7ce99e3aaaf1a9.png#align=left&display=inline&height=477&margin=%5Bobject%20Object%5D&originHeight=477&originWidth=1364&status=done&style=none&width=1364" alt=""></p><h4 id="验证站点-1"><a href="#验证站点-1" class="headerlink" title="验证站点"></a>验证站点</h4><p>同百度平台一样，下载 Google 验证文件，放到 source 下<code>themes/next/source</code>目录中：</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-2a7e8f527d0b1b42.png#align=left&display=inline&height=618&margin=%5Bobject%20Object%5D&originHeight=618&originWidth=1210&status=done&style=none&width=1210" alt=""></p><p>重新生成和部署：</p><p>部署完成之后，进行验证即可。</p><h4 id="添加站点地图"><a href="#添加站点地图" class="headerlink" title="添加站点地图"></a>添加站点地图</h4><p>在<code>抓取</code>里面，点击<code>站点地图</code>，进行添加：</p><p><img src="https://upload-images.jianshu.io/upload_images/5635196-7071aa22f10e2c28.png#align=left&display=inline&height=507&margin=%5Bobject%20Object%5D&originHeight=507&originWidth=1353&status=done&style=none&width=1353" alt=""></p><p>好了，到这里文章就结束了。如果你之前没有把网站部署到 Coding 上，你的网站百度是爬取不到的，关于如何部署请参阅：<a href="https://link.jianshu.com/?t=http://fengdi.org/2017/08/07/Hexo%E5%8D%9A%E5%AE%A2%E4%B9%8B%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo 博客之速度优化</a></p><p><a href="https://link.jianshu.com/?t=http://svend.cc/posts/22980/" target="_blank" rel="noopener">Hexo 系列：（四）Hexo 博客提交百度和 Google 收录</a></p><p>文文章转载自：<a href="https://www.jianshu.com/p/f8ec422ebd52" target="_blank" rel="noopener">https://www.jianshu.com/p/f8ec422ebd52</a></p><p>**</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度收录 </tag>
            
            <tag> 谷歌收录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客的生成永久标题链接</title>
      <link href="/leader755/9481.html"/>
      <url>/leader755/9481.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-hexo-博客默认链接规则："><a href="#1-hexo-博客默认链接规则：" class="headerlink" title="1.hexo 博客默认链接规则："></a>1.hexo 博客默认链接规则：</h2><p><strong>hexo 生成的标题默认规则（年、月、日、标题）：:year/:month/:day/:title。复制后的链接是一长串，非常不利于阅读，也不简洁。</strong></p><h2 id="2-解决方案："><a href="#2-解决方案：" class="headerlink" title="2.解决方案："></a>2.解决方案：</h2><h3 id="1-使用hexo-permalink-pinyin"><a href="#1-使用hexo-permalink-pinyin" class="headerlink" title="1.使用hexo-permalink-pinyin"></a>1.使用<a href="">hexo-permalink-pinyin</a></h3><p>将中文转英文，这样方案也存在一定的缺陷，比如修改了文章标题，重新 hexo 三连后，URL 就变了，以前的文章地址变成了 404。而且这样生成的 URL 层级也很深，不利于 SEO。</p><h4 id="1-gt-安装-hexo-permalink-pinyin"><a href="#1-gt-安装-hexo-permalink-pinyin" class="headerlink" title="1&gt;安装 hexo-permalink-pinyin"></a>1&gt;安装 hexo-permalink-pinyin</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre><h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>permalink_pinyin<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>             # Enable <span class="token keyword">this</span> plugin  separator<span class="token punctuation">:</span> <span class="token string">'-'</span>           # Separator <span class="token keyword">of</span> the slug<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span>  exclude<span class="token punctuation">:</span> <span class="token operator">/</span>ignore_post<span class="token operator">/</span>   # Regex <span class="token keyword">for</span> which post should skip</code></pre><p>###</p><h3 id="2-使用hexo-abbrlink"><a href="#2-使用hexo-abbrlink" class="headerlink" title="2.使用hexo-abbrlink"></a>2.使用<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a></h3><p>生成唯一不变的 URl 链接，链接可以调整自己想要的。弊端</p><h4 id="1-gt-安装-hexo-abbrlink"><a href="#1-gt-安装-hexo-abbrlink" class="headerlink" title="1&gt;安装 hexo-abbrlink"></a>1&gt;安装 hexo-abbrlink</h4><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre><p>####</p><h4 id="2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1"><a href="#2-gt-修改根目录下的-config-yml-文件，找到-permalink。-1" class="headerlink" title="2&gt;修改根目录下的_config.yml 文件，找到 permalink。"></a>2&gt;修改根目录下的_config.yml 文件，找到 permalink。</h4><pre class=" language-javascript"><code class="language-javascript">permalink<span class="token punctuation">:</span> post<span class="token operator">/</span><span class="token punctuation">:</span>abbrlink<span class="token punctuation">.</span>html  # 文章的永久链接格式<span class="token punctuation">,</span>post可以自定义abbrlink<span class="token punctuation">:</span>  alg<span class="token punctuation">:</span> crc32  # 算法： <span class="token function">crc16</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and crc32  rep<span class="token punctuation">:</span> hex    # 进制： <span class="token function">dec</span><span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span> and hex</code></pre><p>生成后的博客链接如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588694804547-5dbe637d-46af-4bfc-9b3d-4d5228b573a6.png#align=left&display=inline&height=37&margin=%5Bobject%20Object%5D&name=image.png&originHeight=74&originWidth=908&size=11417&status=done&style=none&width=454" alt="image.png"></p><p>如果觉得对你有帮助，点个赞呗。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 永久标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+GitHub 搭建个人图床工具</title>
      <link href="/leader755/9848.html"/>
      <url>/leader755/9848.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>方便程度：★★★★☆<br>配置难度：★★☆☆☆<br>适用环境：win + mac + linux<br>需要工具：GitHub 账号 + PicGo 客户端<br>稳定性：背靠 GitHub 和微软，比自建服务器都稳<br>隐私性：这算是唯一缺点，你的图片别人可以访问。</p></blockquote><p>###</p><h3 id="1-PicGo-介绍"><a href="#1-PicGo-介绍" class="headerlink" title="1. PicGo 介绍"></a>1. PicGo 介绍</h3><p>这是一款图片上传的工具，目前支持微博图床，七牛图床，腾讯云，又拍云，GitHub 等图床，未来将支持更多图床。</p><p>所以解决问题的思路就是，将本地的文件，或者剪切板上面的截图发送图床，然后生成在线图片的链接</p><h3 id="2-下载并安装-PicGo"><a href="#2-下载并安装-PicGo" class="headerlink" title="2.下载并安装 PicGo"></a>2.下载并安装 PicGo</h3><h4 id="1-进入下载页面"><a href="#1-进入下载页面" class="headerlink" title="1.进入下载页面"></a>1.进入下载页面</h4><p><a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p><h4 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2.下载安装包"></a>2.下载安装包</h4><p>选择最新版本就行了，我下载时最新版是 2.1.2<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528164711.jpg" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528164711.jpg#align=left&display=inline&height=591&margin=%5Bobject%20Object%5D&originHeight=591&originWidth=1066&status=done&style=none&width=1066" alt=""></a></p><h4 id="3-安装-PicGo"><a href="#3-安装-PicGo" class="headerlink" title="3.安装 PicGo"></a>3.安装 PicGo</h4><p>双击下载的安装包，一路默认就行，如果 360 报错，就允许执行，安装完成后，打开软件如下图所示：<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165026.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165026.png#align=left&display=inline&height=412&margin=%5Bobject%20Object%5D&originHeight=412&originWidth=787&status=done&style=none&width=787" alt=""></a></p><h3 id="3-创建-GitHub-图床"><a href="#3-创建-GitHub-图床" class="headerlink" title="3.创建 GitHub 图床"></a>3.创建 GitHub 图床</h3><h4 id="1-需要注册-登陆-GitHub-账号"><a href="#1-需要注册-登陆-GitHub-账号" class="headerlink" title="1.需要注册/登陆 GitHub 账号"></a>1.需要注册/登陆 GitHub 账号</h4><p>这个自行注册，不会的百度谷歌下</p><h4 id="2-创建-Repository"><a href="#2-创建-Repository" class="headerlink" title="2.创建 Repository"></a>2.创建 Repository</h4><p>随便命名，我的比较简单，直接是 img</p><h4 id="3-创建-token-并复制保存"><a href="#3-创建-token-并复制保存" class="headerlink" title="3.创建 token 并复制保存"></a>3.创建 token 并复制保存</h4><p>生成一个 Token 用于操作 GitHub repository<br><strong>Settings -&gt; Developer settings -&gt; Personal access tokens</strong></p><p>1.点击右上角头像，settings，进入设置<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170352.png" target="_blank" rel="noopener"></a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1577937560770-a488dbd7-809f-4a83-9e61-fa65bc1d4b54.png#align=left&display=inline&height=540&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1080&originWidth=2184&size=234699&status=done&style=none&width=1092" alt="image.png"></p><p>2.在页面最下找到 Developer settings，点击进入<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170636.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170636.png#align=left&display=inline&height=820&margin=%5Bobject%20Object%5D&originHeight=820&originWidth=1310&status=done&style=none&width=1310" alt=""></a></p><p>3.点击 Generate new token<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170920.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528170920.png#align=left&display=inline&height=668&margin=%5Bobject%20Object%5D&originHeight=668&originWidth=1260&status=done&style=none&width=1260" alt=""></a></p><p>4.Note 随便填，勾选复选框 repo ，接着到页面底部 Generate token 就完成了<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171107.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171107.png#align=left&display=inline&height=783&margin=%5Bobject%20Object%5D&originHeight=783&originWidth=1266&status=done&style=none&width=1266" alt=""></a></p><p>5.然后会生成一串字符 token，这个 token 只出现一次，所以要复制保存一下<br><a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171329.png" target="_blank" rel="noopener"><img src="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528171329.png#align=left&display=inline&height=438&margin=%5Bobject%20Object%5D&originHeight=438&originWidth=1069&status=done&style=none&width=1069" alt=""></a></p><h3 id="4-配置-PicGo-客户端"><a href="#4-配置-PicGo-客户端" class="headerlink" title="4.配置 PicGo 客户端"></a>4.配置 PicGo 客户端</h3><p>如下图配置：<a href="https://raw.githubusercontent.com/LicV587/img/master/picgo/20190528165451.jpg" target="_blank" rel="noopener"></a><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1577937641444-583cf8c1-ddd3-400b-aa6b-addaf3ecb388.png#align=left&display=inline&height=449&margin=%5Bobject%20Object%5D&name=image.png&originHeight=898&originWidth=1606&size=1014465&status=done&style=none&width=803" alt="image.png"></p><p>说明：</p><ul><li>仓库名 即你的仓库名</li><li>分支名 默认 master</li><li>Token 就是刚刚复制的那一串字符</li><li>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 picgo 这个文件夹</li><li>域名:<a href="https://raw.githubusercontent.com/Leader755/github_PicGo/master" target="_blank" rel="noopener">https://raw.githubusercontent.com/Leader755/github_PicGo/master</a> 这个要改一下，改成你自己的，格式：<a href="https://raw.githubusercontent.com/[用户名]/[仓库名]/master" target="_blank" rel="noopener">https://raw.githubusercontent.com/[用户名]/[仓库名]/master</a></li></ul><p>然后点击确定，在点击设为默认图床，就 OK 了。</p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.hexo主题配置</title>
      <link href="/leader755/52316.html"/>
      <url>/leader755/52316.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-hexo-主题官网"><a href="#1-hexo-主题官网" class="headerlink" title="1.hexo 主题官网"></a>1.hexo 主题官网</h2><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p><h2 id="2-应用以及下载主题"><a href="#2-应用以及下载主题" class="headerlink" title="2.应用以及下载主题"></a>2.应用以及下载主题</h2><p>说明：在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>， 后者称为 <strong>主题配置文件</strong>。（必看）</p><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至<strong>站点目录(**</strong>即根目录下的文件_config.yml 文件*<strong>*)</strong>的  <code>themes</code>  目录下， 然后修改下配置文件即可。next 为主题名</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：</span>$ cd your<span class="token operator">-</span>hexo<span class="token operator">-</span>site$ git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>iissnan<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>next themes<span class="token operator">/</span>next</code></pre><p>###</p><h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2.启用主题"></a>2.启用主题</h3><p>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 <strong>站点配置文件</strong>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next(主题名)</code>。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588326982972-1828234c-3a21-48e1-ac1e-5b57480ac6f0.png#align=left&display=inline&height=111&margin=%5Bobject%20Object%5D&name=image.png&originHeight=222&originWidth=1012&size=24250&status=done&style=none&width=506" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript">theme<span class="token punctuation">:</span> next<span class="token punctuation">;</span></code></pre><h4 id="2-1-本文使用的是（hexo-theme-halo）主题"><a href="#2-1-本文使用的是（hexo-theme-halo）主题" class="headerlink" title="2.1 本文使用的是（hexo-theme-halo）主题"></a>2.1 本文使用的是（hexo-theme-halo）主题</h4><p>1&gt;直接下载 git  clone</p><pre class=" language-javascript"><code class="language-javascript">git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>hongweifuture<span class="token operator">/</span>hexo<span class="token operator">-</span>theme<span class="token operator">-</span>halo<span class="token punctuation">.</span>git themes<span class="token operator">/</span>halo</code></pre><p>2&gt;直接将<code>themes/halo/config/source</code>内所有内容拷贝到<code>Hexo</code>根目录下的<code>source</code>文件夹内替换</p><h4 id="2-2-配置切换主题"><a href="#2-2-配置切换主题" class="headerlink" title="2.2 配置切换主题"></a>2.2 配置切换主题</h4><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: halo</code><br><code>根目录_config.yml</code> 文件的其它修改建议:</p><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>[http://xxx.github.io](http://xxx.github.io)</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="3-验证主题"><a href="#3-验证主题" class="headerlink" title="3.验证主题"></a>3.验证主题</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//最好先清除缓存</span>hexo clean<span class="token comment" spellcheck="true">//打包</span>hexo g<span class="token comment" spellcheck="true">//启动</span>hexo s<span class="token comment" spellcheck="true">//发布到 github</span>hexo s <span class="token operator">-</span>d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.hexo插件篇（必看）</title>
      <link href="/leader755/40372.html"/>
      <url>/leader755/40372.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-gt-安装插件说明"><a href="#1-gt-安装插件说明" class="headerlink" title="1&gt;安装插件说明"></a>1&gt;安装插件说明</h2><p>如果应用官网的主题你会发现，有可能出现打不开的情况，这是由于有些主题使用的插件，本地并没有安装导致的报错。所以本篇文章为补充说明篇。（无问题的可以跳过）</p><h2 id="2-gt-常用的插件"><a href="#2-gt-常用的插件" class="headerlink" title="2&gt;常用的插件"></a>2&gt;常用的插件</h2><h3 id="代码高亮（建议安装）"><a href="#代码高亮（建议安装）" class="headerlink" title="代码高亮（建议安装）"></a>代码高亮（建议安装）</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">-</span>S hexo<span class="token operator">-</span>prism<span class="token operator">-</span>plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-javascript"><code class="language-javascript">highlight<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">false</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">true</span>  auto_detect<span class="token punctuation">:</span> <span class="token boolean">false</span>  tab_replace<span class="token punctuation">:</span> <span class="token boolean">false</span>  wrap<span class="token punctuation">:</span> <span class="token boolean">true</span>  hljs<span class="token punctuation">:</span> <span class="token boolean">false</span>prism_plugin<span class="token punctuation">:</span>  mode<span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    # realtime<span class="token operator">/</span>preprocess  theme<span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  line_number<span class="token punctuation">:</span> <span class="token boolean">false</span>    # <span class="token keyword">default</span> <span class="token boolean">false</span>  custom_css<span class="token punctuation">:</span></code></pre><h3 id="搜索（建议安装）"><a href="#搜索（建议安装）" class="headerlink" title="搜索（建议安装）"></a>搜索（建议安装）</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>search <span class="token operator">--</span>save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-javascript"><code class="language-javascript">search<span class="token punctuation">:</span> path<span class="token punctuation">:</span> search<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>field<span class="token punctuation">:</span> post<span class="token punctuation">;</span></code></pre><p>###</p><h3 id="文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）"><a href="#文章字数统计插件（建议安装）（使用了-halo-主题则必须安装）" class="headerlink" title="文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）"></a>文章字数统计插件（建议安装）（使用了 halo 主题则必须安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm i <span class="token operator">--</span>save hexo<span class="token operator">-</span>wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：<br>(此处注意源文档的 postInfo 是错的，应该为 post_wordcount)</p><pre class=" language-javascript"><code class="language-javascript">post_wordcount<span class="token punctuation">:</span>  date<span class="token punctuation">:</span> <span class="token boolean">true</span> # 发布日期  update<span class="token punctuation">:</span> <span class="token boolean">true</span> # 更新日期  wordCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章字数统计  totalCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 站点总文章字数  min2read<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读时长  readCount<span class="token punctuation">:</span> <span class="token boolean">true</span> # 文章阅读次数</code></pre><h3 id="添加代码压缩（建议安装）"><a href="#添加代码压缩（建议安装）" class="headerlink" title="添加代码压缩（建议安装）"></a>添加代码压缩（建议安装）</h3><p><a href="https://github.com/rozbo/hexo-neat" target="_blank" rel="noopener">hexo-neat</a>插件实现压缩代码，底层是通过 gulp 来实现的。但是这个插件是有 Bug 的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul><p>在博客站点根目录执行安装代码：</p><pre><code>npm install hexo-neat --save</code></pre><p>紧接着在站点根目录下的配置文件添加如下代码：</p><pre><code>neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - &#39;*.min.css&#39;neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - &#39;*.min.js&#39;</code></pre><p>然后直接 hexo cl&amp;&amp;hexo g 就可以了，会自动压缩文件 。<br>补充：为了解决以上 Bug，对于<code>halo</code>主题（其他主题自行解决）需要将以上默认配置修改为：</p><pre><code>#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）neat_enable: trueneat_html:  enable: true  exclude:    - &#39;**/*.md&#39;neat_css:  enable: true  exclude:    - &#39;**/*.min.css&#39;neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - &#39;**/*.min.js&#39;    - &#39;**/**/instantpage.js&#39;    - &#39;**/matery.js&#39;</code></pre><p>###</p><h3 id="外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）"><a href="#外链跳转插件-hexo-external-link（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）"></a>外链跳转插件 hexo-external-link（可选安装）（使用了 halo 主题则必须安装）</h3><blockquote><p><a href="https://github.com/hvnobug/hexo-external-link" target="_blank" rel="noopener">hexo-external-link</a>是一个跳转外链相关插件。自动为所有 html 文件中外链的 a 标签生成对应的属性。 比如 设置<code>target=’_blank’</code>, <code>rel=’external nofollow noopener noreferrer’</code>告诉搜索引擎这是外部链接,不要将该链接计入权重。 同时自动生成外链跳转页面,默认在根目录下 go.html;</p></blockquote><p>安装:</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>external<span class="token operator">-</span>link <span class="token operator">--</span>save</code></pre><p>配置插件 在 Hexo 根目录的_config.yml 文件中添加如下配置。</p><pre class=" language-javascript"><code class="language-javascript">hexo_external_link<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  enable_base64_encode<span class="token punctuation">:</span> <span class="token boolean">true</span>  url_param_name<span class="token punctuation">:</span> <span class="token string">'u'</span>  html_file_name<span class="token punctuation">:</span> <span class="token string">'go.html'</span>  target_blank<span class="token punctuation">:</span> <span class="token boolean">true</span>  link_rel<span class="token punctuation">:</span> <span class="token string">'external nofollow noopener noreferrer'</span>  domain<span class="token punctuation">:</span> <span class="token string">'your_domain'</span> # 如果开启了防盗链  safety_chain<span class="token punctuation">:</span> <span class="token boolean">true</span></code></pre><ul><li>enable：是否开启 hexo_external_link 插件 - 默认 false</li><li>enable_base64_encode：是否对跳转 url 使用 base64 编码 - 默认 fasle</li><li>url_param_name：url 参数名,在跳转到外链传递给 html_file_name 的参数名 - 默认 ‘u’</li><li>html_file_name：跳转到外链的页面文件路径 - 默认 ‘go.html’</li><li>target_blank：是否为外链的 a 标签添加 target=’_blank’ - 默认 true</li><li>link_rel：设置外链的 a 标签的 rel 属性 - 默认 ‘external nofollow noopener noreferrer’</li><li>domain：如果开启了防盗链,除了 localhost 和 domain 之外调用会跳到主页,同时也是判断链接是否为外链的依据 - 默认 window.location.host</li><li>safety_chain：go.html 为了防止外链盗用 对域名进行的判断 - 默认 false 即关闭防盗链</li></ul><p>###</p><h3 id="添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-RSS-订阅支持（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）"></a>添加 RSS 订阅支持（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>feed <span class="token operator">--</span>save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-javascript"><code class="language-javascript">feed<span class="token punctuation">:</span> type<span class="token punctuation">:</span> atom<span class="token punctuation">;</span>path<span class="token punctuation">:</span> atom<span class="token punctuation">.</span>xml<span class="token punctuation">;</span>limit<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span>hub<span class="token punctuation">:</span> content<span class="token punctuation">:</span> content_limit<span class="token punctuation">:</span> <span class="token number">140</span><span class="token punctuation">;</span>content_limit_delim<span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>order_by<span class="token punctuation">:</span> <span class="token operator">-</span>date<span class="token punctuation">;</span></code></pre><h3 id="添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）"><a href="#添加-sitemap-站点地图（可选安装）（使用了-halo-主题则必须安装）" class="headerlink" title="添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）"></a>添加 sitemap 站点地图（可选安装）（使用了 halo 主题则必须安装）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-sitemap" target="_blank" rel="noopener">hexo-generator-sitemap</a> 的 Hexo 插件来做 <code>Sitemap</code>，安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>sitemap <span class="token operator">--</span>save</code></pre><p>访问地址：/sitemap.xml</p><h3 id="中文链接转拼音（可选安装）"><a href="#中文链接转拼音（可选安装）" class="headerlink" title="中文链接转拼音（可选安装）"></a>中文链接转拼音（可选安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。<br>这里为可选安装，因为我希望使用<code>urlname</code>进行连接访问，中文链接转拼音由一个缺点就是当文章名字过长会显示十分臃肿。<code>urlname</code>的方式见下文。<br>安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm i hexo<span class="token operator">-</span>permalink<span class="token operator">-</span>pinyin <span class="token operator">--</span>save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-javascript"><code class="language-javascript">permalink_pinyin<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  separator<span class="token punctuation">:</span> <span class="token string">'-'</span> # <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">'-'</span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><p>###</p><p>###</p><h3 id="添加-emoji-表情支持（可选安装）"><a href="#添加-emoji-表情支持（可选安装）" class="headerlink" title="添加 emoji 表情支持（可选安装）"></a>添加 emoji 表情支持（可选安装）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>filter<span class="token operator">-</span>github<span class="token operator">-</span>emojis <span class="token operator">--</span>save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-javascript"><code class="language-javascript">githubEmojis<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  className<span class="token punctuation">:</span> github<span class="token operator">-</span>emoji  inject<span class="token punctuation">:</span> <span class="token boolean">true</span>  styles<span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span></code></pre><h3 id="deploy-发布插件（可选安装）（部署到-github-需要安装）"><a href="#deploy-发布插件（可选安装）（部署到-github-需要安装）" class="headerlink" title="deploy 发布插件（可选安装）（部署到 github 需要安装）"></a>deploy 发布插件（可选安装）（部署到 github 需要安装）</h3><p>如果你想通过<code>deploy</code>的方式进行推送<code>public文件夹</code>到托管网站，你需要安装</p><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre><p>当然你也可以选择不装，使用 Github Actions、docker 等方式<br>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ej``s</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>socialLink<span class="token punctuation">.</span>github<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token operator">%</span><span class="token operator">></span>    <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"&lt;%= theme.socialLink.github %>"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"tooltipped"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span> data<span class="token operator">-</span>tooltip<span class="token operator">=</span><span class="token string">"访问我的GitHub"</span> data<span class="token operator">-</span>position<span class="token operator">=</span><span class="token string">"top"</span> data<span class="token operator">-</span>delay<span class="token operator">=</span><span class="token string">"50"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>i <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"fab fa-github"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>i<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token punctuation">}</span> <span class="token operator">%</span><span class="token operator">></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。<br>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    artist<span class="token punctuation">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    artist<span class="token punctuation">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    cover<span class="token punctuation">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    artist<span class="token punctuation">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    cover<span class="token punctuation">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><h1 id="是否在首页显示音乐"><a href="#是否在首页显示音乐" class="headerlink" title="是否在首页显示音乐."></a>是否在首页显示音乐.</h1><pre class=" language-javascript"><code class="language-javascript"># 是否在首页显示音乐<span class="token punctuation">.</span>music<span class="token punctuation">:</span>  enable<span class="token punctuation">:</span> <span class="token boolean">true</span>  showTitle<span class="token punctuation">:</span> <span class="token boolean">false</span>  title<span class="token punctuation">:</span> 听听音乐  fixed<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否开启吸底模式  autoplay<span class="token punctuation">:</span> <span class="token boolean">false</span> # 是否自动播放  theme<span class="token punctuation">:</span> <span class="token string">'#42b983'</span>  loop<span class="token punctuation">:</span> <span class="token string">'all'</span> # 音频循环播放<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'none'</span>  order<span class="token punctuation">:</span> <span class="token string">'list'</span> # 音频循环顺序<span class="token punctuation">,</span> 可选值<span class="token punctuation">:</span> <span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'random'</span>  preload<span class="token punctuation">:</span> <span class="token string">'auto'</span> # 预加载，可选值<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span> <span class="token string">'metadata'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span>  volume<span class="token punctuation">:</span> <span class="token number">0.7</span> # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded<span class="token punctuation">:</span> <span class="token boolean">false</span> # 列表默认折叠  listMaxHeight<span class="token punctuation">:</span> # 列表最大高度</code></pre><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><ol><li><strong>直接将<code>themes/halo/config/scaffolds</code>内所有内容拷贝到**</strong><code>Hexo</code>根目录下*<strong>*的<code>scaffolds</code>文件夹内替换</strong></li><li>或者自己重新修改，修改请参考下面</li></ol><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 、<code>urlname</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>[http://xxx.com/xxx.jpg](http://xxx.com/xxx.jpg)</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>urlname</td><td>index</td><td>文章访问路径，需要在<code>Hexo</code>根目录下<code>_config.yml</code>文件中使用<code>permalink: :urlname/</code>和<code>permalink_defaults:</code></td></tr><tr><td><code>urlname: index</code></td><td></td><td></td></tr><tr><td>toc</td><td><code>true</code></td><td>permalink_defaults:是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>urlname: index 是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章 md 文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h3><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token punctuation">.</span>bg<span class="token operator">-</span>color <span class="token punctuation">{</span>    background<span class="token operator">-</span>image<span class="token punctuation">:</span> linear<span class="token operator">-</span><span class="token function">gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> #4cbf30 <span class="token number">0</span><span class="token operator">%</span><span class="token punctuation">,</span> #0f9d58 <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>@<span class="token operator">-</span>webkit<span class="token operator">-</span>keyframes rainbow <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span>@keyframes rainbow <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span></code></pre><p>/</p><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".bg-cover"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>  <span class="token string">"background-image"</span><span class="token punctuation">,</span>  <span class="token string">"url(/medias/banner/"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".jpg)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h3 id="修改文章访问路径-urlname"><a href="#修改文章访问路径-urlname" class="headerlink" title="修改文章访问路径 urlname"></a>修改文章访问路径 urlname</h3><p>在<code>Hexo</code>根目录<code>_config.yaml</code>中添加以下配置</p><pre><code># permalink: :year/:month/:day/:title/permalink: :urlname/permalink_defaults:  urlname: index</code></pre><p>##</p><h3 id="全站-CDN"><a href="#全站-CDN" class="headerlink" title="全站 CDN"></a>全站 CDN</h3><blockquote><p>CDN 的全称是<code>Content Delivery Network</code>，即内容分发网络。CDN 是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。——百度百科</p></blockquote><p>放在 Github 的资源在国内加载速度比较慢，因此需要使用 CDN 加速来优化网站打开速度，jsDelivr + Github 便是免费且好用的 CDN，非常适合博客网站使用。</p><p>用法：<br><a href="https://cdn.jsdelivr.net/gh/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/</a>你的用户名/你的仓库名@发布的版本号/文件路径</p><p>如：<br><a href="http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/" target="_blank" rel="noopener">http://cdn.jsdelivr.net/gh/hongweifuture/hongweifuture.github.io/medias/featureimages/</a>12.jpg<br>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，如果需要版本，请创建<code>releases</code>然后按照格式添加<br>当然最直接的办法就是使用 <code>username/username.github.io/</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.hexo文档部署到 Github和 coding</title>
      <link href="/leader755/58848.html"/>
      <url>/leader755/58848.html</url>
      
        <content type="html"><![CDATA[<h2 id="1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："><a href="#1：打开项目根目录下的-config-yml-配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：" class="headerlink" title="1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）："></a>1：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313278812-df6c1515-c7b2-4988-ab07-98655129341a.png#align=left&display=inline&height=144&margin=%5Bobject%20Object%5D&name=image.png&originHeight=288&originWidth=1052&size=44477&status=done&style=none&width=526" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333533439-ce902a29-c0fc-49e0-90a7-90e71ce9c3aa.png#align=left&display=inline&height=120&margin=%5Bobject%20Object%5D&name=image.png&originHeight=240&originWidth=972&size=33032&status=done&style=none&width=486" alt="image.png"><br>如果不部署到 coding，就只写 github 就行。</p><pre class=" language-javascript"><code class="language-javascript">deploy<span class="token punctuation">:</span> type<span class="token punctuation">:</span> git<span class="token punctuation">;</span>repo<span class="token punctuation">:</span> github<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//github.com/Leader755/leader755.github.io.git</span>https<span class="token punctuation">:</span> coding<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">//e.coding.net/Leader755/leader755.coding.git</span>https<span class="token punctuation">:</span> branch<span class="token punctuation">:</span> master<span class="token punctuation">;</span></code></pre><h2 id="2：要安装一个部署插件-hexo-deployer-git。"><a href="#2：要安装一个部署插件-hexo-deployer-git。" class="headerlink" title="2：要安装一个部署插件 hexo-deployer-git。"></a>2：要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>。</h2><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre><h2 id="3：发布到-github"><a href="#3：发布到-github" class="headerlink" title="3：发布到 github"></a>3：发布到 github</h2><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p><pre class=" language-javascript"><code class="language-javascript">hexo g <span class="token operator">-</span>d</code></pre><p>稍等一会，在浏览器访问网址： <a href="https://xn--6qqv7i14ofosyrb.github.io/" target="_blank" rel="noopener">https://你的用户名.github.io</a> 就会看到你的博客啦！！</p><h2 id="4-写作并发布"><a href="#4-写作并发布" class="headerlink" title="4.写作并发布"></a>4.写作并发布</h2><h3 id="1-直接写作（情况）"><a href="#1-直接写作（情况）" class="headerlink" title="1.直接写作（情况）"></a>1.直接写作（情况）</h3><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> 官网。<br>新建文章，输入以下命令即可</p><pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token string">'文章标题'</span></code></pre><p>执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。<br>在 Markdown 文章里面输入你的文章内容</p><h3 id="2-存查稿-情况"><a href="#2-存查稿-情况" class="headerlink" title="2.存查稿(情况)"></a>2.存查稿(情况)</h3><h4 id="1-首先查看-sources-文件下是否有-drafts-文件夹"><a href="#1-首先查看-sources-文件下是否有-drafts-文件夹" class="headerlink" title="1.首先查看 sources 文件下是否有_drafts 文件夹"></a>1.首先查看 sources 文件下是否有_drafts 文件夹</h4><p>**  _drafts(草稿文章缓存区)，_posts(正式文章缓存区)**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588313764893-f9511ad0-1933-4c23-becd-bc162c0e8f3e.png#align=left&display=inline&height=149&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=782&size=24987&status=done&style=none&width=391" alt="image.png"></p><p>如果没有该文件夹或者报错，则运行：</p><pre class=" language-javascript"><code class="language-javascript">hexo <span class="token keyword">new</span> <span class="token class-name">draft</span> <span class="token string">"My First Blog Post"</span></code></pre><h4 id="2-将草稿文章推送到正式区"><a href="#2-将草稿文章推送到正式区" class="headerlink" title="2.将草稿文章推送到正式区"></a>2.将草稿文章推送到正式区</h4><pre class=" language-javascript"><code class="language-javascript">hexo publish <span class="token string">"My First Blog Post"</span></code></pre><h3 id="2-打包"><a href="#2-打包" class="headerlink" title="2.打包"></a>2.打包</h3><pre class=" language-javascript"><code class="language-javascript">hexo g</code></pre><h3 id="3-运行本地-hexo"><a href="#3-运行本地-hexo" class="headerlink" title="3.运行本地 hexo"></a>3.运行本地 hexo</h3><pre class=" language-javascript"><code class="language-javascript">hexo s</code></pre><h3 id="4-部署到-github-和-coding"><a href="#4-部署到-github-和-coding" class="headerlink" title="4.部署到 github 和 coding"></a>4.部署到 github 和 coding</h3><p>因为 github 和 coding 使用了同一个公钥，所以推送时会触发多个仓库。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//部署前先清理一下缓存命令</span>hexo clean<span class="token comment" spellcheck="true">//部署</span>hexo g <span class="token operator">-</span>d</code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>serverless 和 hexo快速搭建静态博客</title>
      <link href="/leader755/2093.html"/>
      <url>/leader755/2093.html</url>
      
        <content type="html"><![CDATA[<p>##</p><h2 id="1-首先搭建一个用-hexo-快速搭建一个博客"><a href="#1-首先搭建一个用-hexo-快速搭建一个博客" class="headerlink" title="1.首先搭建一个用 hexo 快速搭建一个博客"></a>1.首先搭建一个用 hexo 快速搭建一个博客</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装脚手架 hexo-cli</span>npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g<span class="token comment" spellcheck="true">//初始化一个 blog</span>hexo init blog<span class="token comment" spellcheck="true">//访问本地博客(默认地址为：localhost:4000)</span>cd bloghexo s</code></pre><h2 id="2-serverless-文档（推荐）"><a href="#2-serverless-文档（推荐）" class="headerlink" title="2.serverless 文档（推荐）"></a>2.serverless 文档（推荐）</h2><p>github 官方中文文档：<a href="https://github.com/serverless/serverless/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/serverless/serverless/blob/master/README_CN.md</a><br>serverless 中文博客： <a href="https://serverlesscloud.cn/" target="_blank" rel="noopener">https://serverlesscloud.cn/</a></p><h2 id="3-使用-npm-安装"><a href="#3-使用-npm-安装" class="headerlink" title="3.使用 npm 安装"></a>3.使用 npm 安装</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局安装 serverless</span>npm install <span class="token operator">-</span>g serverless</code></pre><h2 id="4-在-blog-的根目录创建一个-serverless-yml-文件"><a href="#4-在-blog-的根目录创建一个-serverless-yml-文件" class="headerlink" title="4.在 blog 的根目录创建一个 serverless.yml 文件"></a>4.在 blog 的根目录创建一个 serverless.yml 文件</h2><p>复制以下文件内容：唯一注意的地方就是 src 的路径：根据实际更改（即为博客的 index.html 网页）</p><pre class=" language-javascript"><code class="language-javascript">myWebsite<span class="token punctuation">:</span>  component<span class="token punctuation">:</span> <span class="token string">'@serverless/tencent-website'</span>  inputs<span class="token punctuation">:</span>    code<span class="token punctuation">:</span>      src<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token operator">/</span><span class="token keyword">public</span>      index<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html      error<span class="token punctuation">:</span> index<span class="token punctuation">.</span>html    region<span class="token punctuation">:</span> ap<span class="token operator">-</span>guangzhou    bucketName<span class="token punctuation">:</span> my<span class="token operator">-</span>bucket</code></pre><h2 id="5-将静态博客发布到-tencent-serverless"><a href="#5-将静态博客发布到-tencent-serverless" class="headerlink" title="5.将静态博客发布到 tencent-serverless"></a>5.将静态博客发布到 tencent-serverless</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//首先将 hexo 中博客打包</span>heox g<span class="token comment" spellcheck="true">//将本地的博客部署到 serverless</span>serverless<span class="token operator">/</span>sls <span class="token operator">--</span>debug</code></pre><h2 id="6-稍等片刻可以在-命令行工具看到以下"><a href="#6-稍等片刻可以在-命令行工具看到以下" class="headerlink" title="6.稍等片刻可以在 命令行工具看到以下"></a>6.稍等片刻可以在 命令行工具看到以下</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607113775-6a30d4dc-3c70-4506-9f5b-7af5a07b4e05.png#align=left&display=inline&height=567&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1134&originWidth=1298&size=453581&status=done&style=none&width=649" alt="image.png"><br>此时需要的操作就是用手机微信去扫描（此处会检测是否有腾讯云账号，没有会提示注册，有会直接成功）并返回以下内容：此处就是部署成功，并返回地址，可以直接访问。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588607252405-a0fad8a2-f2d5-49ef-8101-09a10eec3916.png#align=left&display=inline&height=264&margin=%5Bobject%20Object%5D&name=image.png&originHeight=528&originWidth=1274&size=364624&status=done&style=none&width=637" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用的问题指南</title>
      <link href="/leader755/52181.html"/>
      <url>/leader755/52181.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-hexo-g-d-会报错"><a href="#1-hexo-g-d-会报错" class="headerlink" title="1.hexo g -d 会报错"></a>1.hexo g -d 会报错</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588475689582-0959dce9-cdf9-4e4f-937b-175fcab6f7ce.png#align=left&display=inline&height=127&margin=%5Bobject%20Object%5D&name=image.png&originHeight=254&originWidth=1160&size=179534&status=done&style=none&width=580" alt="image.png"><br>win 本地仓库：将 https 改为 ssh</p><pre class=" language-javascript"><code class="language-javascript">deploy：   type：git   repo：git@github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>Leader755<span class="token operator">/</span>leader755<span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token punctuation">.</span>git   branch：master</code></pre><p>mac:</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎使用 MWeb</title>
      <link href="/leader755/18674.html"/>
      <url>/leader755/18674.html</url>
      
        <content type="html"><![CDATA[<p>MWeb 是专业的 Markdown 写作、记笔记、静态博客生成软件，目前已支持 Mac，iPad 和 iPhone。MWeb 有以下特色：</p><h2 id="软件本身："><a href="#软件本身：" class="headerlink" title="软件本身："></a>软件本身：</h2><ul><li>使用原生的 macOS 技术打造，追求与系统的完美结合。</li><li>原则上，首先是追求界面简洁和高性能，然后才是强大易用，功能全面。</li></ul><h2 id="Markdown-语法："><a href="#Markdown-语法：" class="headerlink" title="Markdown 语法："></a>Markdown 语法：</h2><ul><li>使用 GitHub Flavored Markdown 语法，简称 GFM 语法。</li><li>支持表格、TOC、LaTeX、代码块、任务列表、脚注等。</li><li>画图库支持 mermaid, viz, ECharts, PlantUML, Sequence, Flow。</li></ul><h2 id="Markdown-辅助："><a href="#Markdown-辅助：" class="headerlink" title="Markdown 辅助："></a>Markdown 辅助：</h2><ul><li>支持截图并粘贴、复制并粘贴、拖拽等方式插入图片并直接显示在编辑器内。</li><li>在兼容 Markdown 语法的情况下支持设置图片宽度。</li><li>好用的表格插入和 LaTeX 书写辅助。</li></ul><h2 id="Markdown-输出："><a href="#Markdown-输出：" class="headerlink" title="Markdown 输出："></a>Markdown 输出：</h2><ul><li>支持导出为图片、HTML、Epub、PDF、RTF、Docx。</li><li>支持发布到 WordPress、支持 Metaweblog API 协议的服务、Wordpress.com、印象笔记（Evernote）、Blogger、Medium、Tumblr、语雀、Ghost、少数派 Matrix。</li><li>图片上传服务（图床）支持 Imgur、七牛云、又拍云、腾讯云 COS、阿里云 OSS、SM.MS 和自定义的图床服务。</li></ul><h2 id="Markdown-笔记："><a href="#Markdown-笔记：" class="headerlink" title="Markdown 笔记："></a>Markdown 笔记：</h2><ul><li>强大的文档库支持分类树和标签管理文档，文档可归类于多个分类，可以把分类整个导出为 Epub、PDF 和生成静态网站。非常合适用于笔记、个人知识收集、管理和输出。</li><li>快速笔记：随意增加笔记及图片等素材，支持以天为单位把增加的素材组合在一个文档内，方便整理及记录历史收集情况。</li><li>快速搜索：目前已支持全局快捷键调出搜索。</li></ul><h2 id="外部-Markdown-文档："><a href="#外部-Markdown-文档：" class="headerlink" title="外部 Markdown 文档："></a>外部 Markdown 文档：</h2><ul><li>外部 Markdown 文档使用外部模式管理。外部模式使用目录树的方式编辑和管理你的 Markdown 文档，还能很好的支持 GitBook、Jekyll、Hexo 等等编辑和图片插入。</li></ul><h2 id="MWeb-文档："><a href="#MWeb-文档：" class="headerlink" title="MWeb 文档："></a>MWeb 文档：</h2><p>如果要更详细了解 MWeb，建议你一定要去看一下官网的帮助文档，网址为：<a href="https://zh.mweb.im/help.html" target="_blank" rel="noopener">https://zh.mweb.im/help.html</a>。我们建议在使用文档库之前，一定要阅读一下 <a href="https://zh.mweb.im/mweb-library.html" target="_blank" rel="noopener">MWeb 文档库详细介绍</a> 这篇文章，以便更好的使用文档库。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何绕开referrer防盗链</title>
      <link href="/leader755/49766.html"/>
      <url>/leader755/49766.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-referrer"><a href="#什么是-referrer" class="headerlink" title="什么是 referrer"></a>什么是 referrer</h2><p>当一用户点击当前页面中的一个链接，然后跳转到目标页面时，目标页面会收到一个信息，即用户是从哪个源链接跳转过来的。如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595703140078-870fec1d-0742-4dea-828a-1f32819af187.png#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1086&originWidth=1184&size=153142&status=done&style=none&width=592" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/webp/241787/1595702418075-1743cd6e-ed7c-4b5b-9f96-7f89fff17373.webp#align=left&display=inline&height=543&margin=%5Bobject%20Object%5D&originHeight=543&originWidth=896&size=0&status=done&style=none&width=896" alt=""><br>也就是说，当你发起一个 http 请求，请求头中的<code>referrer</code>字段就说明了你是从哪个页面发起该请求的。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有时候我们需要控制这个<code>referrer</code>字段的值，即是否让其显示在请求头中，或者是否显示完整路径等。尤其是在以下两个使用场景：</p><h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><p>在社交网站的个人中心页面，也许会存在一些外链，这时候社交网站肯定不希望用户在点击这些链接跳转到其他第三方网站时会将自己个人中心的 URL 信息显示在<code>referrer</code>字段中传过去，尤其是个人中心页面的 URL 往往会带着用户数据和一些敏感信息。这时候可以选择不显示来源页面 URL 信息或者只显示一个网站根地址 hostname。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>有些使用了 https 的网站，可能在 URL 中使用一个参数（sid）来作为用户身份凭证，而又需要引入其他 https 网站的资源，这种情况，网站肯定不希望泄露用户的身份凭证信息。当 https 网站需要引入不安全的 http 网站的资源或者有链接要跳转到 http 网站时，这时候将 https 源网站的 URL 信息传过去也是不太安全的。<br>当然还有其他情况下需要<code>referrer</code>的值，比如最近公司所做的项目中，有一个请求由于请求头过大导致响应是 400，我们的<code>Referrer Policy</code>是默认的情况，显示的<code>referrer</code>是完整的 URL 信息，该 URL 带了很多敏感数据比如加密后的 token，sessionID 等，长度特别长，请求头中的 cookie 和请求的 URL 也带着很大块的信息，最终我们决定让<code>referrer</code>只携带网站根地址的信息而不是其完整路径，由此减小了 header 的大小。</p><h2 id="Referrer-Policy"><a href="#Referrer-Policy" class="headerlink" title="Referrer-Policy"></a>Referrer-Policy</h2><p><code>Referrer-Policy</code>的作用就是为了控制请求头中<code>referrer</code>的内容，目前<code>Referrer-Policy</code>只包含以下几种值：</p><table><thead><tr><th align="left">策略名称</th><th align="left">属性值（新）</th><th align="left">属性值（旧）</th></tr></thead><tbody><tr><td align="left">No Referrer</td><td align="left">no-referrer</td><td align="left">never</td></tr><tr><td align="left">No Referrer When Downgrade</td><td align="left">no-referrer-when-downgrade</td><td align="left">default</td></tr><tr><td align="left">Origin Only</td><td align="left">origin</td><td align="left">-</td></tr><tr><td align="left">Origin When Cross-origin</td><td align="left">origin-when-crossorigin</td><td align="left">-</td></tr><tr><td align="left">Unsafe URL</td><td align="left">unsafe-url</td><td align="left">always</td></tr></tbody></table><p>简单介绍下这五种类型的具体含义：</p><ul><li><strong>No Referrer</strong>：任何情况下都不发送 Referrer 信息；</li><li><strong>No Referrer When Downgrade</strong>：仅当发生协议降级（如 HTTPS 页面引入 HTTP 资源，从 HTTPS 页面跳到 HTTP 等）时不发送 Referrer 信息。这个规则是现在大部分浏览器默认所采用的；</li><li><strong>Origin Only</strong>：发送只包含 host 部分的 Referrer。启用这个规则，无论是否发生协议降级，无论是本站链接还是站外链接，都会发送 Referrer 信息，但是只包含协议 + host 部分（不包含具体的路径及参数等信息）；</li><li><strong>Origin When Cross-origin</strong>：仅在发生跨域访问时发送只包含 host 的 Referrer，同域下还是完整的。它与 <code>Origin Only</code> 的区别是多判断了是否 <code>Cross-origin</code>。需要注意的是协议、域名和端口都一致，才会被浏览器认为是同域；</li><li><strong>Unsafe URL</strong>：无论是否发生协议降级，无论是本站链接还是站外链接，统统都发送 Referrer 信息。正如其名，这是最宽松而最不安全的策略；</li></ul><h2 id="Referrer-Policy-更改方法"><a href="#Referrer-Policy-更改方法" class="headerlink" title="Referrer-Policy 更改方法"></a>Referrer-Policy 更改方法</h2><p>可以有以下 4 种方法：</p><p><strong>1.</strong> <code>Referrer-Policy</code> HTTP <code>header</code>设置：</p><pre class=" language-javascript"><code class="language-javascript">Referrer<span class="token operator">-</span>Policy<span class="token punctuation">:</span> origin</code></pre><p><strong>2.</strong> 通过<code>&lt;meta&gt;</code>元素改变<code>Referrer Policy</code>，直接修改名为<code>referrer</code>的内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre><p><strong>3.</strong> 给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener"><code>&lt;img&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"><code>&lt;iframe&gt;</code></a>, 或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>referrerpolicy</code>属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"origin"</span><span class="token operator">></span>复制代码</code></pre><p><strong>4.</strong> 如需设置不显示<code>referrer</code>信息时，也可以给 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>rel</code>的链接关系。</p><pre><code>&lt;a href=&quot;http://example.com&quot; rel=&quot;noreferrer&quot;&gt;复制代码</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用何种<code>Referrer Policy</code>取决于网站的需求，但是一般来说，<code>unsafe-url</code>是不太建议用的，同样，如果是只想显示网站的根地址，那么建议用<code>strict-origin</code>和 s<code>trict-origin-when-cross-origin</code>。如果 URL 中没有什么敏感信息，那就默认使用<code>no-referrer-when-downgrade</code>。</p><p>特别声明，文章转载自：<a href="https://juejin.im/post/5cd81b59518825686a06fd05" target="_blank" rel="noopener">https://juejin.im/post/5cd81b59518825686a06fd05</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> referrer </tag>
            
            <tag> 防盗链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo+ 又拍云创建个人图床工具</title>
      <link href="/leader755/50207.html"/>
      <url>/leader755/50207.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先注册又拍云账号"><a href="#1-首先注册又拍云账号" class="headerlink" title="1.首先注册又拍云账号"></a>1.首先注册又拍云账号</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039006495-6efd0c2e-cd03-40da-a7ab-1fd92ba5e92a.png#align=left&display=inline&height=686&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1372&originWidth=2560&size=163057&status=done&style=none&width=1280" alt="image.png"></p><h2 id="2-创建服务"><a href="#2-创建服务" class="headerlink" title="2.创建服务"></a>2.创建服务</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039347598-96d59ff1-aa83-45c2-bf56-2165d3dc572a.png#align=left&display=inline&height=689&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1378&originWidth=2560&size=226216&status=done&style=none&width=1280" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595039428519-cb3f789e-02c0-43c4-8ff3-30ca00b15b8a.png#align=left&display=inline&height=378&margin=%5Bobject%20Object%5D&name=image.png&originHeight=756&originWidth=2400&size=87492&status=done&style=none&width=1200" alt="image.png"></p><h2 id="3-审核完成后（域名需要备案，10-分钟以内审核完毕）"><a href="#3-审核完成后（域名需要备案，10-分钟以内审核完毕）" class="headerlink" title="3.审核完成后（域名需要备案，10 分钟以内审核完毕）"></a>3.审核完成后（域名需要备案，10 分钟以内审核完毕）</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595048966006-4c8f16b1-01ba-40f7-9e08-4fff73dd4a8c.png#align=left&display=inline&height=688&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1376&originWidth=2552&size=156189&status=done&style=none&width=1276" alt="image.png"></p><h2 id="4-点击账户管理，添加操作员"><a href="#4-点击账户管理，添加操作员" class="headerlink" title="4.点击账户管理，添加操作员"></a>4.点击账户管理，添加操作员</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595048861058-8644fd49-a611-4466-8248-61fb8a8dc573.png#align=left&display=inline&height=681&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1362&originWidth=2558&size=215488&status=done&style=none&width=1279" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595049324214-9ee14c50-a4a5-4594-a587-5c53ec5394c3.png#align=left&display=inline&height=573&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1146&originWidth=1192&size=153530&status=done&style=none&width=596" alt="image.png"></p><h2 id="5-PicGo-的设置"><a href="#5-PicGo-的设置" class="headerlink" title="5.PicGo 的设置"></a>5.PicGo 的设置</h2><ul><li><strong>存储空间和存储员都是自己配置好的，操作密码也是复制好的。</strong></li><li><strong>注意的是加速域名最好加上<code>http/https</code>，不然会无法在 PicGo 预览</strong></li><li><strong>指定存储路径可填可不填</strong></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595049428328-c5fc08be-d0ed-4560-9965-2cd128d347e1.png#align=left&display=inline&height=562&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1124&originWidth=1824&size=421187&status=done&style=none&width=912" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> 又拍云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 hexo 博客的图片链接失效问题</title>
      <link href="/leader755/3275.html"/>
      <url>/leader755/3275.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-首先找到-hexo-博客的主题文件夹目录"><a href="#1-首先找到-hexo-博客的主题文件夹目录" class="headerlink" title="1.首先找到 hexo 博客的主题文件夹目录"></a>1.首先找到 hexo 博客的主题文件夹目录</h2><pre class=" language-javascript"><code class="language-javascript">D<span class="token punctuation">:</span> \Blog_leader755\Blog_leader755\themes\Blog_leader755\themes\halo\Blog_leader755\themes\halo\layout\Blog_leader755\themes\halo\layout\_partial\Blog_leader755\themes\halo\layout\_partial\head<span class="token punctuation">.</span>ejs<span class="token punctuation">;</span></code></pre><p>修改上述路径的文件 head.ejs ，因为每个页面都会包含 head 这个文件，在里面加上一行代码就能解决。</p><h2 id="2-加入此行代码到页面"><a href="#2-加入此行代码到页面" class="headerlink" title="2.加入此行代码到页面"></a>2.加入此行代码到页面<head><link rel=manifest href=/manifest.json><meta name="generator" content="Hexo 4.1.1"><link rel="alternate" href="/atom.xml" title="Autumn cicada Blogs" type="application/atom+xml"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head></h2><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"no-referrer"</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><h2 id="3-暂时解决载了外链限制的问题"><a href="#3-暂时解决载了外链限制的问题" class="headerlink" title="3.暂时解决载了外链限制的问题"></a>3.暂时解决载了外链限制的问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595671131433-aced588a-b41e-406a-acf6-6133df722701.png#align=left&display=inline&height=195&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=1288&size=105257&status=done&style=none&width=644" alt="image.png"></p><h2 id="4-随之而来的问题出现了"><a href="#4-随之而来的问题出现了" class="headerlink" title="4.随之而来的问题出现了"></a>4.随之而来的问题出现了</h2><p>如果你同时使用了<a href="https://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a>(<a href="https://busuanzi.ibruce.info/)统计，你会发现问题，查看控制台会出现不蒜子出现跨域的请求。这是为什么呢。由于使用了" target="_blank" rel="noopener">https://busuanzi.ibruce.info/)统计，你会发现问题，查看控制台会出现不蒜子出现跨域的请求。这是为什么呢。由于使用了</a> no-referrer。</p><p>关于 no-refferrer 的相关问题可以查看此篇文章，在这里就不一一解释，直接给出解决方案。</p><h2 id="5-目前的解决方案"><a href="#5-目前的解决方案" class="headerlink" title="5.目前的解决方案"></a>5.目前的解决方案</h2><h3 id="1-gt-方案-："><a href="#1-gt-方案-：" class="headerlink" title="1&gt;方案-："></a>1&gt;方案-：</h3><p>按照网友的说法是，meta 是可以放在 <code>&lt;body&gt;</code> 里的吧。<br>所以把 <code>&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</code> 放到 <strong>archive-book.ejs</strong> 的最前面。<br>然后在网页结构里就会是这个样子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token operator">&lt;</span>head<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main-center no-sidebar okayNav-loaded"</span> <span class="token operator">...</span><span class="token operator">></span>  <span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"header"</span> <span class="token operator">...</span><span class="token operator">></span>  <span class="token operator">&lt;</span>aside <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"sidebar"</span> <span class="token operator">...</span><span class="token operator">></span>  <span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"main"</span> role<span class="token operator">=</span><span class="token string">"main"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"referrer"</span> content<span class="token operator">=</span><span class="token string">"never"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>article <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"article article-links article-type-list"</span> <span class="token operator">...</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span></code></pre><p>在它之上的所有链接都会带来源信息，之后的就是 no-referrer 了。所以理论上也就规避了图片的防盗链了。<br>划重点，但是并没有如愿解决不蒜子的跨域问题。</p><h3 id="2-gt-方案二：终极解决方案"><a href="#2-gt-方案二：终极解决方案" class="headerlink" title="2&gt;方案二：终极解决方案"></a>2&gt;方案二：终极解决方案</h3><p>由于可以给  <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a" target="_blank" rel="noopener"><code>&lt;a&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area" target="_blank" rel="noopener"><code>&lt;area&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img" target="_blank" rel="noopener"><code>&lt;img&gt;</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe" target="_blank" rel="noopener"><code>&lt;iframe&gt;</code></a>, 或者<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link" target="_blank" rel="noopener"><code>&lt;link&gt;</code></a>元素设置<code>referrerpolicy</code>属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://example.com"</span> referrerpolicy<span class="token operator">=</span><span class="token string">"no-referrer"</span><span class="token operator">></span></code></pre><p>所以，可以为所有文章内的图片动态添加 referrerpolicy 属性，通过查看控制台找到图片 img 的类名<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702030353-1e6505c0-c918-4e4a-864b-12077c39bc66.png#align=left&display=inline&height=275&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=2056&size=252165&status=done&style=none&width=1028" alt="image.png"></p><p>在文件夹中全局搜索类名，找到如下代码：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1595702163492-a013ed03-25f0-4474-a3d1-39aa2753081c.png#align=left&display=inline&height=387&margin=%5Bobject%20Object%5D&name=image.png&originHeight=774&originWidth=1204&size=160420&status=done&style=none&width=602" alt="image.png"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//为文章内的图片添加no-referrer来隐藏referer（解决第三方图片外链不显示问题）</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"referrerPolicy"</span><span class="token punctuation">,</span> <span class="token string">"no-referrer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意每个主题中的文章下的图片类名应该都不一致，所以类名需要根据实际情况，在控制台中查找文章中的图片类名，再去找相应的代码，为其动态添加 referrerPolicy 属性。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片链接失效 </tag>
            
            <tag> 第三方链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.mac 上使用 vi</title>
      <link href="/leader755/38612.html"/>
      <url>/leader755/38612.html</url>
      
        <content type="html"><![CDATA[<p>上一篇博客提到 mac 进入 vi 编辑界面，复制 ssh key。这篇就是介绍如何保存退出 vi。</p><p>如果是 vi，则：<br><strong>Esc</strong> 退出编辑模式，输入以下命令：<br><strong>:wq</strong> 保存后退出 vi，若为 :wq! 则为强制储存后退出（常用）<br><strong>:w</strong> 保存但不退出（常用）<br><strong>:w!</strong> 若文件属性为『只读』时，强制写入该档案<br><strong>:q</strong> 离开 vi （常用）<br><strong>:q!</strong> 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。<br><strong>:e!</strong> 将档案还原到最原始的状态！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> vi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.mac上生成SSH key与GitHub通信</title>
      <link href="/leader755/10760.html"/>
      <url>/leader755/10760.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-检查-SSH-key-是否存在"><a href="#1-检查-SSH-key-是否存在" class="headerlink" title="1.检查 SSH key 是否存在"></a>1.检查 SSH key 是否存在</h2><p>在终端输入：</p><pre class=" language-javascript"><code class="language-javascript">ls <span class="token operator">-</span>a <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh</code></pre><p>如果没有，终端显示如下：</p><blockquote><p>No such file or directory</p></blockquote><p>如果已经存在，则会显示 id_rsa 和 id_rsa.pub</p><ul><li>查看 .ssh</li></ul><pre class=" language-javascript"><code class="language-javascript">ls <span class="token operator">-</span>a <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>sshcd <span class="token punctuation">.</span>sshcat id_rsa<span class="token punctuation">.</span>pub <span class="token comment" spellcheck="true">//查看公钥</span>cat id_rsa     <span class="token comment" spellcheck="true">//查看私钥</span></code></pre><h2 id="2-生成新的-SSH-key"><a href="#2-生成新的-SSH-key" class="headerlink" title="2.生成新的 SSH key"></a>2.生成新的 SSH key</h2><h4 id="1-设置-username-和-email（github-每次-commit-都会记录他们）"><a href="#1-设置-username-和-email（github-每次-commit-都会记录他们）" class="headerlink" title="1.设置 username 和 email（github 每次 commit 都会记录他们）"></a>1.设置 username 和 email（github 每次 commit 都会记录他们）</h4><pre class=" language-javascript"><code class="language-javascript">git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"Leader755"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"1181012791@qq.com"</span></code></pre><h4 id="2-通过终端命令创建-ssh-key"><a href="#2-通过终端命令创建-ssh-key" class="headerlink" title="2.通过终端命令创建 ssh key"></a>2.通过终端命令创建 ssh key</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//其中 your_email@example.com 为你在 GitHub 注册时的邮箱</span>'ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"1181012791@qq.com"</span></code></pre><p><a href="https://www.cnblogs.com/jarod99/p/7251361.html" target="_blank" rel="noopener">Bad escape character ‘ygen’ 错误原因!</a></p><blockquote><p>ssh-keygen -t rsa -C “邮箱”<br>ssh-keygen 命令中间没有空格，如果在 ssh 后面加上空格，会得到 Bad escape character ‘ygen’.的错误。</p></blockquote><p>成功后终端显示如下：</p><blockquote><p>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/xxx/.ssh/id_rsa):</p></blockquote><p>提示你保存 .ssh/id_rsa 的路径，这里直接 enter</p><blockquote><p>Created directory ‘/Users/xxx/.ssh’.<br>Enter passphrase (empty for no passphrase):</p></blockquote><p>提示输入 passphrase，每次与 GitHub 通信都会要求输入 passphrase，以避免某些「失误」，建议输入<br><strong>这里有个问题需要注意，那就是当你在这里输入密码，以后在连接 gitHub 去 push 代码的时候都需要输入密码，非常蛋疼，所以在这里最好直接回车过即可，不用输入密码。**</strong>()**</p><h4 id="3-即连续-enter-3-次，就会生成-key。"><a href="#3-即连续-enter-3-次，就会生成-key。" class="headerlink" title="3.即连续 enter 3 次，就会生成 key。"></a>3.即连续 enter 3 次，就会生成 key。</h4><p>成功后终端显示：</p><blockquote><p>Your identification has been saved in /Users/xxx/.ssh/id_rsa.<br>Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48 <a href="mailto:your_email@example.com">your_email@example.com</a><br>The key’s randomart image is:（后面图形省略）</p></blockquote><h2 id="3-添加-key-到-SSH"><a href="#3-添加-key-到-SSH" class="headerlink" title="3.添加 key 到 SSH"></a>3.添加 key 到 SSH</h2><p>输入命令：</p><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa</code></pre><p>此时会要求输入 passphrase，输入步骤二中填的 passphrase<br>成功后，终端显示：</p><blockquote><p>Identity added: /Users/xxx/.ssh/id_rsa (/Users/xxx/.ssh/id_rsa)</p></blockquote><p>最后，在 /Users/xxx/.ssh/ 生成两个文件，id_rsa 和 id_rsa.pub<br>此时，SSH key 已经生成成功</p><h2 id="4-添加-SSH-key-到-GitHub-和-coding"><a href="#4-添加-SSH-key-到-GitHub-和-coding" class="headerlink" title="4.添加 SSH key 到 GitHub 和 coding"></a>4.添加 SSH key 到 GitHub 和 coding</h2><h4 id="1-复制-id-rsa-pub-中的所有内容"><a href="#1-复制-id-rsa-pub-中的所有内容" class="headerlink" title="1.复制 id_rsa.pub 中的所有内容,"></a>1.复制 id_rsa.pub 中的所有内容,</h4><p>打开 id_rsa.pub，终端命令：</p><pre class=" language-javascript"><code class="language-javascript">vim<span class="token regex">/cat   ~/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pub</code></pre><p>手动复制以 ssh-rsa 到以 <a href="mailto:your_email@example.com">your_email@example.com</a> 结尾的所有内容</p><p>或者直接输入命令复制 id_rsa.pub 中的所有内容，终端命令：</p><pre class=" language-javascript"><code class="language-javascript">pbcopy <span class="token operator">&lt;</span> <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>_adirs<span class="token punctuation">.</span>pub<span class="token punctuation">;</span></code></pre><h2 id="5-登录-GitHub-和-coding"><a href="#5-登录-GitHub-和-coding" class="headerlink" title="5.登录 GitHub 和 coding"></a>5.登录 GitHub 和 coding</h2><h4 id="github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key"><a href="#github：打开个人-Settings–-gt-SSH-keys–-gt-Add-SSH-key" class="headerlink" title="github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key"></a>github：打开个人 Settings–&gt;SSH keys–&gt;Add SSH key</h4><h4 id="coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥"><a href="#coding：打开个人设置–-gt-SSH-公钥-–-gt-新增公钥" class="headerlink" title="coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥"></a>coding：打开个人设置–&gt;SSH 公钥 –&gt;新增公钥</h4><p>Title 随便写<br>Key 粘贴之前复制的内容<br>这样 SSH key 就添加的 GitHub 或者 coding.<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333300890-a4b759da-4e1d-4837-8cc3-c2c3b1fa1f01.png#align=left&display=inline&height=565&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1130&originWidth=1902&size=254444&status=done&style=none&width=951" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1588333326072-e78c1bf9-ed79-4811-bbc9-a203e423b57a.png#align=left&display=inline&height=560&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1120&originWidth=1946&size=357795&status=done&style=none&width=973" alt="image.png"></p><h2 id="6-检测-SSH-key"><a href="#6-检测-SSH-key" class="headerlink" title="6.检测 SSH key"></a>6.检测 SSH key</h2><p>输入命令：</p><pre class=" language-javascript"><code class="language-javascript">ssh git@github<span class="token punctuation">.</span>com</code></pre><p>此时会验证 SSH key 是否可以访问 GitHub<br>成功显示如下：</p><blockquote><p>Hi your_name! You’ve successfully authenticated, but GitHub does not provide shell access.<br>Connection to github.com closed.</p></blockquote><blockquote><p>以上为提示内容，不过这里还是有一个需要注意的地方，如果没有上面的成功提示输出的话也不要害怕，我们可以先自己在本地建立一个 gitHub 仓库，然后进行 push 操作，如果 push 成功那么设置是成功的，如果 push 不上去的话再去检查。</p></blockquote><h2 id="7-使用-git-去创建一个-ssh-key-就完成了"><a href="#7-使用-git-去创建一个-ssh-key-就完成了" class="headerlink" title="7.使用 git 去创建一个 ssh key 就完成了"></a>7.使用 git 去创建一个 ssh key 就完成了</h2><h2 id="8-已经存在-ssh，创建新密钥"><a href="#8-已经存在-ssh，创建新密钥" class="headerlink" title="8.已经存在 ssh，创建新密钥"></a>8.已经存在 ssh，创建新密钥</h2><h3 id="1-gt-进入-ssh-目录"><a href="#1-gt-进入-ssh-目录" class="headerlink" title="1&gt;进入 ssh 目录"></a>1&gt;进入 ssh 目录</h3><pre class=" language-javascript"><code class="language-javascript">cd <span class="token operator">~</span><span class="token regex">/.ssh/</span></code></pre><h3 id="2-gt-用-ssh-keygen-命令生成一组新的-id-rsa-new-和-id-rsa-new-pub"><a href="#2-gt-用-ssh-keygen-命令生成一组新的-id-rsa-new-和-id-rsa-new-pub" class="headerlink" title="2&gt;用 ssh-keygen 命令生成一组新的 id_rsa_new 和 id_rsa_new.pub"></a>2&gt;用 ssh-keygen 命令生成一组新的 id_rsa_new 和 id_rsa_new.pub</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"new email"</span></code></pre><blockquote><p>需要注意，出现提示输入文件名的时候要输入与默认配置不一样的文件名，比如： id_rsa_new</p></blockquote><h3 id="3-gt-执行-ssh-agent-让-ssh-识别新的私钥"><a href="#3-gt-执行-ssh-agent-让-ssh-识别新的私钥" class="headerlink" title="3&gt;执行 ssh-agent 让 ssh 识别新的私钥"></a>3&gt;执行 ssh-agent 让 ssh 识别新的私钥</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa_new</code></pre><h3 id="4-gt-添加-SSH-到钥匙串"><a href="#4-gt-添加-SSH-到钥匙串" class="headerlink" title="4&gt;添加 SSH 到钥匙串"></a>4&gt;添加 SSH 到钥匙串</h3><pre class=" language-javascript"><code class="language-javascript">ssh<span class="token operator">-</span>add <span class="token operator">-</span>K KeyPathOrKeyName</code></pre>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 使用 homebrew</title>
      <link href="/leader755/65348.html"/>
      <url>/leader755/65348.html</url>
      
        <content type="html"><![CDATA[<p>使用 brew update 指令</p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>Error: The following directories are not writable by your user:<br>/usr/local/sbin<br>/usr/local/share/man/man5<br>/usr/local/share/man/man7</p><p>解决办法：</p><pre class=" language-javascript"><code class="language-javascript">sudo chown <span class="token operator">-</span>R <span class="token function">$</span><span class="token punctuation">(</span>whoami<span class="token punctuation">)</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token operator">*</span></code></pre><p>重新调用即可：</p><pre><code>brew update</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat下部署vue项目[history模式]</title>
      <link href="/leader755/14064.html"/>
      <url>/leader755/14064.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-项目发布后通常有两种访问方式，"><a href="#1-项目发布后通常有两种访问方式，" class="headerlink" title="1.项目发布后通常有两种访问方式，"></a>1.项目发布后通常有两种访问方式，</h2><p>第一种： IP+端口直接访问的方式，如 <a href="http://192.168.4.160:6090/" target="_blank" rel="noopener">http://192.168.1.107:8080/</a><br>第二种：IP+端口+项目名，如 <a href="https://links.jianshu.com/go?to=http%3A%2F%2F192.168.4.160%3A6090%2Fhuangshi%2F" target="_blank" rel="noopener">http://192.168.1.107:8080/saas/</a></p><h2 id="2-第一种方式：ip-端口（前端后端修改）"><a href="#2-第一种方式：ip-端口（前端后端修改）" class="headerlink" title="2.第一种方式：ip+端口（前端后端修改）"></a>2.第一种方式：ip+端口（前端后端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p><p>步骤：</p><h3 id="1-修改配置文件-router-js"><a href="#1-修改配置文件-router-js" class="headerlink" title="1.修改配置文件 router.js"></a>1.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将mode值改为history</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"HelloWorld"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一"><a href="#2-1-将-tomcat-下的-ROOT-文件中的内容替换-选择其一" class="headerlink" title="2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)"></a>2.1 将 tomcat 下的 ROOT 文件中的内容替换(选择其一)</h3><p>（此种方式需要删除 ROOT 文件夹下的全部内容，将打包的文件放进去，无需修改配置文件）<br><strong>找到 tomcat 目录，将 tomcat-&gt;ROOT 文件夹中文件全部删除，将打包好的 dist 文件夹中的文件全部放到 ROOT 文件夹中。</strong><br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579239963286-48f67f71-308e-49dc-9953-8cc2cc1be528.png#align=left&display=inline&height=166&margin=%5Bobject%20Object%5D&name=image.png&originHeight=331&originWidth=1486&size=32467&status=done&style=none&width=743" alt="image.png"></p><h3 id="2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一"><a href="#2-2-修改-tomcat-gt-conf-server-xml-配置-选择其一" class="headerlink" title="2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)"></a>2.2 修改 tomcat-&gt;conf/server.xml 配置(选择其一)</h3><p>(此种方式无需删除 ROOT 文件夹中的内容，只需修改 serve.xml 中的配置)<br><strong>找到 tomcat 目录，修改 tomcat-&gt;conf/server.xml，增加 Context 节点。设置 docBase=”/saas” 。其中的 saas 就是 webapps 目录下的项目名称（文件夹名）</strong><br>**<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579153518666-35db848d-44c8-411f-a40d-02dc81ae9ae8.png#align=left&display=inline&height=696&margin=%5Bobject%20Object%5D&name=%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200116134505.png&originHeight=696&originWidth=1277&size=80321&status=done&style=none&width=1277" alt="微信图片_20200116134505.png"></p><h2 id="3-第二种方式：ip-端口-项目名（前端修改）"><a href="#3-第二种方式：ip-端口-项目名（前端修改）" class="headerlink" title="3.第二种方式：ip+端口+项目名（前端修改）"></a>3.第二种方式：ip+端口+项目名（前端修改）</h2><p>范例：vue-cli 项目使用路由，tomcat 作为服务器，项目文件夹名 saas</p><p>步骤：</p><h3 id="1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件："><a href="#1-首先创建-WEB-INF-文件，文件夹中创建-web-xml-文件：" class="headerlink" title="1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件："></a>1.首先创建 WEB-INF 文件，文件夹中创建 web.xml 文件：</h3><p>因为是 history 模式, 要防止在路由下刷新变成 404 错误，这需要让 tomcat 都定位到首页，也就是 index.html 页，以往我们使用 Java 写 web 项目部署在 tomcat 时，通常都会有一个 WEB-INF 文件夹，并包含一个 web.xml 文件，而 vue 项目 build 之后只是纯静态资源项目，所以我们需要在 build 之后的 dist 文件夹里新增一个 WEB-INF 文件夹，并新建 web.xml 文件。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579014872343-c8253ec9-d3d5-4b53-bda6-3983472244ae.png#align=left&display=inline&height=421&margin=%5Bobject%20Object%5D&name=image.png&originHeight=842&originWidth=482&size=57023&status=done&style=none&width=241" alt="image.png"></p><p><strong>在项目目录下新建**</strong><code>WEB-INF</code>*<strong>*文件夹， 接着在**</strong><code>WEB-INF</code>*<strong>*文件夹下新建 **</strong><code>web.xml</code>*<strong>*文件，内容如下：</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version='1.0' encoding='UTF-8'?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee/web-app_2_5.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scplatform<span class="token punctuation">"</span></span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">></span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><h3 id="2-修改配置文件-router-js"><a href="#2-修改配置文件-router-js" class="headerlink" title="2.修改配置文件 router.js"></a>2.修改配置文件 router.js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 开启history模式需要后端配置404时返回/index.html</span>  base<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//当项目不在根目录时，必须添加子目录路径，否则空白页面</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// '/saas/home'</span>      name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> home<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-修改-config-文件夹下的-index-js-中配置"><a href="#3-修改-config-文件夹下的-index-js-中配置" class="headerlink" title="3.修改 config 文件夹下的 index.js 中配置"></a>3.修改 config 文件夹下的 index.js 中配置</h3><pre class=" language-javascript"><code class="language-javascript">build<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Template for index.html</span>    index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// Paths</span>    assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//构建输出目录,也就是构建后的东西都扔这里</span>    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//源子目录 除了index.html，其余的js img css都分在这里</span>    <span class="token comment" spellcheck="true">/**添加开始**/</span>    <span class="token comment" spellcheck="true">//tomcat webapps/sass/</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">"/saas/"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//需要加上这一行项目目录,一个 / 表示根目录</span>        <span class="token comment" spellcheck="true">/**添加结束**/</span>  <span class="token punctuation">}</span></code></pre><h3 id="4-webpack-设置不打包文件WEB-INF"><a href="#4-webpack-设置不打包文件WEB-INF" class="headerlink" title="4.webpack 设置不打包文件WEB-INF"></a>4.webpack 设置不打包文件<code>WEB-INF</code></h3><p>到此处已经可以成功配置一个 tomcat 服务下的 vue 的 history 模式的项目，但是不能每次打包去手动<strong>添加和更改新建<code>WEB-INF</code>文件夹</strong>吧，遇到过设置不打包文件 WEB-INF 文件时的配置未生效，导致 WEB-INF 下的 web.xml 文件被打包成 js 文件，导致当前路由刷新报 404 错误。<br>(这个错误找了 好久，以为配置好了，就 Ok 了，由于代码同步问题，没注意可能就发生问题，所以上传服务器前一定要记得检查下<strong><code>WEB-INF</code>文件夹是否存在 web.xml 文件</strong>)</p><p><strong>修改 webpack.prod.conf.js 配置</strong></p><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// copy custom static assets</span>  <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../static"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      to<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">,</span>      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**添加开始**/</span>    <span class="token punctuation">{</span>      <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../WEB-INF"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 不打包直接输出的文件</span>      to<span class="token punctuation">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包后静态文件放置位置</span>      ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 忽略规则。（这种写法表示将该文件夹下的所有文件都复制）</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**添加结束**/</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>关于此处的的设置不打包问题可以自行搜索，关键词：<strong>webpack 设置不打包文件</strong><br>**<br>**</p><h3 id="5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式"><a href="#5-到此处前端已经成功配置了-tomcat-下-vue-的-history-模式" class="headerlink" title="5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式"></a>5.到此处前端已经成功配置了 tomcat 下 vue 的 history 模式</h3><p>项目最终目录如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/241787/1579015282523-603258d7-6c26-49bd-8f0c-cb6453d65a11.png#align=left&display=inline&height=464&margin=%5Bobject%20Object%5D&name=image.png&originHeight=928&originWidth=504&size=64927&status=done&style=none&width=252" alt="image.png"></p><h3 id="6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容："><a href="#6-注意-vue-cli-3-x-vue-cli-打包配置还需要设置以下内容：" class="headerlink" title="6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容："></a>6.注意 vue-cli 3.x vue-cli 打包配置还需要设置以下内容：</h3><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  publicPath<span class="token punctuation">:</span> <span class="token string">"/saas"</span><span class="token punctuation">,</span>  configureWebpack<span class="token punctuation">:</span> <span class="token punctuation">{</span>    performance<span class="token punctuation">:</span> <span class="token punctuation">{</span>      hints<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="4-结语"><a href="#4-结语" class="headerlink" title="4.结语"></a>4.结语</h2><p>终于完成了，也是踩了不少坑和加上一些搜索，感觉目前给的文档都不太详细，所以自己写了一篇关于 tomcat 下的 vue 的 history 模式，希望能帮到大家，欢迎大家一起交流。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给文件添加一个.gitignore</title>
      <link href="/leader755/54468.html"/>
      <url>/leader755/54468.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-WHY"><a href="#1-WHY" class="headerlink" title="1.WHY?"></a>1.WHY?</h2><p>.gitignore 文件只要在这个文件中申明那些文件你不希望添加到 git 中去，这样当你使用<code>git add .</code>这些文件就会被自动忽略掉</p><h2 id="2-忽略文件的原则"><a href="#2-忽略文件的原则" class="headerlink" title="2.忽略文件的原则"></a>2.忽略文件的原则</h2><ul><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如 Java 编译产生的.class 文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ul><h2 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3.使用方法"></a>3.使用方法</h2><p>首先，在你的工作区新建一个名称为<code>.gitignore</code>的文件。<br>然后，把要忽略的文件名填进去，Git 就会自动忽略这些文件。<br>不需要从头写.gitignore 文件，GitHub 已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://link.jianshu.com?t=https://github.com/github/gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore</a></p><h2 id="4-例子"><a href="#4-例子" class="headerlink" title="4.例子"></a>4.例子</h2><p>比如你的项目是 java 项目，<code>.java</code>文件编译后会生成<code>.class</code>文件，这些文件多数情况下是不想被传到仓库中的文件。这时候你可以直接适用 github 的.gitignore 文件模板。<a href="https://link.jianshu.com?t=https://github.com/github/gitignore/blob/master/Java.gitignore" target="_blank" rel="noopener">https://github.com/github/gitignore/blob/master/Java.gitignore</a> 将这些忽略文件信息复制到你的.gitignore 文件中去：</p><pre><code>*.class# Mobile Tools for Java (J2ME).mtj.tmp/# Package Files #*.jar*.war*.ear# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xmlhs_err_pid*</code></pre><p>可以看到 github 为我们提供了最流行的.gitignore 文件配置。<br>保存.ignore 文件后我们查看下 git status，检查下是否还有我们不需要的文件会被添加到 git 中去：</p><pre><code>$ git statusOn branch masterInitial commitChanges to be committed:  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)        new file:   .gitignore        new file:   HelloWorld.javaUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)        Config.ini</code></pre><p>比如我的项目目录下有一个 Config.ini 文件，这个是个本地配置文件我不希望上传到 git 中去，我们可以在 gitignore 文件中添加这样的配置：</p><pre class=" language-javascript"><code class="language-javascript">Config<span class="token punctuation">.</span>ini<span class="token punctuation">;</span></code></pre><p>或者你想忽略所有的.ini 文件你可以这样写：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">*</span><span class="token punctuation">.</span>ini</code></pre><p>如果有些文件已经被你忽略了，当你使用<code>git add</code>时是无法添加的，比如我忽略了<code>*.class</code>，现在我想把<code>HelloWorld.class</code>添加到 git 中去：</p><pre class=" language-javascript"><code class="language-javascript">$ git add HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">The</span> following paths are ignored by one <span class="token keyword">of</span> your <span class="token punctuation">.</span>gitignore files<span class="token punctuation">:</span>HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name">Use</span> <span class="token operator">-</span>f <span class="token keyword">if</span> you really want to add them<span class="token punctuation">.</span></code></pre><p>git 会提示我们这个文件已经被我们忽略了，需要加上<code>-f</code>参数才能强制添加到 git 中去：</p><pre class=" language-javascript"><code class="language-javascript">$ git statusOn branch masterInitial commitChanges to be committed<span class="token punctuation">:</span>  <span class="token punctuation">(</span>use <span class="token string">"git rm --cached &lt;file>..."</span> to unstage<span class="token punctuation">)</span>        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span>gitignore        <span class="token keyword">new</span> <span class="token class-name">file</span><span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span>        <span class="token class-name">new</span> file<span class="token punctuation">:</span>   HelloWorld<span class="token punctuation">.</span>java</code></pre><p>这样就能强制添加到缓存中去了。<br>如果我们意外的将想要忽略的文件添加到缓存中去了，我们可以使用<code>rm</code>命令将其从中移除：</p><pre class=" language-javascript"><code class="language-javascript">$ git rm HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">--</span>cachedrm <span class="token string">'HelloWorld.class'</span></code></pre><p>如果你已经把不想上传的文件上传到了 git 仓库，那么你必须先从远程仓库删了它，我们可以从远程仓库直接删除然后 pull 代码到本地仓库这些文件就会本删除，或者从本地删除这些文件并且在.gitignore 文件中添加这些你想忽略的文件，然后再 push 到远程仓库。</p><h2 id="5-查看-gitignore-规则"><a href="#5-查看-gitignore-规则" class="headerlink" title="5.查看 gitignore 规则"></a>5.查看 gitignore 规则</h2><p>如果你发下<code>.gitignore</code>写得有问题，需要找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><pre class=" language-javascript"><code class="language-javascript">$ git check<span class="token operator">-</span>ignore <span class="token operator">-</span>v HelloWorld<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token class-name"><span class="token punctuation">.</span>gitignore</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token class-name">HelloWorld<span class="token punctuation">.</span>class</span></code></pre><p>可以看到<code>HelloWorld.class</code>匹配到了我们的第一条<code>*.class</code>的忽略规则所以文件被忽略了。</p><h2 id="6-忽略规则文件语法"><a href="#6-忽略规则文件语法" class="headerlink" title="6.忽略规则文件语法"></a>6.忽略规则文件语法</h2><h3 id="a-忽略指定文件-目录"><a href="#a-忽略指定文件-目录" class="headerlink" title="a.忽略指定文件/目录"></a>a.忽略指定文件/目录</h3><pre class=" language-javascript"><code class="language-javascript"># 忽略指定文件HelloWrold<span class="token punctuation">.</span><span class="token keyword">class</span># 忽略指定文件夹bin<span class="token operator">/</span>bin<span class="token regex">/gen/</span></code></pre><h3 id="b-通配符忽略规则"><a href="#b-通配符忽略规则" class="headerlink" title="b.通配符忽略规则"></a>b.通配符忽略规则</h3><p>通配符规则如下：</p><pre class=" language-javascript"><code class="language-javascript"># 忽略<span class="token punctuation">.</span><span class="token keyword">class</span>的所有文件<span class="token operator">*</span><span class="token punctuation">.</span><span class="token keyword">class</span># 忽略名称中末尾为ignore的文件夹<span class="token operator">*</span>ignore<span class="token operator">/</span># 忽略名称中间包含ignore的文件夹<span class="token operator">*</span>ignore<span class="token operator">*</span><span class="token operator">/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitignore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.一键搭建 github 博客</title>
      <link href="/leader755/34081.html"/>
      <url>/leader755/34081.html</url>
      
        <content type="html"><![CDATA[<p>创建 GitHub Pages</p><p>我们托管静态博客，使用的就是 GitHub Pages 的功能，首先我们需要创建一个个人主页，点击右上角的加号，选择 new repositories，进入创建页面。有的是说 username.github.io   但是我用着就是不行，说需要等待 10 分钟，username.github.com 下面的做法，不用等待，而且访问的地址是 username.github.io<br><img src="https://img-blog.csdn.net/20160515225516517?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1230&margin=%5Bobject%20Object%5D&originHeight=1230&originWidth=2546&status=done&style=none&width=2546" alt=""></p><p>这样我们以后可以通过 username.github.io 来访问你的主页，点击 Create repository 创建成功，然后点击侧边栏的 setting，进入设置页面：<br><img src="https://img-blog.csdn.net/20160515225531939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1232&margin=%5Bobject%20Object%5D&originHeight=1232&originWidth=2538&status=done&style=none&width=2538" alt=""></p><p>点击设置成主页，跳转后无需填写信息直接点击<code>Continue to Layouts</code>为主页选择一个主题：<br><img src="https://img-blog.csdn.net/20160515225550330?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center#align=left&display=inline&height=1230&margin=%5Bobject%20Object%5D&originHeight=1230&originWidth=2506&status=done&style=none&width=2506" alt=""></p><p>点击<code>publish pages</code>就创建个人主页成功了，这也是我们托管自己博客的仓库，你可以通过<code>username.github.io</code>来先浏览刚生成的个人主页。</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序中setData修改属性值</title>
      <link href="/leader755/16589.html"/>
      <url>/leader755/16589.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-修改对象属性"><a href="#1-修改对象属性" class="headerlink" title="1.修改对象属性"></a>1.修改对象属性</h2><p>##</p><h3 id="1-gt-第一种"><a href="#1-gt-第一种" class="headerlink" title="1&gt;第一种"></a>1&gt;第一种</h3><pre class=" language-javascript"><code class="language-javascript"> changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'person.name'</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>###</p><h3 id="2-gt-第二种"><a href="#2-gt-第二种" class="headerlink" title="2&gt;第二种"></a>2&gt;第二种</h3><pre class=" language-javascript"><code class="language-javascript">changePerson<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">'person.name'</span><span class="token punctuation">:</span> <span class="token string">'fxjzzyo'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>#</p><h2 id="2-修改数组属性"><a href="#2-修改数组属性" class="headerlink" title="2.修改数组属性"></a>2.修改数组属性</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token string">"array["</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">"].amount"</span><span class="token punctuation">]</span><span class="token punctuation">:</span> amount<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> setData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.搭建本地的 hexo 的博客</title>
      <link href="/leader755/7894.html"/>
      <url>/leader755/7894.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-gt-官方文档-https-github-com-hexojs-hexo"><a href="#1-gt-官方文档-https-github-com-hexojs-hexo" class="headerlink" title="1&gt;官方文档   https://github.com/hexojs/hexo"></a>1&gt;官方文档   <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></h2><h2 id="2-gt-搭建博客"><a href="#2-gt-搭建博客" class="headerlink" title="2&gt;搭建博客"></a>2&gt;搭建博客</h2><h3 id="1-全局安装-hexo，创建博客"><a href="#1-全局安装-hexo，创建博客" class="headerlink" title="1.全局安装 hexo，创建博客"></a>1.全局安装 hexo，创建博客</h3><pre class=" language-javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>g</code></pre><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h3><pre class=" language-javascript"><code class="language-javascript">hexo init blog</code></pre><h3 id="3-启动本地-hexo-server"><a href="#3-启动本地-hexo-server" class="headerlink" title="3.启动本地 hexo-server"></a>3.启动本地 hexo-server</h3><pre class=" language-javascript"><code class="language-javascript">hexo server</code></pre><h2 id="4-新建一个-hexo-博客，富文本-makedown-文档"><a href="#4-新建一个-hexo-博客，富文本-makedown-文档" class="headerlink" title="4.新建一个 hexo 博客，富文本 makedown 文档"></a>4.新建一个 hexo 博客，富文本 makedown 文档</h2><pre class=" language-javascript"><code class="language-javascript">$ hexo <span class="token keyword">new</span> <span class="token string">"Hello Hexo"</span></code></pre><h2 id="5-打包发布到-hexo"><a href="#5-打包发布到-hexo" class="headerlink" title="5.打包发布到 hexo"></a>5.打包发布到 hexo</h2><pre><code>//打包发布 hexohexo generate//重启服务(可以看到新增的文档)hexo server</code></pre><h2 id="6-packge-json-的命令行（备份文件）"><a href="#6-packge-json-的命令行（备份文件）" class="headerlink" title="6.packge.json 的命令行（备份文件）"></a>6.packge.json 的命令行（备份文件）</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>    <span class="token string">"clean"</span><span class="token punctuation">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>    <span class="token string">"deploy"</span><span class="token punctuation">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>    <span class="token string">"server"</span><span class="token punctuation">:</span> <span class="token string">"hexo server"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
